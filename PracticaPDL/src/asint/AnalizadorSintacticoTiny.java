
package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.E;
import ast.AS;
import ast.Ins;
import java.util.List;
import java.util.ArrayList;
import ast.P;
import ast.Tipos;
import ast.Case;
import ast.TipoParam;
import ast.Param;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
<<<<<<< HEAD
  * @version Thu Apr 30 16:53:17 CEST 2020
=======
  * @version Tue May 12 18:47:53 CEST 2020
>>>>>>> branch 'master' of https://github.com/Jorgitou98/PracticasProcesadoresDelLenguaje.git
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\020\012\000\002\003\007\000\002\003\013" +
    "\000\002\005\007\000\002\005\014\000\002\005\014\000" +
    "\002\006\003\000\002\006\005\000\002\017\007\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\006\000\002\045\003\000\002\045\006" +
    "\000\002\007\006\000\002\010\010\000\002\035\003\000" +
    "\002\035\002\000\002\036\005\000\002\036\003\000\002" +
    "\011\011\000\002\041\011\000\002\041\005\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\012\016\000" +
    "\002\042\006\000\002\042\005\000\002\042\002\000\002" +
    "\043\007\000\002\043\006\000\002\043\002\000\002\013" +
    "\012\000\002\014\007\000\002\044\004\000\002\044\002" +
    "\000\002\015\011\000\002\037\004\000\002\037\002\000" +
    "\002\040\005\000\002\040\002\000\002\016\006\000\002" +
    "\021\003\000\002\021\003\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\003\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\003\000\002\027\004\000\002\027\003\000" +
    "\002\030\006\000\002\030\005\000\002\030\005\000\002" +
    "\030\003\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\006\000\002\032\003\000\002" +
    "\032\005\000\002\032\005\000\002\033\010\000\002\033" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\076\002\uffff\003\042\004\040\005\067\010" +
    "\062\011\012\012\053\015\035\016\031\020\066\021\020" +
    "\023\071\024\034\025\060\026\033\027\006\030\043\036" +
    "\014\037\047\051\056\064\046\065\061\066\055\067\054" +
    "\070\022\071\011\072\026\073\004\074\063\075\052\001" +
    "\002\000\012\040\uffe6\051\uffe6\062\uffe6\065\uffe6\001\002" +
    "\000\004\002\376\001\002\000\022\004\040\005\067\051" +
    "\056\064\046\065\125\066\055\067\054\070\022\001\002" +
    "\000\104\002\uffeb\003\uffeb\004\uffeb\005\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\036\uffeb\037\uffeb\047\uffeb\051\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\075\uffeb\001\002\000\104\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\036\ufffe\037\ufffe\047\ufffe\051" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\073\ufffe\074\ufffe\075\ufffe\001\002\000\012\040" +
    "\uffe8\051\uffe8\062\uffe8\065\uffe8\001\002\000\004\051\350" +
    "\001\002\000\056\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000\032" +
    "\004\040\005\067\026\033\027\006\030\043\036\014\051" +
    "\056\064\046\065\125\066\055\067\054\070\022\001\002" +
    "\000\056\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002\000\056\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\341\046\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\342\057\uffab\001\002\000\052\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\046\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\057\uffad\001\002\000\020\037" +
    "\047\065\075\071\011\072\026\073\004\074\063\075\052" +
    "\001\002\000\052\026\uffb2\027\uffb2\030\314\031\312\032" +
    "\315\033\313\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\046\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\057\uffb2\001\002\000\056\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\001\002\000\104\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\036\ufff8\037\ufff8\047\ufff8\051\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\001\002\000\042\026\302\027" +
    "\276\034\uffb5\035\uffb5\037\304\040\305\041\300\042\277" +
    "\043\301\044\303\046\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\057\uffb5\001\002\000\022\034\274\035\uffbc\046\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc\001\002\000" +
    "\012\040\uffe7\051\uffe7\062\uffe7\065\uffe7\001\002\000\104" +
    "\002\ufffa\003\ufffa\004\ufffa\005\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\036" +
    "\ufffa\037\ufffa\047\ufffa\051\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075" +
    "\ufffa\001\002\000\020\035\272\046\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\057\uffbe\001\002\000\004\065\265\001" +
    "\002\000\004\053\254\001\002\000\022\004\040\005\067" +
    "\051\056\064\046\065\125\066\055\067\054\070\022\001" +
    "\002\000\020\037\047\065\075\071\011\072\026\073\004" +
    "\074\063\075\052\001\002\000\034\004\040\005\067\006" +
    "\127\026\033\027\006\030\043\036\014\051\056\064\046" +
    "\065\125\066\055\067\054\070\022\001\002\000\104\002" +
    "\uffff\003\042\004\040\005\067\010\062\011\012\012\053" +
    "\014\uffff\015\035\016\031\020\066\021\020\022\uffff\023" +
    "\071\024\034\025\060\026\033\027\006\030\043\036\014" +
    "\037\047\047\uffff\051\056\064\046\065\061\066\055\067" +
    "\054\070\022\071\011\072\026\073\004\074\063\075\052" +
    "\001\002\000\104\002\ufffb\003\ufffb\004\ufffb\005\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\036\ufffb\037\ufffb\047\ufffb\051\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073" +
    "\ufffb\074\ufffb\075\ufffb\001\002\000\056\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\001\002\000\104\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\036\ufff9\037\ufff9\047\ufff9\051\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\001\002\000\004\055\236\001" +
    "\002\000\022\004\040\005\067\051\056\064\046\065\125" +
    "\066\055\067\054\070\022\001\002\000\104\002\ufff3\003" +
    "\ufff3\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\036\ufff3\037\ufff3" +
    "\047\ufff3\051\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070" +
    "\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\001\002" +
    "\000\104\002\ufffd\003\ufffd\004\ufffd\005\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\036\ufffd\037\ufffd\047\ufffd\051\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074" +
    "\ufffd\075\ufffd\001\002\000\056\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\001" +
    "\002\000\020\037\047\065\075\071\011\072\026\073\004" +
    "\074\063\075\052\001\002\000\104\002\ufff4\003\ufff4\004" +
    "\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\036\ufff4\037\ufff4\047\ufff4" +
    "\051\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\001\002\000\004" +
    "\065\225\001\002\000\004\037\222\001\002\000\004\051" +
    "\174\001\002\000\056\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002\000" +
    "\056\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\001\002\000\034\003\170\004" +
    "\040\005\067\026\033\027\006\030\043\036\014\051\056" +
    "\064\046\065\125\066\055\067\054\070\022\001\002\000" +
    "\104\002\ufff5\003\ufff5\004\ufff5\005\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\036\ufff5\037\ufff5\047\ufff5\051\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5" +
    "\075\ufff5\001\002\000\004\065\155\001\002\000\050\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\051\146\053\uff9b\056\uff9b\065\uffe3\001\002" +
    "\000\034\004\040\005\067\006\127\026\033\027\006\030" +
    "\043\036\014\051\056\064\046\065\125\066\055\067\054" +
    "\070\022\001\002\000\012\040\uffe5\051\uffe5\062\uffe5\065" +
    "\uffe5\001\002\000\104\002\ufff6\003\ufff6\004\ufff6\005\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\036\ufff6\037\ufff6\047\ufff6\051\ufff6\064" +
    "\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6" +
    "\073\ufff6\074\ufff6\075\ufff6\001\002\000\104\002\ufff7\003" +
    "\ufff7\004\ufff7\005\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\036\ufff7\037\ufff7" +
    "\047\ufff7\051\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\001\002" +
    "\000\004\065\101\001\002\000\056\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\001\002\000\104\002\ufffc\003\ufffc\004\ufffc\005\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\036\ufffc\037\ufffc\047\ufffc\051\ufffc\064\ufffc" +
    "\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073" +
    "\ufffc\074\ufffc\075\ufffc\001\002\000\004\065\072\001\002" +
    "\000\004\046\073\001\002\000\022\037\047\047\uffc8\065" +
    "\075\071\011\072\026\073\004\074\063\075\052\001\002" +
    "\000\022\037\047\047\uffc8\065\075\071\011\072\026\073" +
    "\004\074\063\075\052\001\002\000\012\040\uffe3\051\uffe3" +
    "\062\uffe3\065\uffe3\001\002\000\004\047\077\001\002\000" +
    "\104\002\uffca\003\uffca\004\uffca\005\uffca\010\uffca\011\uffca" +
    "\012\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\036\uffca\037\uffca\047\uffca\051\uffca\064\uffca\065\uffca\066" +
    "\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca" +
    "\075\uffca\001\002\000\004\047\uffc9\001\002\000\004\051" +
    "\102\001\002\000\022\037\047\052\uffcf\065\075\071\011" +
    "\072\026\073\004\074\063\075\052\001\002\000\006\062" +
    "\111\065\112\001\002\000\004\052\105\001\002\000\004" +
    "\046\106\001\002\000\076\003\042\004\040\005\067\010" +
    "\062\011\012\012\053\015\035\016\031\020\066\021\020" +
    "\023\071\024\034\025\060\026\033\027\006\030\043\036" +
    "\014\037\047\047\uffff\051\056\064\046\065\061\066\055" +
    "\067\054\070\022\071\011\072\026\073\004\074\063\075" +
    "\052\001\002\000\004\047\110\001\002\000\104\002\uffcb" +
    "\003\uffcb\004\uffcb\005\uffcb\010\uffcb\011\uffcb\012\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\036\uffcb\037" +
    "\uffcb\047\uffcb\051\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\001" +
    "\002\000\004\065\123\001\002\000\006\052\uffcc\054\113" +
    "\001\002\000\020\037\047\065\075\071\011\072\026\073" +
    "\004\074\063\075\052\001\002\000\004\052\uffd0\001\002" +
    "\000\006\062\116\065\117\001\002\000\004\065\121\001" +
    "\002\000\006\052\uffcc\054\113\001\002\000\004\052\uffcd" +
    "\001\002\000\006\052\uffcc\054\113\001\002\000\004\052" +
    "\uffce\001\002\000\006\052\uffcc\054\113\001\002\000\004" +
    "\052\uffd1\001\002\000\060\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\051" +
    "\146\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\001\002\000\004\046\143\001\002\000\004\051\132\001" +
    "\002\000\010\046\uffc1\052\uffc1\055\uffc1\001\002\000\010" +
    "\046\uffc0\052\uffc0\055\uffc0\001\002\000\034\004\040\005" +
    "\067\006\127\026\033\027\006\030\043\036\014\051\056" +
    "\064\046\065\125\066\055\067\054\070\022\001\002\000" +
    "\004\054\140\001\002\000\004\054\135\001\002\000\032" +
    "\004\040\005\067\026\033\027\006\030\043\036\014\051" +
    "\056\064\046\065\125\066\055\067\054\070\022\001\002" +
    "\000\004\052\137\001\002\000\012\046\uff98\052\uff98\054" +
    "\uff98\055\uff98\001\002\000\032\004\040\005\067\026\033" +
    "\027\006\030\043\036\014\051\056\064\046\065\125\066" +
    "\055\067\054\070\022\001\002\000\004\052\142\001\002" +
    "\000\012\046\uff97\052\uff97\054\uff97\055\uff97\001\002\000" +
    "\076\003\042\004\040\005\067\010\062\011\012\012\053" +
    "\015\035\016\031\020\066\021\020\023\071\024\034\025" +
    "\060\026\033\027\006\030\043\036\014\037\047\047\uffff" +
    "\051\056\064\046\065\061\066\055\067\054\070\022\071" +
    "\011\072\026\073\004\074\063\075\052\001\002\000\004" +
    "\047\145\001\002\000\104\002\uffee\003\uffee\004\uffee\005" +
    "\uffee\010\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\036\uffee\037\uffee\047\uffee\051\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072" +
    "\uffee\073\uffee\074\uffee\075\uffee\001\002\000\034\004\040" +
    "\005\067\026\033\027\006\030\043\036\014\051\056\052" +
    "\uffde\064\046\065\125\066\055\067\054\070\022\001\002" +
    "\000\004\052\154\001\002\000\004\052\uffdf\001\002\000" +
    "\006\052\uffdc\054\152\001\002\000\032\004\040\005\067" +
    "\026\033\027\006\030\043\036\014\051\056\064\046\065" +
    "\125\066\055\067\054\070\022\001\002\000\004\052\uffdd" +
    "\001\002\000\056\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002\000\004" +
    "\053\156\001\002\000\004\046\157\001\002\000\006\047" +
    "\uffc5\065\160\001\002\000\006\047\uffc3\050\164\001\002" +
    "\000\004\047\162\001\002\000\004\055\163\001\002\000" +
    "\104\002\uffc7\003\uffc7\004\uffc7\005\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\036\uffc7\037\uffc7\047\uffc7\051\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\001\002\000\004\065\166\001\002\000\004\047" +
    "\uffc6\001\002\000\006\047\uffc3\050\164\001\002\000\004" +
    "\047\uffc4\001\002\000\004\052\173\001\002\000\004\052" +
    "\172\001\002\000\056\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002\000" +
    "\056\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\001\002\000\032\004\040\005" +
    "\067\026\033\027\006\030\043\036\014\051\056\064\046" +
    "\065\125\066\055\067\054\070\022\001\002\000\004\052" +
    "\176\001\002\000\004\046\177\001\002\000\006\013\201" +
    "\061\200\001\002\000\004\060\220\001\002\000\016\004" +
    "\206\005\210\065\212\066\207\067\205\070\211\001\002" +
    "\000\004\047\203\001\002\000\104\002\uffdb\003\uffdb\004" +
    "\uffdb\005\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\036\uffdb\037\uffdb\047\uffdb" +
    "\051\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\001\002\000\004" +
    "\060\213\001\002\000\004\060\uffd7\001\002\000\004\060" +
    "\uffd6\001\002\000\004\060\uffd8\001\002\000\004\060\uffd5" +
    "\001\002\000\004\060\uffd4\001\002\000\004\060\uffd3\001" +
    "\002\000\076\003\042\004\040\005\067\010\062\011\012" +
    "\012\053\014\uffff\015\035\016\031\020\066\021\020\023" +
    "\071\024\034\025\060\026\033\027\006\030\043\036\014" +
    "\037\047\051\056\064\046\065\061\066\055\067\054\070" +
    "\022\071\011\072\026\073\004\074\063\075\052\001\002" +
    "\000\004\014\215\001\002\000\004\055\216\001\002\000" +
    "\006\013\201\061\200\001\002\000\004\047\uffda\001\002" +
    "\000\076\003\042\004\040\005\067\010\062\011\012\012" +
    "\053\015\035\016\031\020\066\021\020\023\071\024\034" +
    "\025\060\026\033\027\006\030\043\036\014\037\047\047" +
    "\uffff\051\056\064\046\065\061\066\055\067\054\070\022" +
    "\071\011\072\026\073\004\074\063\075\052\001\002\000" +
    "\004\047\uffd9\001\002\000\020\037\047\065\075\071\011" +
    "\072\026\073\004\074\063\075\052\001\002\000\004\040" +
    "\224\001\002\000\012\040\uffe4\051\uffe4\062\uffe4\065\uffe4" +
    "\001\002\000\006\053\227\055\226\001\002\000\104\002" +
    "\uffea\003\uffea\004\uffea\005\uffea\010\uffea\011\uffea\012\uffea" +
    "\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\036\uffea" +
    "\037\uffea\047\uffea\051\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea" +
    "\001\002\000\034\004\040\005\067\006\127\026\033\027" +
    "\006\030\043\036\014\051\056\064\046\065\125\066\055" +
    "\067\054\070\022\001\002\000\004\055\231\001\002\000" +
    "\104\002\uffe9\003\uffe9\004\uffe9\005\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\036\uffe9\037\uffe9\047\uffe9\051\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9" +
    "\075\uffe9\001\002\000\004\040\233\001\002\000\004\030" +
    "\234\001\002\000\012\040\uffe2\051\uffe2\062\uffe2\065\uffe2" +
    "\001\002\000\056\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\001\002\000\104" +
    "\002\ufff2\003\ufff2\004\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\036" +
    "\ufff2\037\ufff2\047\ufff2\051\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\001\002\000\012\002\001\014\001\022\001\047\001" +
    "\001\002\000\004\046\241\001\002\000\076\003\042\004" +
    "\040\005\067\010\062\011\012\012\053\015\035\016\031" +
    "\020\066\021\020\023\071\024\034\025\060\026\033\027" +
    "\006\030\043\036\014\037\047\047\uffff\051\056\064\046" +
    "\065\061\066\055\067\054\070\022\071\011\072\026\073" +
    "\004\074\063\075\052\001\002\000\004\047\243\001\002" +
    "\000\106\002\ufff0\003\ufff0\004\ufff0\005\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\244\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\036\ufff0\037\ufff0\047\ufff0\051\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073" +
    "\ufff0\074\ufff0\075\ufff0\001\002\000\004\046\245\001\002" +
    "\000\076\003\042\004\040\005\067\010\062\011\012\012" +
    "\053\015\035\016\031\020\066\021\020\023\071\024\034" +
    "\025\060\026\033\027\006\030\043\036\014\037\047\047" +
    "\uffff\051\056\064\046\065\061\066\055\067\054\070\022" +
    "\071\011\072\026\073\004\074\063\075\052\001\002\000" +
    "\004\047\247\001\002\000\104\002\uffef\003\uffef\004\uffef" +
    "\005\uffef\010\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\036\uffef\037\uffef\047\uffef\051" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\001\002\000\004\065" +
    "\251\001\002\000\004\055\252\001\002\000\104\002\uffc2" +
    "\003\uffc2\004\uffc2\005\uffc2\010\uffc2\011\uffc2\012\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\036\uffc2\037" +
    "\uffc2\047\uffc2\051\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\001" +
    "\002\000\056\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001\002\000\036\004" +
    "\040\005\067\006\127\026\033\027\006\030\043\036\014" +
    "\051\056\063\256\064\046\065\125\066\055\067\054\070" +
    "\022\001\002\000\004\055\264\001\002\000\020\037\047" +
    "\065\075\071\011\072\026\073\004\074\063\075\052\001" +
    "\002\000\004\051\260\001\002\000\034\004\040\005\067" +
    "\006\127\026\033\027\006\030\043\036\014\051\056\064" +
    "\046\065\125\066\055\067\054\070\022\001\002\000\004" +
    "\052\262\001\002\000\004\055\263\001\002\000\104\002" +
    "\ufff1\003\ufff1\004\ufff1\005\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\036\ufff1" +
    "\037\ufff1\047\ufff1\051\ufff1\064\ufff1\065\ufff1\066\ufff1\067" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\001\002\000\104\002\uffe1\003\uffe1\004\uffe1\005\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\036\uffe1\037\uffe1\047\uffe1\051\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\075\uffe1\001\002\000\004\051\266\001\002" +
    "\000\034\004\040\005\067\026\033\027\006\030\043\036" +
    "\014\051\056\052\uffde\064\046\065\125\066\055\067\054" +
    "\070\022\001\002\000\004\052\270\001\002\000\004\055" +
    "\271\001\002\000\104\002\uffe0\003\uffe0\004\uffe0\005\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\036\uffe0\037\uffe0\047\uffe0\051\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0" +
    "\073\uffe0\074\uffe0\075\uffe0\001\002\000\032\004\040\005" +
    "\067\026\033\027\006\030\043\036\014\051\056\064\046" +
    "\065\125\066\055\067\054\070\022\001\002\000\016\046" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\057\uffbf\001\002" +
    "\000\032\004\040\005\067\026\033\027\006\030\043\036" +
    "\014\051\056\064\046\065\125\066\055\067\054\070\022" +
    "\001\002\000\020\035\uffbd\046\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\057\uffbd\001\002\000\032\004\040\005\067" +
    "\026\033\027\006\030\043\036\014\051\056\064\046\065" +
    "\125\066\055\067\054\070\022\001\002\000\032\004\040" +
    "\005\067\026\033\027\006\030\043\036\014\051\056\064" +
    "\046\065\125\066\055\067\054\070\022\001\002\000\032" +
    "\004\040\005\067\026\033\027\006\030\043\036\014\051" +
    "\056\064\046\065\125\066\055\067\054\070\022\001\002" +
    "\000\032\004\040\005\067\026\033\027\006\030\043\036" +
    "\014\051\056\064\046\065\125\066\055\067\054\070\022" +
    "\001\002\000\032\004\040\005\067\026\033\027\006\030" +
    "\043\036\014\051\056\064\046\065\125\066\055\067\054" +
    "\070\022\001\002\000\032\004\040\005\067\026\033\027" +
    "\006\030\043\036\014\051\056\064\046\065\125\066\055" +
    "\067\054\070\022\001\002\000\032\004\040\005\067\026" +
    "\033\027\006\030\043\036\014\051\056\064\046\065\125" +
    "\066\055\067\054\070\022\001\002\000\032\004\040\005" +
    "\067\026\033\027\006\030\043\036\014\051\056\064\046" +
    "\065\125\066\055\067\054\070\022\001\002\000\026\026" +
    "\302\027\276\034\uffba\035\uffba\046\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\057\uffba\001\002\000\026\026\302\027" +
    "\276\034\uffb9\035\uffb9\046\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\057\uffb9\001\002\000\026\026\302\027\276\034" +
    "\uffb6\035\uffb6\046\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\057\uffb6\001\002\000\052\026\uffb4\027\uffb4\030\314\031" +
    "\312\032\315\033\313\034\uffb4\035\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\057\uffb4\001\002\000\032\004\040" +
    "\005\067\026\033\027\006\030\043\036\014\051\056\064" +
    "\046\065\125\066\055\067\054\070\022\001\002\000\032" +
    "\004\040\005\067\026\033\027\006\030\043\036\014\051" +
    "\056\064\046\065\125\066\055\067\054\070\022\001\002" +
    "\000\032\004\040\005\067\026\033\027\006\030\043\036" +
    "\014\051\056\064\046\065\125\066\055\067\054\070\022" +
    "\001\002\000\032\004\040\005\067\026\033\027\006\030" +
    "\043\036\014\051\056\064\046\065\125\066\055\067\054" +
    "\070\022\001\002\000\052\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\057\uffb0\001\002\000\052\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\046\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\057\uffb1\001" +
    "\002\000\052\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\046\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\057\uffae\001\002\000\052\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\057\uffaf\001\002\000\026" +
    "\026\302\027\276\034\uffbb\035\uffbb\046\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\057\uffbb\001\002\000\026\026\302" +
    "\027\276\034\uffb7\035\uffb7\046\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\057\uffb7\001\002\000\026\026\302\027\276" +
    "\034\uffb8\035\uffb8\046\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\057\uffb8\001\002\000\052\026\uffb3\027\uffb3\030\314" +
    "\031\312\032\315\033\313\034\uffb3\035\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\057\uffb3\001\002\000\004\065" +
    "\327\001\002\000\004\051\330\001\002\000\022\037\047" +
    "\052\uffcf\065\075\071\011\072\026\073\004\074\063\075" +
    "\052\001\002\000\004\052\332\001\002\000\004\046\333" +
    "\001\002\000\076\003\042\004\040\005\067\010\062\011" +
    "\012\012\053\015\035\016\031\020\066\021\020\022\uffff" +
    "\023\071\024\034\025\060\026\033\027\006\030\043\036" +
    "\014\037\047\051\056\064\046\065\061\066\055\067\054" +
    "\070\022\071\011\072\026\073\004\074\063\075\052\001" +
    "\002\000\004\022\335\001\002\000\034\004\040\005\067" +
    "\006\127\026\033\027\006\030\043\036\014\051\056\064" +
    "\046\065\125\066\055\067\054\070\022\001\002\000\004" +
    "\055\337\001\002\000\004\047\340\001\002\000\104\002" +
    "\uffd2\003\uffd2\004\uffd2\005\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\036\uffd2" +
    "\037\uffd2\047\uffd2\051\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\001\002\000\006\007\346\065\345\001\002\000\032\004" +
    "\040\005\067\026\033\027\006\030\043\036\014\051\056" +
    "\064\046\065\125\066\055\067\054\070\022\001\002\000" +
    "\004\057\344\001\002\000\056\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\001" +
    "\002\000\056\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002\000\056\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\001\002\000\052\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\046\uffac\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\057\uffac\001\002\000\046" +
    "\004\040\005\067\026\033\027\006\030\043\036\014\037" +
    "\047\051\056\064\046\065\061\066\055\067\054\070\022" +
    "\071\011\072\026\073\004\074\063\075\052\001\002\000" +
    "\004\065\374\001\002\000\032\004\040\005\067\026\033" +
    "\027\006\030\043\036\014\051\056\064\046\065\125\066" +
    "\055\067\054\070\022\001\002\000\032\004\040\005\067" +
    "\026\033\027\006\030\043\036\014\051\056\064\046\065" +
    "\125\066\055\067\054\070\022\001\002\000\004\053\355" +
    "\001\002\000\034\004\040\005\067\006\127\026\033\027" +
    "\006\030\043\036\014\051\056\064\046\065\125\066\055" +
    "\067\054\070\022\001\002\000\004\055\357\001\002\000" +
    "\032\004\040\005\067\026\033\027\006\030\043\036\014" +
    "\051\056\064\046\065\125\066\055\067\054\070\022\001" +
    "\002\000\004\052\361\001\002\000\004\046\362\001\002" +
    "\000\076\003\042\004\040\005\067\010\062\011\012\012" +
    "\053\015\035\016\031\020\066\021\020\023\071\024\034" +
    "\025\060\026\033\027\006\030\043\036\014\037\047\047" +
    "\uffff\051\056\064\046\065\061\066\055\067\054\070\022" +
    "\071\011\072\026\073\004\074\063\075\052\001\002\000" +
    "\004\047\364\001\002\000\104\002\uffed\003\uffed\004\uffed" +
    "\005\uffed\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\036\uffed\037\uffed\047\uffed\051" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed" +
    "\072\uffed\073\uffed\074\uffed\075\uffed\001\002\000\004\055" +
    "\366\001\002\000\032\004\040\005\067\026\033\027\006" +
    "\030\043\036\014\051\056\064\046\065\125\066\055\067" +
    "\054\070\022\001\002\000\004\052\370\001\002\000\004" +
    "\046\371\001\002\000\076\003\042\004\040\005\067\010" +
    "\062\011\012\012\053\015\035\016\031\020\066\021\020" +
    "\023\071\024\034\025\060\026\033\027\006\030\043\036" +
    "\014\037\047\047\uffff\051\056\064\046\065\061\066\055" +
    "\067\054\070\022\071\011\072\026\073\004\074\063\075" +
    "\052\001\002\000\004\047\373\001\002\000\104\002\uffec" +
    "\003\uffec\004\uffec\005\uffec\010\uffec\011\uffec\012\uffec\014" +
    "\uffec\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\036\uffec\037" +
    "\uffec\047\uffec\051\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\001" +
    "\002\000\004\053\227\001\002\000\056\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\064\002\004\003\007\004\035\005\044\006" +
    "\067\007\036\010\026\011\040\012\022\013\064\014\063" +
    "\015\056\016\047\017\006\020\043\022\031\023\027\024" +
    "\024\025\023\026\020\027\016\030\015\031\014\032\012" +
    "\045\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\346\030\015\031\014\032\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\252\001\001\000\004\045" +
    "\247\001\001\000\030\021\237\022\127\023\027\024\024" +
    "\025\023\026\020\027\016\030\015\031\014\032\012\033" +
    "\130\001\001\000\064\002\236\003\007\004\035\005\044" +
    "\006\067\007\036\010\026\011\040\012\022\013\064\014" +
    "\063\015\056\016\047\017\006\020\043\022\031\023\027" +
    "\024\024\025\023\026\020\027\016\030\015\031\014\032" +
    "\012\045\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\022\170\023\027\024\024\025" +
    "\023\026\020\027\016\030\015\031\014\032\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\021\125\022\127\023\027\024\024\025\023\026\020" +
    "\027\016\030\015\031\014\032\012\033\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\073\017\006\044\075" +
    "\045\050\001\001\000\012\006\073\017\006\044\077\045" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\103\045\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\002\106\003\007\004\035\005" +
    "\044\006\067\007\036\010\026\011\040\012\022\013\064" +
    "\014\063\015\056\016\047\017\006\020\043\022\031\023" +
    "\027\024\024\025\023\026\020\027\016\030\015\031\014" +
    "\032\012\045\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\113\001\001\000\004" +
    "\045\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\117\001\001\000\002\001\001" +
    "\000\004\043\121\001\001\000\002\001\001\000\004\043" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\022\132\023\027\024\024\025\023\026\020" +
    "\027\016\030\015\031\014\032\012\033\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\022\135\023\027" +
    "\024\024\025\023\026\020\027\016\030\015\031\014\032" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\022\140\023\027\024\024\025\023\026\020\027\016\030" +
    "\015\031\014\032\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\002\143\003\007\004\035\005\044\006" +
    "\067\007\036\010\026\011\040\012\022\013\064\014\063" +
    "\015\056\016\047\017\006\020\043\022\031\023\027\024" +
    "\024\025\023\026\020\027\016\030\015\031\014\032\012" +
    "\045\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\022\150\023\027\024\024\025\023\026\020\027\016" +
    "\030\015\031\014\032\012\035\146\036\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\022\150\023\027\024\024\025\023\026\020\027\016\030" +
    "\015\031\014\032\012\036\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\160\001\001\000\004\040\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\022\174\023\027\024\024" +
    "\025\023\026\020\027\016\030\015\031\014\032\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\201" +
    "\001\001\000\002\001\001\000\004\034\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\002\213" +
    "\003\007\004\035\005\044\006\067\007\036\010\026\011" +
    "\040\012\022\013\064\014\063\015\056\016\047\017\006" +
    "\020\043\022\031\023\027\024\024\025\023\026\020\027" +
    "\016\030\015\031\014\032\012\045\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\216\001\001\000" +
    "\002\001\001\000\064\002\220\003\007\004\035\005\044" +
    "\006\067\007\036\010\026\011\040\012\022\013\064\014" +
    "\063\015\056\016\047\017\006\020\043\022\031\023\027" +
    "\024\024\025\023\026\020\027\016\030\015\031\014\032" +
    "\012\045\050\001\001\000\002\001\001\000\004\045\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\021\227\022\127\023\027" +
    "\024\024\025\023\026\020\027\016\030\015\031\014\032" +
    "\012\033\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\002\241\003\007\004\035\005\044\006" +
    "\067\007\036\010\026\011\040\012\022\013\064\014\063" +
    "\015\056\016\047\017\006\020\043\022\031\023\027\024" +
    "\024\025\023\026\020\027\016\030\015\031\014\032\012" +
    "\045\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\002\245\003\007\004\035\005\044" +
    "\006\067\007\036\010\026\011\040\012\022\013\064\014" +
    "\063\015\056\016\047\017\006\020\043\022\031\023\027" +
    "\024\024\025\023\026\020\027\016\030\015\031\014\032" +
    "\012\045\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\021\254\022\127\023\027\024\024" +
    "\025\023\026\020\027\016\030\015\031\014\032\012\033" +
    "\130\001\001\000\002\001\001\000\004\045\256\001\001" +
    "\000\002\001\001\000\030\021\260\022\127\023\027\024" +
    "\024\025\023\026\020\027\016\030\015\031\014\032\012" +
    "\033\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\022\150\023\027\024\024\025\023\026\020\027\016\030" +
    "\015\031\014\032\012\035\266\036\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\022" +
    "\272\023\027\024\024\025\023\026\020\027\016\030\015" +
    "\031\014\032\012\001\001\000\002\001\001\000\022\023" +
    "\274\024\024\025\023\026\020\027\016\030\015\031\014" +
    "\032\012\001\001\000\002\001\001\000\014\026\324\027" +
    "\016\030\015\031\014\032\012\001\001\000\016\025\323" +
    "\026\020\027\016\030\015\031\014\032\012\001\001\000" +
    "\016\025\322\026\020\027\016\030\015\031\014\032\012" +
    "\001\001\000\016\025\321\026\020\027\016\030\015\031" +
    "\014\032\012\001\001\000\014\026\310\027\016\030\015" +
    "\031\014\032\012\001\001\000\016\025\307\026\020\027" +
    "\016\030\015\031\014\032\012\001\001\000\016\025\306" +
    "\026\020\027\016\030\015\031\014\032\012\001\001\000" +
    "\016\025\305\026\020\027\016\030\015\031\014\032\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\320\030\015\031\014" +
    "\032\012\001\001\000\012\027\317\030\015\031\014\032" +
    "\012\001\001\000\012\027\316\030\015\031\014\032\012" +
    "\001\001\000\012\027\315\030\015\031\014\032\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\330\045\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\002\333\003\007\004\035" +
    "\005\044\006\067\007\036\010\026\011\040\012\022\013" +
    "\064\014\063\015\056\016\047\017\006\020\043\022\031" +
    "\023\027\024\024\025\023\026\020\027\016\030\015\031" +
    "\014\032\012\045\050\001\001\000\002\001\001\000\030" +
    "\021\335\022\127\023\027\024\024\025\023\026\020\027" +
    "\016\030\015\031\014\032\012\033\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\022\342\023\027\024\024\025\023\026\020" +
    "\027\016\030\015\031\014\032\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\351\017\352\022\353\023" +
    "\027\024\024\025\023\026\020\027\016\030\015\031\014" +
    "\032\012\045\350\001\001\000\002\001\001\000\024\022" +
    "\364\023\027\024\024\025\023\026\020\027\016\030\015" +
    "\031\014\032\012\001\001\000\024\022\355\023\027\024" +
    "\024\025\023\026\020\027\016\030\015\031\014\032\012" +
    "\001\001\000\002\001\001\000\030\021\254\022\127\023" +
    "\027\024\024\025\023\026\020\027\016\030\015\031\014" +
    "\032\012\033\130\001\001\000\002\001\001\000\024\022" +
    "\357\023\027\024\024\025\023\026\020\027\016\030\015" +
    "\031\014\032\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\002\362\003\007\004\035\005\044\006\067" +
    "\007\036\010\026\011\040\012\022\013\064\014\063\015" +
    "\056\016\047\017\006\020\043\022\031\023\027\024\024" +
    "\025\023\026\020\027\016\030\015\031\014\032\012\045" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\022\366\023\027\024\024\025\023\026" +
    "\020\027\016\030\015\031\014\032\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\002\371\003\007\004" +
    "\035\005\044\006\067\007\036\010\026\011\040\012\022" +
    "\013\064\014\063\015\056\016\047\017\006\020\043\022" +
    "\031\023\027\024\024\025\023\026\020\027\016\030\015" +
    "\031\014\032\012\045\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();
   public static int numErrores = 0;

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              P RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		P prog = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 prog.anadeIns(ins);
	   RESULT = prog; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		P start_val = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              P RESULT =null;
		 RESULT = as.programa(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= InsCond 
            {
              Ins RESULT =null;
		Ins valorInsCond = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsCond; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsBucle 
            {
              Ins RESULT =null;
		Ins valorInsBucle = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsBucle; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsDec 
            {
              Ins RESULT =null;
		Ins valorInsDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsDec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsAsig 
            {
              Ins RESULT =null;
		Ins valorInsAsig = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsAsig; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsCall 
            {
              Ins RESULT =null;
		Ins valorInsCall = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsCall; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsSwitch 
            {
              Ins RESULT =null;
		Ins valorInsSwitch = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsSwitch; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsFun 
            {
              Ins RESULT =null;
		Ins valorInsFun = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsFun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsProc 
            {
              Ins RESULT =null;
		Ins valorInsProc = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsProc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsStruct 
            {
              Ins RESULT =null;
		Ins valorInsStruct = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsStruct; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsEnum 
            {
              Ins RESULT =null;
		Ins valorInsEnum = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsEnum; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= InsTypeDef 
            {
              Ins RESULT =null;
		Ins valorInsTypeDef = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsTypeDef; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inst ::= InsNew 
            {
              Ins RESULT =null;
		Ins valorInsNew = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsNew; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Inst ::= error PUNTOYCOMA 
            {
              Ins RESULT =null;
		 numErrores += 1; RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsNew ::= Exp0 IGUAL NEW Tipo PAP Exp PCIERRE PUNTOYCOMA 
            {
              Ins RESULT =null;
		E var = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E valor = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insNew(tipo, var, valor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsNew",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InsCond ::= IF Exp LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insIfSinElse(cond, insIf); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InsCond ::= IF Exp LLAVESAP P LLAVESCIERRE ELSE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		P insElse = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insIfConElse(cond, insIf, insElse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InsBucle ::= WHILE Exp LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		P ins = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insWhile(cond, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InsBucle ::= FOR PAP InsDecConValorIni Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		Ins insDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insDec, cond, paso, inst); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InsBucle ::= FOR PAP InsAsig Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		Ins insAsig = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insAsig, cond, paso, inst); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InsDec ::= InsDecConValorIni 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = ins; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InsDec ::= Tipo IDEN PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.insDec(tipo, as.iden(lexDeIden, true), false, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InsDecConValorIni ::= Tipo IDEN IGUAL Exp PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.insDec(tipo, as.iden(lexDeIden, true), true, valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDecConValorIni",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= INT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoInt(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= BOOL 
            {
              Tipos RESULT =null;
		RESULT = as.tipoBool(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= CHAR 
            {
              Tipos RESULT =null;
		RESULT = as.tipoChar(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= FLOAT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoFloat(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Tipos RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.tipoVector(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= IDEN 
            {
              Tipos RESULT =null;
		String lexIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.tipoUsuario(lexIden); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tipo ::= MENOR Tipo MAYOR MUL 
            {
              Tipos RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.tipoPuntero(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InsAsig ::= Exp0 IGUAL Exp PUNTOYCOMA 
            {
              Ins RESULT =null;
		E var = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insAsig(var, valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InsCall ::= CALL IDEN PAP ListaArg PCIERRE PUNTOYCOMA 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insCall(as.iden(lexDeIden, true), lista); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaArg ::= ListaArg1 
            {
              List<E> RESULT =null;
		List<E> valorExp = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListaArg ::= 
            {
              List<E> RESULT =null;
		 RESULT = new ArrayList<E>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListaArg1 ::= Exp0 COMA ListaArg1 
            {
              List<E> RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, elem);
	   RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListaArg1 ::= Exp0 
            {
              List<E> RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<E> args = new ArrayList<E>();
	   args.add(elem);
	   RESULT = args; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InsSwitch ::= SWITCH PAP Exp0 PCIERRE LLAVESAP ListaCase LLAVESCIERRE 
            {
              Ins RESULT =null;
		E var = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Case> lista = (List<Case>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insSwitch(var, lista); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsSwitch",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ListaCase ::= CASE TiposSwitch DOSPUNTOS P BREAK PUNTOYCOMA ListaCase 
            {
              List<Case> RESULT =null;
		E var = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Case> lista = (List<Case>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(0, as.createCase(var, instr));
       RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ListaCase ::= DEFAULT DOSPUNTOS P 
            {
              List<Case> RESULT =null;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Case> lista = new ArrayList<Case>();
	 	lista.add(0, as.createCase(as.iden("default", true), instr));
	 	RESULT = lista;
	 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TiposSwitch ::= ENT 
            {
              E RESULT =null;
		String lexDeEnt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TiposSwitch ::= REAL 
            {
              E RESULT =null;
		String lexDeReal = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TiposSwitch ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.verdadero(false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TiposSwitch ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.falso(false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TiposSwitch ::= CARACTER 
            {
              E RESULT =null;
		String lexDeCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TiposSwitch ::= IDEN 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.iden(lexDeIden, true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InsFun ::= FUN Tipo IDEN PAP Parametros PCIERRE LLAVESAP P RETURN Exp PUNTOYCOMA LLAVESCIERRE 
            {
              Ins RESULT =null;
		Tipos tipoReturn = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E valorReturn = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insFun(tipoReturn, as.iden(lexDeIden, true), params, instr, valorReturn); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Parametros ::= Tipo AMPERSAND IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.REFERENCIA, as.iden(lexDeIden, true)));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Parametros ::= Tipo IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.VALOR, as.iden(lexDeIden, true)));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Parametros ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ParamElige ::= COMA Tipo AMPERSAND IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.REFERENCIA, as.iden(lexDeIden, true)));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.VALOR, as.iden(lexDeIden, true)));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ParamElige ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InsProc ::= PROC IDEN PAP Parametros PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insProc(as.iden(lexDeIden, true), params, instr); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Ins> listaDec = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insStruct(as.iden(lexDeIden, true), listaDec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LDec ::= InsDec LDec 
            {
              List<Ins> RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Ins> listaDec = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 listaDec.add(0,ins);
	   RESULT = listaDec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LDec ::= 
            {
              List<Ins> RESULT =null;
		RESULT = new ArrayList<Ins>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<E> listaCtes = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insEnum(as.iden(lexDeIden, true), listaCtes); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LEnum ::= IDEN LEnumElige 
            {
              List<E> RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> listaCtes = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 listaCtes.add(0, as.iden(lexDeIden, true));
	   RESULT = listaCtes; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LEnum ::= 
            {
              List<E> RESULT =null;
		 RESULT = new ArrayList<E>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              List<E> RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> listaCtes = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 listaCtes.add(0, as.iden(lexDeIden, true));
	   RESULT = listaCtes; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LEnumElige ::= 
            {
              List<E> RESULT =null;
		 RESULT = new ArrayList<E>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insTypeDef(tipo, as.iden(lexDeIden, true)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp ::= Exp0 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT= valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp ::= CreaVector 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp0 ::= Exp1 OR Exp0 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.or(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.and(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.igualIgual(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayor(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp2 ::= Exp3 MENOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menor(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayorIgual(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menorIgual(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.distinto(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp3 ::= Exp3 SUMA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.suma(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp3 ::= Exp3 RESTA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.resta(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp4 ::= Exp4 MUL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mul(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divEnt(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divReal(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp4 ::= Exp4 MODULO Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.modulo(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp5 ::= NOT Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(valorExp, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.corchetes(valorExp1, valorExp2, true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.punto(valorExp, as.iden(lexDeIden, true), true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.size(valorExp, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp7 ::= RESTA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.restaUnaria(valorExp, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp7 ::= SUMA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.sumaUnaria(valorExp, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp7 ::= MUL Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.accesoPuntero(valorExp, true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp7 ::= Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp8 ::= ENT 
            {
              E RESULT =null;
		String lexDeEnt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp8 ::= REAL 
            {
              E RESULT =null;
		String lexDeReal = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp8 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.verdadero(false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp8 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.falso(false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp8 ::= NULL 
            {
              E RESULT =null;
		 RESULT = as.nulo(false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp8 ::= CARACTER 
            {
              E RESULT =null;
		String lexDeCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Exp8 ::= IDEN PAP ListaArg PCIERRE 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.llamadaFun(as.iden(lexDeIden, true), lista, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Exp8 ::= IDEN 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.iden(lexDeIden, true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Exp8 ::= PAP error PCIERRE 
            {
              E RESULT =null;
		 numErrores += 1; RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2, false); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

