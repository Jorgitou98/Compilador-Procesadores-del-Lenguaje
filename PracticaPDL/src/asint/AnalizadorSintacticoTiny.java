
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 11 18:52:00 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.E;
import ast.AS;
import ast.Ins;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 11 18:52:00 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\003\000\002\002\004\000\002\061" +
    "\002\000\002\062\002\000\002\057\006\000\002\057\002" +
    "\000\002\063\002\000\002\060\005\000\002\060\002\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\003\004\000\002\004\004\000" +
    "\002\004\004\000\002\031\006\000\002\031\005\000\002" +
    "\031\002\000\002\005\005\000\002\006\003\000\002\006" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\006\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\006\000\002\064\002\000\002\065" +
    "\002\000\002\055\012\000\002\056\006\000\002\056\002" +
    "\000\002\011\007\000\002\011\014\000\002\035\003\000" +
    "\002\035\003\000\002\032\012\000\002\033\011\000\002" +
    "\033\005\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\012\005\000\002\013\016\000\002\014\005\000" +
    "\002\014\002\000\002\015\006\000\002\015\002\000\002" +
    "\016\012\000\002\017\010\000\002\020\004\000\002\020" +
    "\002\000\002\021\005\000\002\021\002\000\002\022\007" +
    "\000\002\030\004\000\002\030\002\000\002\023\011\000" +
    "\002\024\004\000\002\024\002\000\002\025\005\000\002" +
    "\025\002\000\002\026\006\000\002\036\003\000\002\036" +
    "\003\000\002\037\005\000\002\037\003\000\002\040\005" +
    "\000\002\040\003\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\003\000\002\042\005\000\002\042" +
    "\005\000\002\042\003\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\003\000" +
    "\002\044\004\000\002\044\003\000\002\045\006\000\002" +
    "\045\005\000\002\045\005\000\002\045\003\000\002\046" +
    "\004\000\002\046\004\000\002\046\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\066\002\000\002\047\005\000\002" +
    "\047\005\000\002\067\002\000\002\053\006\000\002\053" +
    "\002\000\002\051\003\000\002\051\002\000\002\070\002" +
    "\000\002\052\006\000\002\052\003\000\002\050\010\000" +
    "\002\050\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\022\006\001\002\000\004\002\u0102\001" +
    "\002\000\004\002\001\001\002\000\030\007\012\010\023" +
    "\013\027\033\007\034\034\043\010\056\022\067\011\070" +
    "\033\071\031\072\013\001\002\000\020\007\012\010\023" +
    "\056\022\067\011\070\033\071\031\072\013\001\002\000" +
    "\026\007\012\010\023\033\007\034\034\043\010\056\022" +
    "\067\011\070\033\071\031\072\013\001\002\000\056\033" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\042\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051" +
    "\uff8f\052\uff8f\053\uff8f\056\uff8f\057\uff8f\061\uff8f\062\uff8f" +
    "\063\uff8f\064\uff8f\001\002\000\054\033\uff92\034\uff92\035" +
    "\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\044\uff92" +
    "\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053" +
    "\uff92\057\uff92\061\uff92\062\uff92\063\uff92\064\uff92\001\002" +
    "\000\054\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\057\uff90\061\uff90\062" +
    "\uff90\063\uff90\064\uff90\001\002\000\054\033\uff95\034\uff95" +
    "\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\057\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001" +
    "\002\000\054\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\044\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\057\uff98\061\uff98" +
    "\062\uff98\063\uff98\064\uff98\001\002\000\054\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\360\053\uff9c\057\uff9c\061\uff9c\062\uff9c\063\357\064\uff9c" +
    "\001\002\000\004\053\uffd9\001\002\000\050\033\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053" +
    "\uff9e\057\uff9e\061\uff9e\062\uff9e\064\uff9e\001\002\000\050" +
    "\033\uffa3\034\uffa3\035\071\036\067\037\072\040\070\041" +
    "\uffa3\042\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\053\uffa3\057\uffa3\061\uffa3\062\uffa3\064\uffa3\001" +
    "\002\000\026\007\012\010\023\033\007\034\034\043\010" +
    "\056\022\067\011\070\033\071\031\072\013\001\002\000" +
    "\054\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\057\uff91\061\uff91\062\uff91" +
    "\063\uff91\064\uff91\001\002\000\040\033\057\034\054\041" +
    "\uffa6\042\uffa6\044\061\045\062\046\053\047\055\050\056" +
    "\051\060\053\uffa6\057\uffa6\061\uffa6\062\uffa6\064\uffa6\001" +
    "\002\000\020\041\051\042\uffad\053\uffad\057\uffad\061\uffad" +
    "\062\uffad\064\uffad\001\002\000\016\042\047\053\uffaf\057" +
    "\uffaf\061\uffaf\062\uffaf\064\uffaf\001\002\000\004\056\036" +
    "\001\002\000\006\053\uffb2\062\uffb2\001\002\000\054\033" +
    "\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93" +
    "\042\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\057\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\001\002\000\006\053\uffb1\062\uffb1\001\002\000" +
    "\054\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\057\uff94\061\uff94\062\uff94" +
    "\063\uff94\064\uff94\001\002\000\020\007\012\010\023\056" +
    "\022\067\011\070\033\071\031\072\013\001\002\000\054" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97" +
    "\051\uff97\052\uff97\053\uff97\057\uff97\061\uff97\062\uff97\063" +
    "\uff97\064\uff97\001\002\000\030\007\012\010\023\013\027" +
    "\033\007\034\034\043\010\056\022\067\011\070\033\071" +
    "\031\072\013\001\002\000\004\061\044\001\002\000\004" +
    "\061\041\001\002\000\026\007\012\010\023\033\007\034" +
    "\034\043\010\056\022\067\011\070\033\071\031\072\013" +
    "\001\002\000\004\057\043\001\002\000\010\053\uff84\061" +
    "\uff84\062\uff84\001\002\000\026\007\012\010\023\033\007" +
    "\034\034\043\010\056\022\067\011\070\033\071\031\072" +
    "\013\001\002\000\004\057\046\001\002\000\010\053\uff83" +
    "\061\uff83\062\uff83\001\002\000\026\007\012\010\023\033" +
    "\007\034\034\043\010\056\022\067\011\070\033\071\031" +
    "\072\013\001\002\000\014\053\uffb0\057\uffb0\061\uffb0\062" +
    "\uffb0\064\uffb0\001\002\000\026\007\012\010\023\033\007" +
    "\034\034\043\010\056\022\067\011\070\033\071\031\072" +
    "\013\001\002\000\016\042\uffae\053\uffae\057\uffae\061\uffae" +
    "\062\uffae\064\uffae\001\002\000\026\007\012\010\023\033" +
    "\007\034\034\043\010\056\022\067\011\070\033\071\031" +
    "\072\013\001\002\000\026\007\012\010\023\033\007\034" +
    "\034\043\010\056\022\067\011\070\033\071\031\072\013" +
    "\001\002\000\026\007\012\010\023\033\007\034\034\043" +
    "\010\056\022\067\011\070\033\071\031\072\013\001\002" +
    "\000\026\007\012\010\023\033\007\034\034\043\010\056" +
    "\022\067\011\070\033\071\031\072\013\001\002\000\026" +
    "\007\012\010\023\033\007\034\034\043\010\056\022\067" +
    "\011\070\033\071\031\072\013\001\002\000\026\007\012" +
    "\010\023\033\007\034\034\043\010\056\022\067\011\070" +
    "\033\071\031\072\013\001\002\000\026\007\012\010\023" +
    "\033\007\034\034\043\010\056\022\067\011\070\033\071" +
    "\031\072\013\001\002\000\026\007\012\010\023\033\007" +
    "\034\034\043\010\056\022\067\011\070\033\071\031\072" +
    "\013\001\002\000\024\033\057\034\054\041\uffab\042\uffab" +
    "\053\uffab\057\uffab\061\uffab\062\uffab\064\uffab\001\002\000" +
    "\024\033\057\034\054\041\uffaa\042\uffaa\053\uffaa\057\uffaa" +
    "\061\uffaa\062\uffaa\064\uffaa\001\002\000\024\033\057\034" +
    "\054\041\uffa7\042\uffa7\053\uffa7\057\uffa7\061\uffa7\062\uffa7" +
    "\064\uffa7\001\002\000\050\033\uffa5\034\uffa5\035\071\036" +
    "\067\037\072\040\070\041\uffa5\042\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\051\uffa5\053\uffa5\057\uffa5\061" +
    "\uffa5\062\uffa5\064\uffa5\001\002\000\026\007\012\010\023" +
    "\033\007\034\034\043\010\056\022\067\011\070\033\071" +
    "\031\072\013\001\002\000\026\007\012\010\023\033\007" +
    "\034\034\043\010\056\022\067\011\070\033\071\031\072" +
    "\013\001\002\000\026\007\012\010\023\033\007\034\034" +
    "\043\010\056\022\067\011\070\033\071\031\072\013\001" +
    "\002\000\026\007\012\010\023\033\007\034\034\043\010" +
    "\056\022\067\011\070\033\071\031\072\013\001\002\000" +
    "\050\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\053\uffa1\057\uffa1\061\uffa1\062\uffa1\064\uffa1" +
    "\001\002\000\050\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\053\uffa2\057\uffa2\061\uffa2\062" +
    "\uffa2\064\uffa2\001\002\000\050\033\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\053\uff9f\057\uff9f" +
    "\061\uff9f\062\uff9f\064\uff9f\001\002\000\050\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\053" +
    "\uffa0\057\uffa0\061\uffa0\062\uffa0\064\uffa0\001\002\000\024" +
    "\033\057\034\054\041\uffac\042\uffac\053\uffac\057\uffac\061" +
    "\uffac\062\uffac\064\uffac\001\002\000\024\033\057\034\054" +
    "\041\uffa9\042\uffa9\053\uffa9\057\uffa9\061\uffa9\062\uffa9\064" +
    "\uffa9\001\002\000\050\033\uffa4\034\uffa4\035\071\036\067" +
    "\037\072\040\070\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\053\uffa4\057\uffa4\061\uffa4" +
    "\062\uffa4\064\uffa4\001\002\000\024\033\057\034\054\041" +
    "\uffa8\042\uffa8\053\uffa8\057\uffa8\061\uffa8\062\uffa8\064\uffa8" +
    "\001\002\000\004\057\104\001\002\000\054\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\057\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\001\002\000\004\053\106\001\002\000\044\004\uffff\005" +
    "\uffff\006\uffff\011\uffff\012\uffff\015\uffff\016\uffff\017\uffff" +
    "\022\uffff\023\uffff\025\uffff\026\uffff\030\uffff\031\uffff\032" +
    "\uffff\054\ufffc\067\uffff\001\002\000\042\004\121\005\145" +
    "\006\122\011\135\012\136\015\125\016\147\017\127\022" +
    "\006\023\123\025\144\026\152\030\120\031\141\032\143" +
    "\067\126\001\002\000\004\054\uffd8\001\002\000\004\054" +
    "\112\001\002\000\054\002\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\011\uffd5\012\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\113\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\054\uffd5\067\uffd5\001\002\000\004\053" +
    "\115\001\002\000\052\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\011\uffd7\012\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\054\uffd7\067\uffd7\001\002\000\044\004\uffff\005" +
    "\uffff\006\uffff\011\uffff\012\uffff\015\uffff\016\uffff\017\uffff" +
    "\022\uffff\023\uffff\025\uffff\026\uffff\030\uffff\031\uffff\032" +
    "\uffff\054\ufffc\067\uffff\001\002\000\004\054\117\001\002" +
    "\000\052\002\uffd6\004\uffd6\005\uffd6\006\uffd6\011\uffd6\012" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\054" +
    "\uffd6\067\uffd6\001\002\000\004\067\351\001\002\000\004" +
    "\067\uffde\001\002\000\004\067\uffdc\001\002\000\004\067" +
    "\337\001\002\000\050\004\ufff1\005\ufff1\006\ufff1\011\ufff1" +
    "\012\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\054\ufff1\067\ufff1\001\002\000\030\007\012\010\023\013" +
    "\027\033\007\034\034\043\010\056\022\067\011\070\033" +
    "\071\031\072\013\001\002\000\012\052\270\060\uffe8\063" +
    "\267\067\325\001\002\000\004\056\265\001\002\000\050" +
    "\004\ufff0\005\ufff0\006\ufff0\011\ufff0\012\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\054\ufff0\067\ufff0\001" +
    "\002\000\050\004\ufff5\005\ufff5\006\ufff5\011\ufff5\012\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\054\ufff5" +
    "\067\ufff5\001\002\000\050\004\ufffe\005\ufffe\006\ufffe\011" +
    "\ufffe\012\ufffe\015\ufffe\016\ufffe\017\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\054\ufffe\067\ufffe\001\002\000\050\004\ufff2\005\ufff2" +
    "\006\ufff2\011\ufff2\012\ufff2\015\ufff2\016\ufff2\017\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\054\ufff2\067\ufff2\001\002\000\050\004" +
    "\ufff8\005\ufff8\006\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\054\ufff8\067\ufff8\001\002" +
    "\000\004\067\uffdb\001\002\000\004\044\255\001\002\000" +
    "\050\004\uffef\005\uffef\006\uffef\011\uffef\012\uffef\015\uffef" +
    "\016\uffef\017\uffef\021\uffef\022\uffef\023\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\054\uffef\067\uffef" +
    "\001\002\000\050\004\ufff7\005\ufff7\006\ufff7\011\ufff7\012" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\054" +
    "\ufff7\067\ufff7\001\002\000\016\004\162\005\156\006\160" +
    "\011\161\012\154\067\157\001\002\000\004\067\244\001" +
    "\002\000\004\067\231\001\002\000\004\067\222\001\002" +
    "\000\004\067\uffdd\001\002\000\050\004\uffee\005\uffee\006" +
    "\uffee\011\uffee\012\uffee\015\uffee\016\uffee\017\uffee\021\uffee" +
    "\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\054\uffee\067\uffee\001\002\000\004\056\207" +
    "\001\002\000\050\004\ufff3\005\ufff3\006\ufff3\011\ufff3\012" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\054" +
    "\ufff3\067\ufff3\001\002\000\050\004\ufff4\005\ufff4\006\ufff4" +
    "\011\ufff4\012\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\054\ufff4\067\ufff4\001\002\000\016\004\162\005" +
    "\156\006\160\011\161\012\154\067\157\001\002\000\050" +
    "\004\ufff6\005\ufff6\006\ufff6\011\ufff6\012\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\054\ufff6\067\ufff6\001" +
    "\002\000\004\044\204\001\002\000\004\067\163\001\002" +
    "\000\006\045\uffe3\067\uffe3\001\002\000\006\045\uffdf\067" +
    "\uffdf\001\002\000\006\045\uffe2\067\uffe2\001\002\000\006" +
    "\045\uffe1\067\uffe1\001\002\000\006\045\uffe4\067\uffe4\001" +
    "\002\000\004\056\164\001\002\000\020\004\162\005\156" +
    "\006\160\011\161\012\154\057\uffc4\067\157\001\002\000" +
    "\004\067\176\001\002\000\004\057\167\001\002\000\004" +
    "\053\170\001\002\000\044\004\uffff\005\uffff\006\uffff\011" +
    "\uffff\012\uffff\015\uffff\016\uffff\017\uffff\022\uffff\023\uffff" +
    "\025\uffff\026\uffff\027\ufffc\030\uffff\031\uffff\032\uffff\067" +
    "\uffff\001\002\000\004\027\172\001\002\000\030\007\012" +
    "\010\023\013\027\033\007\034\034\043\010\056\022\067" +
    "\011\070\033\071\031\072\013\001\002\000\004\062\174" +
    "\001\002\000\004\054\175\001\002\000\050\004\uffc6\005" +
    "\uffc6\006\uffc6\011\uffc6\012\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\054\uffc6\067\uffc6\001\002\000\006" +
    "\057\uffc2\061\177\001\002\000\016\004\162\005\156\006" +
    "\160\011\161\012\154\067\157\001\002\000\004\057\uffc5" +
    "\001\002\000\004\067\202\001\002\000\006\057\uffc2\061" +
    "\177\001\002\000\004\057\uffc3\001\002\000\016\004\162" +
    "\005\156\006\160\011\161\012\154\067\157\001\002\000" +
    "\004\045\206\001\002\000\006\045\uffe0\067\uffe0\001\002" +
    "\000\016\004\121\005\145\006\122\011\135\012\136\067" +
    "\126\001\002\000\026\007\012\010\023\033\007\034\034" +
    "\043\010\056\022\067\011\070\033\071\031\072\013\001" +
    "\002\000\026\007\uffd2\010\uffd2\033\uffd2\034\uffd2\043\uffd2" +
    "\056\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\001\002\000" +
    "\026\007\uffd1\010\uffd1\033\uffd1\034\uffd1\043\uffd1\056\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\072\uffd1\001\002\000\004\062" +
    "\214\001\002\000\026\007\012\010\023\033\007\034\034" +
    "\043\010\056\022\067\011\070\033\071\031\072\013\001" +
    "\002\000\004\057\216\001\002\000\004\053\217\001\002" +
    "\000\044\004\uffff\005\uffff\006\uffff\011\uffff\012\uffff\015" +
    "\uffff\016\uffff\017\uffff\022\uffff\023\uffff\025\uffff\026\uffff" +
    "\030\uffff\031\uffff\032\uffff\054\ufffc\067\uffff\001\002\000" +
    "\004\054\221\001\002\000\050\004\uffd3\005\uffd3\006\uffd3" +
    "\011\uffd3\012\uffd3\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\054\uffd3\067\uffd3\001\002\000\004\056\223\001" +
    "\002\000\020\004\162\005\156\006\160\011\161\012\154" +
    "\057\uffc4\067\157\001\002\000\004\057\225\001\002\000" +
    "\004\053\226\001\002\000\044\004\uffff\005\uffff\006\uffff" +
    "\011\uffff\012\uffff\015\uffff\016\uffff\017\uffff\022\uffff\023" +
    "\uffff\025\uffff\026\uffff\030\uffff\031\uffff\032\uffff\054\ufffc" +
    "\067\uffff\001\002\000\004\054\230\001\002\000\050\004" +
    "\uffc1\005\uffc1\006\uffc1\011\uffc1\012\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\054\uffc1\067\uffc1\001\002" +
    "\000\004\060\232\001\002\000\004\053\233\001\002\000" +
    "\006\054\uffb6\067\234\001\002\000\006\054\uffb4\055\240" +
    "\001\002\000\004\054\236\001\002\000\004\062\237\001" +
    "\002\000\050\004\uffb8\005\uffb8\006\uffb8\011\uffb8\012\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\054\uffb8" +
    "\067\uffb8\001\002\000\004\067\242\001\002\000\004\054" +
    "\uffb7\001\002\000\006\054\uffb4\055\240\001\002\000\004" +
    "\054\uffb5\001\002\000\006\060\247\062\245\001\002\000" +
    "\072\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\043\uffe6\054\uffe6\056\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\001\002\000\072\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\043" +
    "\uffe7\054\uffe7\056\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7" +
    "\001\002\000\030\007\012\010\023\013\027\033\007\034" +
    "\034\043\010\056\022\067\011\070\033\071\031\072\013" +
    "\001\002\000\004\062\251\001\002\000\072\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\043\uffe5\054\uffe5\056\uffe5\067\uffe5\070\uffe5\071\uffe5\072" +
    "\uffe5\001\002\000\004\067\253\001\002\000\004\062\254" +
    "\001\002\000\050\004\uffb3\005\uffb3\006\uffb3\011\uffb3\012" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\054" +
    "\uffb3\067\uffb3\001\002\000\016\004\162\005\156\006\160" +
    "\011\161\012\154\067\157\001\002\000\004\045\257\001" +
    "\002\000\004\067\uffda\001\002\000\050\004\121\005\145" +
    "\006\122\011\135\012\136\015\125\016\147\017\127\021" +
    "\ufff9\022\006\023\123\025\144\026\152\027\ufff9\030\120" +
    "\031\141\032\143\054\ufff9\067\126\001\002\000\010\021" +
    "\ufffd\027\ufffd\054\ufffd\001\002\000\050\004\ufffb\005\ufffb" +
    "\006\ufffb\011\ufffb\012\ufffb\015\ufffb\016\ufffb\017\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\054\ufffb\067\ufffb\001\002\000\050\004" +
    "\121\005\145\006\122\011\135\012\136\015\125\016\147" +
    "\017\127\021\ufff9\022\006\023\123\025\144\026\152\027" +
    "\ufff9\030\120\031\141\032\143\054\ufff9\067\126\001\002" +
    "\000\010\021\ufffa\027\ufffa\054\ufffa\001\002\000\004\067" +
    "\266\001\002\000\010\052\270\057\uffe8\063\267\001\002" +
    "\000\026\007\012\010\023\033\007\034\034\043\010\056" +
    "\022\067\011\070\033\071\031\072\013\001\002\000\004" +
    "\067\316\001\002\000\004\057\272\001\002\000\004\053" +
    "\273\001\002\000\006\020\275\066\274\001\002\000\004" +
    "\065\314\001\002\000\016\007\302\010\304\067\306\070" +
    "\303\071\301\072\305\001\002\000\004\054\277\001\002" +
    "\000\050\004\uffd0\005\uffd0\006\uffd0\011\uffd0\012\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\054\uffd0\067" +
    "\uffd0\001\002\000\004\065\307\001\002\000\004\065\uffcc" +
    "\001\002\000\004\065\uffcb\001\002\000\004\065\uffcd\001" +
    "\002\000\004\065\uffca\001\002\000\004\065\uffc9\001\002" +
    "\000\004\065\uffc8\001\002\000\044\004\uffff\005\uffff\006" +
    "\uffff\011\uffff\012\uffff\015\uffff\016\uffff\017\uffff\021\ufffc" +
    "\022\uffff\023\uffff\025\uffff\026\uffff\030\uffff\031\uffff\032" +
    "\uffff\067\uffff\001\002\000\004\021\311\001\002\000\004" +
    "\062\312\001\002\000\006\020\275\066\274\001\002\000" +
    "\004\054\uffcf\001\002\000\044\004\uffff\005\uffff\006\uffff" +
    "\011\uffff\012\uffff\015\uffff\016\uffff\017\uffff\022\uffff\023" +
    "\uffff\025\uffff\026\uffff\030\uffff\031\uffff\032\uffff\054\ufffc" +
    "\067\uffff\001\002\000\004\054\uffce\001\002\000\012\052" +
    "\270\057\uffe8\060\uffe8\063\267\001\002\000\006\057\uffe9" +
    "\060\uffe9\001\002\000\004\064\321\001\002\000\012\052" +
    "\270\057\uffe8\060\uffe8\063\267\001\002\000\006\057\uffea" +
    "\060\uffea\001\002\000\004\060\327\001\002\000\072\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\023\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\043\uffed\054\uffed\056\uffed\067\uffed\070\uffed\071" +
    "\uffed\072\uffed\001\002\000\006\060\247\062\245\001\002" +
    "\000\072\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec" +
    "\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\043\uffec\054\uffec\056\uffec\067\uffec" +
    "\070\uffec\071\uffec\072\uffec\001\002\000\030\007\012\010" +
    "\023\013\027\033\007\034\034\043\010\056\022\067\011" +
    "\070\033\071\031\072\013\001\002\000\072\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\043\uffeb\054\uffeb\056\uffeb\067\uffeb\070\uffeb\071\uffeb\072" +
    "\uffeb\001\002\000\004\062\332\001\002\000\072\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\043\uffc7\054\uffc7\056\uffc7\067\uffc7\070\uffc7\071\uffc7" +
    "\072\uffc7\001\002\000\004\053\334\001\002\000\044\004" +
    "\uffff\005\uffff\006\uffff\011\uffff\012\uffff\015\uffff\016\uffff" +
    "\017\uffff\022\uffff\023\uffff\025\uffff\026\uffff\030\uffff\031" +
    "\uffff\032\uffff\054\ufffc\067\uffff\001\002\000\004\054\336" +
    "\001\002\000\050\004\uffd4\005\uffd4\006\uffd4\011\uffd4\012" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\054" +
    "\uffd4\067\uffd4\001\002\000\004\056\340\001\002\000\006" +
    "\057\uffbe\067\342\001\002\000\004\057\347\001\002\000" +
    "\006\057\uffbc\061\343\001\002\000\004\067\345\001\002" +
    "\000\004\057\uffbf\001\002\000\006\057\uffbc\061\343\001" +
    "\002\000\004\057\uffbd\001\002\000\004\062\350\001\002" +
    "\000\050\004\uffc0\005\uffc0\006\uffc0\011\uffc0\012\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\054\uffc0\067" +
    "\uffc0\001\002\000\004\053\352\001\002\000\004\054\uffb9" +
    "\001\002\000\004\054\356\001\002\000\004\054\uffb9\001" +
    "\002\000\004\054\uffba\001\002\000\050\004\uffbb\005\uffbb" +
    "\006\uffbb\011\uffbb\012\uffbb\015\uffbb\016\uffbb\017\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\054\uffbb\067\uffbb\001\002\000\026\007" +
    "\012\010\023\033\007\034\034\043\010\056\022\067\011" +
    "\070\033\071\031\072\013\001\002\000\006\014\362\067" +
    "\361\001\002\000\054\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\057\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\064\uff9a\001\002\000\054\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\057\uff99\061\uff99\062\uff99\063\uff99" +
    "\064\uff99\001\002\000\004\064\364\001\002\000\054\033" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\057\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\001\002\000\056\033\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\044\uff8a\045\uff8a" +
    "\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\056" +
    "\366\057\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\001\002" +
    "\000\030\007\uff8c\010\uff8c\033\uff8c\034\uff8c\043\uff8c\056" +
    "\uff8c\057\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\001\002" +
    "\000\054\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\053\uff8e\057\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\064\uff8e\001\002\000\030\007\012\010\023" +
    "\033\007\034\034\043\010\056\022\057\uff88\067\011\070" +
    "\033\071\031\072\013\001\002\000\004\057\377\001\002" +
    "\000\004\057\uff89\001\002\000\006\057\uff85\061\uff87\001" +
    "\002\000\004\061\375\001\002\000\026\007\012\010\023" +
    "\033\007\034\034\043\010\056\022\067\011\070\033\071" +
    "\031\072\013\001\002\000\004\057\uff86\001\002\000\054" +
    "\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\057\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\001\002\000\050\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\053\uff9d\057\uff9d" +
    "\061\uff9d\062\uff9d\064\uff9d\001\002\000\054\033\uff96\034" +
    "\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96" +
    "\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\057\uff96\061\uff96\062\uff96\063\uff96\064\uff96" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\006\002\003\055\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\036\016\037\027\040\025" +
    "\041\024\042\023\043\020\044\017\045\015\046\014\047" +
    "\013\050\031\001\001\000\004\047\u0100\001\001\000\012" +
    "\044\377\045\015\046\014\047\013\001\001\000\004\066" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\037\102\040\025\041\024\042\023\043\020\044\017\045" +
    "\015\046\014\047\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\034\001\001\000\002\001" +
    "\001\000\026\037\036\040\025\041\024\042\023\043\020" +
    "\044\017\045\015\046\014\047\013\050\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\037\041\040\025" +
    "\041\024\042\023\043\020\044\017\045\015\046\014\047" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\037\044\040\025\041\024\042\023\043\020\044\017\045" +
    "\015\046\014\047\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\037\047\040\025\041\024\042\023\043" +
    "\020\044\017\045\015\046\014\047\013\001\001\000\002" +
    "\001\001\000\022\040\051\041\024\042\023\043\020\044" +
    "\017\045\015\046\014\047\013\001\001\000\002\001\001" +
    "\000\016\042\101\043\020\044\017\045\015\046\014\047" +
    "\013\001\001\000\014\043\100\044\017\045\015\046\014" +
    "\047\013\001\001\000\016\042\077\043\020\044\017\045" +
    "\015\046\014\047\013\001\001\000\016\042\076\043\020" +
    "\044\017\045\015\046\014\047\013\001\001\000\014\043" +
    "\065\044\017\045\015\046\014\047\013\001\001\000\016" +
    "\042\064\043\020\044\017\045\015\046\014\047\013\001" +
    "\001\000\016\042\063\043\020\044\017\045\015\046\014" +
    "\047\013\001\001\000\016\042\062\043\020\044\017\045" +
    "\015\046\014\047\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\044" +
    "\075\045\015\046\014\047\013\001\001\000\012\044\074" +
    "\045\015\046\014\047\013\001\001\000\012\044\073\045" +
    "\015\046\014\047\013\001\001\000\012\044\072\045\015" +
    "\046\014\047\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\057\107\061\106\001\001\000\034\003\150\005\137\010" +
    "\141\011\152\013\147\016\132\017\145\022\123\023\127" +
    "\026\136\032\130\054\131\055\133\001\001\000\004\065" +
    "\110\001\001\000\002\001\001\000\004\056\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\057\115\061" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\036\332\037\027\040\025" +
    "\041\024\042\023\043\020\044\017\045\015\046\014\047" +
    "\013\050\031\001\001\000\006\004\323\031\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\164\014\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\057\170\061\106\001\001\000\002\001\001\000\030" +
    "\036\172\037\027\040\025\041\024\042\023\043\020\044" +
    "\017\045\015\046\014\047\013\050\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\177\001\001\000\004\007\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\202\001\001\000\002\001" +
    "\001\000\004\007\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\210\005\211\010\141\035\207\001" +
    "\001\000\024\037\212\040\025\041\024\042\023\043\020" +
    "\044\017\045\015\046\014\047\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\037\214" +
    "\040\025\041\024\042\023\043\020\044\017\045\015\046" +
    "\014\047\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\217\061\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\164\014\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\057" +
    "\226\061\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\234\001" +
    "\001\000\004\025\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\242\001\001\000\002\001\001\000\004" +
    "\006\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\036\247\037\027\040\025\041\024\042\023\043\020" +
    "\044\017\045\015\046\014\047\013\050\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\150\005\137" +
    "\010\141\011\152\013\147\016\132\017\145\022\123\023" +
    "\127\026\136\032\130\054\261\055\133\060\260\001\001" +
    "\000\002\001\001\000\004\063\262\001\001\000\036\003" +
    "\150\005\137\010\141\011\152\013\147\016\132\017\145" +
    "\022\123\023\127\026\136\032\130\054\261\055\133\060" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\270\001\001\000\024\037\317\040\025\041\024\042" +
    "\023\043\020\044\017\045\015\046\014\047\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\275\001\001\000\002\001\001\000\004\034\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\057\307\061\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\312\001\001\000\002\001\001\000" +
    "\006\057\314\061\106\001\001\000\002\001\001\000\004" +
    "\031\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\321\001\001\000\002\001\001\000\004\012\327" +
    "\001\001\000\002\001\001\000\004\006\325\001\001\000" +
    "\002\001\001\000\030\036\330\037\027\040\025\041\024" +
    "\042\023\043\020\044\017\045\015\046\014\047\013\050" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\057\334\061\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\340\001\001\000\002\001\001\000\004\021" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\353\030\352" +
    "\001\001\000\002\001\001\000\006\027\353\030\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\037\362" +
    "\040\025\041\024\042\023\043\020\044\017\045\015\046" +
    "\014\047\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\366\001\001\000\004\067\367\001\001\000\002" +
    "\001\001\000\030\037\372\040\025\041\024\042\023\043" +
    "\020\044\017\045\015\046\014\047\013\051\370\052\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\373\001\001\000\002\001\001\000\026\037\372\040\025" +
    "\041\024\042\023\043\020\044\017\045\015\046\014\047" +
    "\013\052\375\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();
   private String funcionOIdenh;
   private ArrayList<E> argumentosh;

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Q ::= InsCond 
            {
              Object RESULT =null;
		Ins valorIns = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorIns; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Q",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Q EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              P RESULT =null;
 ArrayList<Ins> listaIns = new ArrayList<Ins>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NT$0",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              P RESULT =(P) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Ins valorIns = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
 listaIns.add(valorIns); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NT$1",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // P ::= NT$0 Inst NT$1 P1 
            {
              P RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (P) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Ins valorIns = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		P valorProg = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorProg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // P ::= 
            {
              P RESULT =null;
		 RESULT = as.programa(new ArrayList<Ins>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              P RESULT =null;
		Ins valorInst = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
 listaIns.add(valorIns); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NT$2",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // P1 ::= Inst NT$2 P1 
            {
              P RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (P) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Ins valorInst = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		P valorProg = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = valorProg;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P1",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // P1 ::= 
            {
              P RESULT =null;
		RESULT = as.programa(listaIns); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P1",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsCond 
            {
              Ins RESULT =null;
		Ins valorIns = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsDec 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsBucle 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsSwitch 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= InsIden 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inst ::= InsFun 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Inst ::= InsProc 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Inst ::= InsStruct 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Inst ::= InsEnum 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Inst ::= InsTypeDef 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Inst ::= InsCall 
            {
              Ins RESULT =null;
		 RESULT = valorIns; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InsIden ::= IDEN InsIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIden",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InsIdenElige ::= IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InsIdenElige ::= CorchetesPuntosIzq InsAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CorchetesPuntosIzq ::= CORCHETEAP Exp0 CORCHETECIERRE CorchetesPuntosIzq 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CorchetesPuntosIzq ::= PUNTO IDEN CorchetesPuntosIzq 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CorchetesPuntosIzq ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InsDec ::= TipoSinIden IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AsigDec ::= PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AsigDec ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tipo ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TipoSinIden ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TipoSinIden ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TipoSinIden ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoSinIden ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoSinIden ::= VECTOR MENOR Tipo MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$3 ::= 
            {
              Ins RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
 E expCondh = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NT$3",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$4 ::= 
            {
              Ins RESULT =(Ins) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
P insIfCondh=insIf
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NT$4",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InsCond ::= IF Exp NT$3 LLAVESAP P NT$4 LLAVESCIERRE ConElse 
            {
              Ins RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Ins) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Ins valorIns = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = valorIns 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ConElse ::= ELSE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		P insElse = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.ifConElse(expCondh, insIfCondh,insElse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ConElse ::= 
            {
              Ins RESULT =null;
		RESULT = as.ifSinElse(expCondh, insIfCondh); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InsBucle ::= WHILE Exp LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InsBucle ::= FOR PAP InsIdenOInsDec Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InsIdenOInsDec ::= InsIden 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenOInsDec",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InsIdenOInsDec ::= InsDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenOInsDec",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InsSwitch ::= SWITCH PAP IDEN CorchetesPuntosIzq PCIERRE LLAVESAP ListaCase LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsSwitch",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListaCase ::= CASE TiposSwitch DOSPUNTOS P BREAK PUNTOYCOMA ListaCase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListaCase ::= DEFAULT DOSPUNTOS P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TiposSwitch ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TiposSwitch ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TiposSwitch ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TiposSwitch ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TiposSwitch ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TiposSwitch ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsAsig ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InsFun ::= FUN Tipo IDEN PAP Param PCIERRE LLAVESAP P RETURN Exp PUNTOYCOMA LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Param ::= Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ParamElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // InsProc ::= PROC IDEN PAP Param PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // InsCall ::= CALL IDEN PAP LIden PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LIden ::= IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LIden ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LIdenElige ::= COMA IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LIdenElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LDec ::= DecConNuevosTipos LDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LEnum ::= IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LEnum ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LEnumElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp ::= Exp0 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT= valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp ::= CreaVector 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp0 ::= Exp1 OR Exp0 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.or(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.and(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.igualIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp2 ::= Exp3 MENOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.distinto(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp3 ::= Exp3 SUMA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.suma(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp3 ::= Exp3 RESTA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.resta(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp4 ::= Exp4 MUL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mul(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divEnt(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divReal(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp4 ::= Exp4 MODULO Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.modulo(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp5 ::= NOT Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.corchetes(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.punto(valorExp, as.iden(lexDeIden)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.size(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Exp7 ::= RESTA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.restaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Exp7 ::= SUMA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.sumaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Exp7 ::= Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Exp8 ::= ENT 
            {
              E RESULT =null;
		String lexDeEnt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Exp8 ::= REAL 
            {
              E RESULT =null;
		String lexDeReal = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Exp8 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.verdadero(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Exp8 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.falso(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Exp8 ::= CARACTER 
            {
              E RESULT =null;
		String lexDeCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$5 ::= 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
 funcionOIdenh = lexDeIden; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NT$5",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Exp8 ::= IDEN NT$5 FuncionOIden 
            {
              E RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (E) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		  RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$6 ::= 
            {
              E RESULT =null;
argumentosh = new ArrayList<E>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NT$6",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FuncionOIden ::= PAP NT$6 ListaArg PCIERRE 
            {
              E RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (E) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionOIden",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FuncionOIden ::= 
            {
              E RESULT =null;
		 RESULT = as.iden(funcionOIdenh); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionOIden",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ListaArg ::= ListaArg1 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ListaArg ::= 
            {
              E RESULT =null;
		 RESULT = as.llamadaFun(as.iden(funcionOIdenh), argumentosh); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$7 ::= 
            {
              E RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
argumentosh.add(elem); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NT$7",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ListaArg1 ::= Exp0 NT$7 COMA ListaArg1 
            {
              E RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (E) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ListaArg1 ::= Exp0 
            {
              E RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 argumentosh.add(elem);
   	RESULT = as.llamadaFun(as.iden(funcionOIdenh), argumentosh); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

