
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Jun 08 01:52:38 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.E;
import ast.AS;
import ast.Ins;
import java.util.List;
import java.util.ArrayList;
import ast.P;
import ast.Tipos;
import ast.Case;
import ast.TipoParam;
import ast.Param;
import alex.TokenValue;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Jun 08 01:52:38 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\003" +
    "\007\000\002\003\013\000\002\005\007\000\002\005\014" +
    "\000\002\005\014\000\002\006\003\000\002\006\005\000" +
    "\002\017\007\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\006\000\002\045" +
    "\003\000\002\045\006\000\002\007\006\000\002\010\010" +
    "\000\002\035\003\000\002\035\002\000\002\036\005\000" +
    "\002\036\003\000\002\011\011\000\002\041\011\000\002" +
    "\041\005\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\012\016\000\002\042\006\000\002\042\005\000" +
    "\002\042\002\000\002\043\007\000\002\043\006\000\002" +
    "\043\002\000\002\013\012\000\002\014\007\000\002\044" +
    "\004\000\002\044\002\000\002\015\011\000\002\037\004" +
    "\000\002\037\002\000\002\040\005\000\002\040\002\000" +
    "\002\016\006\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\004\000\002\026\003\000\002\027\006\000" +
    "\002\027\005\000\002\027\005\000\002\027\003\000\002" +
    "\030\004\000\002\030\004\000\002\030\004\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\006\000\002\031\006\000\002\031\003\000\002" +
    "\031\005\000\002\031\005\000\002\032\010\000\002\032" +
    "\010\000\002\034\007\000\002\046\002\000\002\046\004" +
    "\000\002\047\002\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\076\002\uffff\003\042\004\040\005\066\010" +
    "\052\013\032\015\065\016\020\020\070\021\034\022\057" +
    "\023\033\024\006\025\044\033\014\045\055\060\045\061" +
    "\051\062\060\063\054\064\053\065\022\066\061\067\012" +
    "\070\035\071\046\072\011\073\027\074\004\075\062\001" +
    "\002\000\012\034\uffe8\045\uffe8\056\uffe8\062\uffe8\001\002" +
    "\000\004\002\u0102\001\002\000\022\004\040\005\066\045" +
    "\055\060\045\062\124\063\054\064\053\065\022\001\002" +
    "\000\104\002\uffed\003\uffed\004\uffed\005\uffed\010\uffed\012" +
    "\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\033\uffed\043\uffed\045" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074" +
    "\uffed\075\uffed\001\002\000\104\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\010\ufffe\012\ufffe\013\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\033\ufffe\043\ufffe\045\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\073\ufffe\074\ufffe\075\ufffe\001\002\000\012\034" +
    "\uffea\045\uffea\056\uffea\062\uffea\001\002\000\004\045\356" +
    "\001\002\000\056\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\071\uffa4\001\002\000\032" +
    "\004\040\005\066\023\033\024\006\025\044\033\014\045" +
    "\055\060\045\062\124\063\054\064\053\065\022\001\002" +
    "\000\056\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\071\uffa8\001\002\000\056\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\350" +
    "\042\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\347\053" +
    "\uffac\071\uffac\001\002\000\052\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\042\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\053\uffae\071\uffae\001\002\000\020\061" +
    "\051\062\074\071\046\072\011\073\027\074\004\075\062" +
    "\001\002\000\052\023\uffb3\024\uffb3\025\322\026\320\027" +
    "\323\030\321\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\042\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\053\uffb3\071\uffb3\001\002\000\056\023\uff9e\024\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\071" +
    "\uff9e\001\002\000\104\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\010\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\033\ufff8" +
    "\043\ufff8\045\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\001\002\000\042\023\310\024" +
    "\306\031\uffb6\032\uffb6\034\313\035\305\036\304\037\307" +
    "\040\311\042\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\053" +
    "\uffb6\071\312\001\002\000\022\031\302\032\uffbd\042\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\053\uffbd\001\002\000" +
    "\104\002\ufffa\003\ufffa\004\ufffa\005\ufffa\010\ufffa\012\ufffa" +
    "\013\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\033\ufffa\043\ufffa\045\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\001\002\000\012\034\uffe9\045\uffe9\056\uffe9\062" +
    "\uffe9\001\002\000\020\032\300\042\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\053\uffbf\001\002\000\004\047\275\001" +
    "\002\000\004\062\270\001\002\000\022\004\040\005\066" +
    "\045\055\060\045\062\124\063\054\064\053\065\022\001" +
    "\002\000\020\061\051\062\074\071\046\072\011\073\027" +
    "\074\004\075\062\001\002\000\032\004\040\005\066\023" +
    "\033\024\006\025\044\033\014\045\055\060\045\062\124" +
    "\063\054\064\053\065\022\001\002\000\104\002\uffff\003" +
    "\042\004\040\005\066\010\052\012\uffff\013\032\015\065" +
    "\016\020\017\uffff\020\070\021\034\022\057\023\033\024" +
    "\006\025\044\033\014\043\uffff\045\055\060\045\061\051" +
    "\062\060\063\054\064\053\065\022\066\061\067\012\070" +
    "\035\071\046\072\011\073\027\074\004\075\062\001\002" +
    "\000\104\002\ufffb\003\ufffb\004\ufffb\005\ufffb\010\ufffb\012" +
    "\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\033\ufffb\043\ufffb\045" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074" +
    "\ufffb\075\ufffb\001\002\000\056\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\071\uffa1\001" +
    "\002\000\104\002\ufff9\003\ufff9\004\ufff9\005\ufff9\010\ufff9" +
    "\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\033\ufff9\043\ufff9" +
    "\045\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9" +
    "\074\ufff9\075\ufff9\001\002\000\004\051\252\001\002\000" +
    "\104\002\ufffd\003\ufffd\004\ufffd\005\ufffd\010\ufffd\012\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\033\ufffd\043\ufffd\045\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\001\002\000\022\004\040\005\066\045\055\060" +
    "\045\062\124\063\054\064\053\065\022\001\002\000\056" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\071\uff9f\001\002\000\020\061\051\062\074" +
    "\071\046\072\011\073\027\074\004\075\062\001\002\000" +
    "\104\002\ufff4\003\ufff4\004\ufff4\005\ufff4\010\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\033\ufff4\043\ufff4\045\ufff4" +
    "\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4" +
    "\075\ufff4\001\002\000\004\062\212\001\002\000\004\071" +
    "\207\001\002\000\004\045\161\001\002\000\056\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\071\uffa2\001\002\000\056\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\071\uffa3\001" +
    "\002\000\034\003\155\004\040\005\066\023\033\024\006" +
    "\025\044\033\014\045\055\060\045\062\124\063\054\064" +
    "\053\065\022\001\002\000\104\002\ufff5\003\ufff5\004\ufff5" +
    "\005\ufff5\010\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\033\ufff5\043\ufff5\045\ufff5\060\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\001\002\000\004\062" +
    "\142\001\002\000\050\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\045\131\047\uff9b\052\uff9b" +
    "\062\uffe5\071\uff9b\001\002\000\032\004\040\005\066\023" +
    "\033\024\006\025\044\033\014\045\055\060\045\062\124" +
    "\063\054\064\053\065\022\001\002\000\012\034\uffe7\045" +
    "\uffe7\056\uffe7\062\uffe7\001\002\000\104\002\ufff6\003\ufff6" +
    "\004\ufff6\005\ufff6\010\ufff6\012\ufff6\013\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\033\ufff6\043\ufff6\045\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\001\002\000" +
    "\104\002\ufff7\003\ufff7\004\ufff7\005\ufff7\010\ufff7\012\ufff7" +
    "\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\033\ufff7\043\ufff7\045\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7" +
    "\075\ufff7\001\002\000\004\062\100\001\002\000\056\023" +
    "\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\071\uffa0\001\002\000\104\002\ufffc\003\ufffc\004" +
    "\ufffc\005\ufffc\010\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\033\ufffc\043\ufffc\045\ufffc\060\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\001\002\000\004" +
    "\062\071\001\002\000\004\042\072\001\002\000\022\043" +
    "\uffca\061\051\062\074\071\046\072\011\073\027\074\004" +
    "\075\062\001\002\000\022\043\uffca\061\051\062\074\071" +
    "\046\072\011\073\027\074\004\075\062\001\002\000\012" +
    "\034\uffe5\045\uffe5\056\uffe5\062\uffe5\001\002\000\004\043" +
    "\076\001\002\000\104\002\uffcc\003\uffcc\004\uffcc\005\uffcc" +
    "\010\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\033\uffcc" +
    "\043\uffcc\045\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\074\uffcc\075\uffcc\001\002\000\004\043\uffcb\001" +
    "\002\000\004\045\101\001\002\000\022\046\uffd1\061\051" +
    "\062\074\071\046\072\011\073\027\074\004\075\062\001" +
    "\002\000\006\056\110\062\111\001\002\000\004\046\104" +
    "\001\002\000\004\042\105\001\002\000\076\003\042\004" +
    "\040\005\066\010\052\013\032\015\065\016\020\020\070" +
    "\021\034\022\057\023\033\024\006\025\044\033\014\043" +
    "\uffff\045\055\060\045\061\051\062\060\063\054\064\053" +
    "\065\022\066\061\067\012\070\035\071\046\072\011\073" +
    "\027\074\004\075\062\001\002\000\004\043\107\001\002" +
    "\000\104\002\uffcd\003\uffcd\004\uffcd\005\uffcd\010\uffcd\012" +
    "\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\033\uffcd\043\uffcd\045" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074" +
    "\uffcd\075\uffcd\001\002\000\004\062\122\001\002\000\006" +
    "\046\uffce\050\112\001\002\000\020\061\051\062\074\071" +
    "\046\072\011\073\027\074\004\075\062\001\002\000\004" +
    "\046\uffd2\001\002\000\006\056\115\062\116\001\002\000" +
    "\004\062\120\001\002\000\006\046\uffce\050\112\001\002" +
    "\000\004\046\uffcf\001\002\000\006\046\uffce\050\112\001" +
    "\002\000\004\046\uffd0\001\002\000\006\046\uffce\050\112" +
    "\001\002\000\004\046\uffd3\001\002\000\060\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\045\131\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\071\uff9b\001\002\000\004\042\126\001\002\000" +
    "\076\003\042\004\040\005\066\010\052\013\032\015\065" +
    "\016\020\020\070\021\034\022\057\023\033\024\006\025" +
    "\044\033\014\043\uffff\045\055\060\045\061\051\062\060" +
    "\063\054\064\053\065\022\066\061\067\012\070\035\071" +
    "\046\072\011\073\027\074\004\075\062\001\002\000\004" +
    "\043\130\001\002\000\104\002\ufff0\003\ufff0\004\ufff0\005" +
    "\ufff0\010\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\033" +
    "\ufff0\043\ufff0\045\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
    "\ufff0\073\ufff0\074\ufff0\075\ufff0\001\002\000\036\003\134" +
    "\004\040\005\066\023\033\024\006\025\044\033\014\045" +
    "\055\046\uffe0\060\045\062\124\063\054\064\053\065\022" +
    "\001\002\000\004\046\141\001\002\000\004\046\uffe1\001" +
    "\002\000\004\046\140\001\002\000\006\046\uffde\050\136" +
    "\001\002\000\032\004\040\005\066\023\033\024\006\025" +
    "\044\033\014\045\055\060\045\062\124\063\054\064\053" +
    "\065\022\001\002\000\004\046\uffdf\001\002\000\056\023" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\071\uff9c\001\002\000\056\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\046" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\071\uff9d" +
    "\001\002\000\004\047\143\001\002\000\004\042\144\001" +
    "\002\000\006\043\uffc7\062\145\001\002\000\006\043\uffc5" +
    "\044\151\001\002\000\004\043\147\001\002\000\004\051" +
    "\150\001\002\000\104\002\uffc9\003\uffc9\004\uffc9\005\uffc9" +
    "\010\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\033\uffc9" +
    "\043\uffc9\045\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\073\uffc9\074\uffc9\075\uffc9\001\002\000\004\062\153\001" +
    "\002\000\004\043\uffc8\001\002\000\006\043\uffc5\044\151" +
    "\001\002\000\004\043\uffc6\001\002\000\004\046\160\001" +
    "\002\000\004\046\157\001\002\000\056\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\071" +
    "\uff9a\001\002\000\056\023\uff99\024\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\040\uff99\041\uff99\042\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\071\uff99\001\002\000" +
    "\032\004\040\005\066\023\033\024\006\025\044\033\014" +
    "\045\055\060\045\062\124\063\054\064\053\065\022\001" +
    "\002\000\004\046\163\001\002\000\004\042\164\001\002" +
    "\000\006\011\166\055\165\001\002\000\004\054\205\001" +
    "\002\000\016\004\174\005\175\062\176\063\172\064\173" +
    "\065\177\001\002\000\004\043\170\001\002\000\104\002" +
    "\uffdd\003\uffdd\004\uffdd\005\uffdd\010\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\033\uffdd\043\uffdd\045\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd" +
    "\001\002\000\004\054\200\001\002\000\004\054\uffda\001" +
    "\002\000\004\054\uffd9\001\002\000\004\054\uffd8\001\002" +
    "\000\004\054\uffd7\001\002\000\004\054\uffd5\001\002\000" +
    "\004\054\uffd6\001\002\000\076\003\042\004\040\005\066" +
    "\010\052\012\uffff\013\032\015\065\016\020\020\070\021" +
    "\034\022\057\023\033\024\006\025\044\033\014\045\055" +
    "\060\045\061\051\062\060\063\054\064\053\065\022\066" +
    "\061\067\012\070\035\071\046\072\011\073\027\074\004" +
    "\075\062\001\002\000\004\012\202\001\002\000\004\051" +
    "\203\001\002\000\006\011\166\055\165\001\002\000\004" +
    "\043\uffdc\001\002\000\076\003\042\004\040\005\066\010" +
    "\052\013\032\015\065\016\020\020\070\021\034\022\057" +
    "\023\033\024\006\025\044\033\014\043\uffff\045\055\060" +
    "\045\061\051\062\060\063\054\064\053\065\022\066\061" +
    "\067\012\070\035\071\046\072\011\073\027\074\004\075" +
    "\062\001\002\000\004\043\uffdb\001\002\000\020\061\051" +
    "\062\074\071\046\072\011\073\027\074\004\075\062\001" +
    "\002\000\004\034\211\001\002\000\012\034\uffe6\045\uffe6" +
    "\056\uffe6\062\uffe6\001\002\000\006\047\214\051\213\001" +
    "\002\000\104\002\uffec\003\uffec\004\uffec\005\uffec\010\uffec" +
    "\012\uffec\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\033\uffec\043\uffec" +
    "\045\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec" +
    "\074\uffec\075\uffec\001\002\000\036\004\040\005\066\006" +
    "\216\023\033\024\006\025\044\033\014\045\055\057\220" +
    "\060\045\062\124\063\054\064\053\065\022\001\002\000" +
    "\004\051\245\001\002\000\004\045\234\001\002\000\004" +
    "\051\uffc3\001\002\000\020\061\051\062\074\071\046\072" +
    "\011\073\027\074\004\075\062\001\002\000\004\051\uffc2" +
    "\001\002\000\004\051\uffc1\001\002\000\004\045\224\001" +
    "\002\000\006\046\uff95\063\226\001\002\000\004\046\233" +
    "\001\002\000\006\046\uff93\050\227\001\002\000\004\063" +
    "\231\001\002\000\004\046\uff94\001\002\000\006\046\uff93" +
    "\050\227\001\002\000\004\046\uff92\001\002\000\004\051" +
    "\uff96\001\002\000\034\004\040\005\066\006\216\023\033" +
    "\024\006\025\044\033\014\045\055\060\045\062\124\063" +
    "\054\064\053\065\022\001\002\000\004\050\242\001\002" +
    "\000\004\050\237\001\002\000\032\004\040\005\066\023" +
    "\033\024\006\025\044\033\014\045\055\060\045\062\124" +
    "\063\054\064\053\065\022\001\002\000\004\046\241\001" +
    "\002\000\006\050\uff98\051\uff98\001\002\000\032\004\040" +
    "\005\066\023\033\024\006\025\044\033\014\045\055\060" +
    "\045\062\124\063\054\064\053\065\022\001\002\000\004" +
    "\046\244\001\002\000\006\050\uff97\051\uff97\001\002\000" +
    "\104\002\uffeb\003\uffeb\004\uffeb\005\uffeb\010\uffeb\012\uffeb" +
    "\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\033\uffeb\043\uffeb\045\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\001\002\000\004\034\247\001\002\000\004\025" +
    "\250\001\002\000\012\034\uffe4\045\uffe4\056\uffe4\062\uffe4" +
    "\001\002\000\056\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\071\uffa5\001\002\000\104" +
    "\002\ufff3\003\ufff3\004\ufff3\005\ufff3\010\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\033\ufff3\043\ufff3\045\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075" +
    "\ufff3\001\002\000\012\002\001\012\001\017\001\043\001" +
    "\001\002\000\004\042\255\001\002\000\076\003\042\004" +
    "\040\005\066\010\052\013\032\015\065\016\020\020\070" +
    "\021\034\022\057\023\033\024\006\025\044\033\014\043" +
    "\uffff\045\055\060\045\061\051\062\060\063\054\064\053" +
    "\065\022\066\061\067\012\070\035\071\046\072\011\073" +
    "\027\074\004\075\062\001\002\000\004\043\257\001\002" +
    "\000\106\002\ufff2\003\ufff2\004\ufff2\005\ufff2\010\ufff2\012" +
    "\ufff2\013\ufff2\014\260\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\033\ufff2\043" +
    "\ufff2\045\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\001\002\000\004\042\261\001\002" +
    "\000\076\003\042\004\040\005\066\010\052\013\032\015" +
    "\065\016\020\020\070\021\034\022\057\023\033\024\006" +
    "\025\044\033\014\043\uffff\045\055\060\045\061\051\062" +
    "\060\063\054\064\053\065\022\066\061\067\012\070\035" +
    "\071\046\072\011\073\027\074\004\075\062\001\002\000" +
    "\004\043\263\001\002\000\104\002\ufff1\003\ufff1\004\ufff1" +
    "\005\ufff1\010\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\033\ufff1\043\ufff1\045\ufff1\060\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\073\ufff1\074\ufff1\075\ufff1\001\002\000\004\062" +
    "\265\001\002\000\004\051\266\001\002\000\104\002\uffc4" +
    "\003\uffc4\004\uffc4\005\uffc4\010\uffc4\012\uffc4\013\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\033\uffc4\043\uffc4\045\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\001" +
    "\002\000\056\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\071\uffa6\001\002\000\004\045" +
    "\271\001\002\000\034\004\040\005\066\023\033\024\006" +
    "\025\044\033\014\045\055\046\uffe0\060\045\062\124\063" +
    "\054\064\053\065\022\001\002\000\004\046\273\001\002" +
    "\000\004\051\274\001\002\000\104\002\uffe2\003\uffe2\004" +
    "\uffe2\005\uffe2\010\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\033\uffe2\043\uffe2\045\uffe2\060\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\001\002\000\032" +
    "\004\040\005\066\023\033\024\006\025\044\033\014\045" +
    "\055\060\045\062\124\063\054\064\053\065\022\001\002" +
    "\000\004\051\277\001\002\000\104\002\uffe3\003\uffe3\004" +
    "\uffe3\005\uffe3\010\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\033\uffe3\043\uffe3\045\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\001\002\000\032" +
    "\004\040\005\066\023\033\024\006\025\044\033\014\045" +
    "\055\060\045\062\124\063\054\064\053\065\022\001\002" +
    "\000\016\042\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\053" +
    "\uffc0\001\002\000\032\004\040\005\066\023\033\024\006" +
    "\025\044\033\014\045\055\060\045\062\124\063\054\064" +
    "\053\065\022\001\002\000\020\032\uffbe\042\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\053\uffbe\001\002\000\032\004" +
    "\040\005\066\023\033\024\006\025\044\033\014\045\055" +
    "\060\045\062\124\063\054\064\053\065\022\001\002\000" +
    "\032\004\040\005\066\023\033\024\006\025\044\033\014" +
    "\045\055\060\045\062\124\063\054\064\053\065\022\001" +
    "\002\000\032\004\040\005\066\023\033\024\006\025\044" +
    "\033\014\045\055\060\045\062\124\063\054\064\053\065" +
    "\022\001\002\000\032\004\040\005\066\023\033\024\006" +
    "\025\044\033\014\045\055\060\045\062\124\063\054\064" +
    "\053\065\022\001\002\000\032\004\040\005\066\023\033" +
    "\024\006\025\044\033\014\045\055\060\045\062\124\063" +
    "\054\064\053\065\022\001\002\000\032\004\040\005\066" +
    "\023\033\024\006\025\044\033\014\045\055\060\045\062" +
    "\124\063\054\064\053\065\022\001\002\000\032\004\040" +
    "\005\066\023\033\024\006\025\044\033\014\045\055\060" +
    "\045\062\124\063\054\064\053\065\022\001\002\000\032" +
    "\004\040\005\066\023\033\024\006\025\044\033\014\045" +
    "\055\060\045\062\124\063\054\064\053\065\022\001\002" +
    "\000\026\023\310\024\306\031\uffbb\032\uffbb\042\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb\001\002\000\026" +
    "\023\310\024\306\031\uffba\032\uffba\042\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\053\uffba\001\002\000\026\023\310" +
    "\024\306\031\uffb7\032\uffb7\042\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\053\uffb7\001\002\000\052\023\uffb5\024\uffb5" +
    "\025\322\026\320\027\323\030\321\031\uffb5\032\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5\046\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\053\uffb5\071\uffb5\001\002\000" +
    "\032\004\040\005\066\023\033\024\006\025\044\033\014" +
    "\045\055\060\045\062\124\063\054\064\053\065\022\001" +
    "\002\000\032\004\040\005\066\023\033\024\006\025\044" +
    "\033\014\045\055\060\045\062\124\063\054\064\053\065" +
    "\022\001\002\000\032\004\040\005\066\023\033\024\006" +
    "\025\044\033\014\045\055\060\045\062\124\063\054\064" +
    "\053\065\022\001\002\000\032\004\040\005\066\023\033" +
    "\024\006\025\044\033\014\045\055\060\045\062\124\063" +
    "\054\064\053\065\022\001\002\000\052\023\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\042\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\053\uffb1\071\uffb1\001\002\000" +
    "\052\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\042\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2" +
    "\071\uffb2\001\002\000\052\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\042\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\053\uffaf\071\uffaf\001\002\000\052\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\042\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\053\uffb0\071\uffb0\001" +
    "\002\000\026\023\310\024\306\031\uffbc\032\uffbc\042\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\051\uffbc\053\uffbc\001\002\000" +
    "\052\023\uffb4\024\uffb4\025\322\026\320\027\323\030\321" +
    "\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\042\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4" +
    "\071\uffb4\001\002\000\026\023\310\024\306\031\uffb8\032" +
    "\uffb8\042\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8" +
    "\001\002\000\026\023\310\024\306\031\uffb9\032\uffb9\042" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\001\002" +
    "\000\004\062\335\001\002\000\004\045\336\001\002\000" +
    "\022\046\uffd1\061\051\062\074\071\046\072\011\073\027" +
    "\074\004\075\062\001\002\000\004\046\340\001\002\000" +
    "\004\042\341\001\002\000\076\003\042\004\040\005\066" +
    "\010\052\013\032\015\065\016\020\017\uffff\020\070\021" +
    "\034\022\057\023\033\024\006\025\044\033\014\045\055" +
    "\060\045\061\051\062\060\063\054\064\053\065\022\066" +
    "\061\067\012\070\035\071\046\072\011\073\027\074\004" +
    "\075\062\001\002\000\004\017\343\001\002\000\036\004" +
    "\040\005\066\006\216\023\033\024\006\025\044\033\014" +
    "\045\055\057\220\060\045\062\124\063\054\064\053\065" +
    "\022\001\002\000\004\051\345\001\002\000\004\043\346" +
    "\001\002\000\104\002\uffd4\003\uffd4\004\uffd4\005\uffd4\010" +
    "\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\033\uffd4\043" +
    "\uffd4\045\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\001\002\000\032\004\040\005\066" +
    "\023\033\024\006\025\044\033\014\045\055\060\045\062" +
    "\124\063\054\064\053\065\022\001\002\000\006\007\352" +
    "\062\351\001\002\000\056\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\071\uffaa\001\002" +
    "\000\056\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\071\uffa9\001\002\000\004\053\354" +
    "\001\002\000\056\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\046\uffab\047\uffab\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\071\uffab\001\002\000\052" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\042\uffad\046\uffad\047\uffad\050\uffad\051\uffad\053\uffad\071" +
    "\uffad\001\002\000\046\004\040\005\066\023\033\024\006" +
    "\025\044\033\014\045\055\060\045\061\051\062\060\063" +
    "\054\064\053\065\022\071\046\072\011\073\027\074\004" +
    "\075\062\001\002\000\004\062\u0100\001\002\000\032\004" +
    "\040\005\066\023\033\024\006\025\044\033\014\045\055" +
    "\060\045\062\124\063\054\064\053\065\022\001\002\000" +
    "\032\004\040\005\066\023\033\024\006\025\044\033\014" +
    "\045\055\060\045\062\124\063\054\064\053\065\022\001" +
    "\002\000\004\051\363\001\002\000\032\004\040\005\066" +
    "\023\033\024\006\025\044\033\014\045\055\060\045\062" +
    "\124\063\054\064\053\065\022\001\002\000\004\046\365" +
    "\001\002\000\004\042\366\001\002\000\076\003\042\004" +
    "\040\005\066\010\052\013\032\015\065\016\020\020\070" +
    "\021\034\022\057\023\033\024\006\025\044\033\014\043" +
    "\uffff\045\055\060\045\061\051\062\060\063\054\064\053" +
    "\065\022\066\061\067\012\070\035\071\046\072\011\073" +
    "\027\074\004\075\062\001\002\000\004\043\370\001\002" +
    "\000\104\002\uffef\003\uffef\004\uffef\005\uffef\010\uffef\012" +
    "\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\033\uffef\043\uffef\045" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074" +
    "\uffef\075\uffef\001\002\000\004\051\372\001\002\000\032" +
    "\004\040\005\066\023\033\024\006\025\044\033\014\045" +
    "\055\060\045\062\124\063\054\064\053\065\022\001\002" +
    "\000\004\046\374\001\002\000\004\042\375\001\002\000" +
    "\076\003\042\004\040\005\066\010\052\013\032\015\065" +
    "\016\020\020\070\021\034\022\057\023\033\024\006\025" +
    "\044\033\014\043\uffff\045\055\060\045\061\051\062\060" +
    "\063\054\064\053\065\022\066\061\067\012\070\035\071" +
    "\046\072\011\073\027\074\004\075\062\001\002\000\004" +
    "\043\377\001\002\000\104\002\uffee\003\uffee\004\uffee\005" +
    "\uffee\010\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\033" +
    "\uffee\043\uffee\045\uffee\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072" +
    "\uffee\073\uffee\074\uffee\075\uffee\001\002\000\004\047\214" +
    "\001\002\000\056\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\071\uffa7\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\062\002\004\003\007\004\035\005\042\006" +
    "\066\007\036\010\025\011\040\012\022\013\063\014\062" +
    "\015\055\016\046\017\006\021\030\022\027\023\024\024" +
    "\023\025\020\026\016\027\015\030\014\031\012\045\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\354\027\015\030\014\031\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\266\001\001\000\004\045\263\001" +
    "\001\000\024\021\253\022\027\023\024\024\023\025\020" +
    "\026\016\027\015\030\014\031\012\001\001\000\062\002" +
    "\252\003\007\004\035\005\042\006\066\007\036\010\025" +
    "\011\040\012\022\013\063\014\062\015\055\016\046\017" +
    "\006\021\030\022\027\023\024\024\023\025\020\026\016" +
    "\027\015\030\014\031\012\045\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\250\001\001\000\002\001" +
    "\001\000\004\045\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\155\022\027\023\024" +
    "\024\023\025\020\026\016\027\015\030\014\031\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\021\124\022\027\023\024\024\023\025\020\026" +
    "\016\027\015\030\014\031\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\072\017\006\044\074\045\047\001" +
    "\001\000\012\006\072\017\006\044\076\045\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\102\045\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\002\105\003\007\004\035\005\042\006\066" +
    "\007\036\010\025\011\040\012\022\013\063\014\062\015" +
    "\055\016\046\017\006\021\030\022\027\023\024\024\023" +
    "\025\020\026\016\027\015\030\014\031\012\045\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\112\001\001\000\004\045\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\116\001\001\000\002\001\001\000\004\043\120\001" +
    "\001\000\002\001\001\000\004\043\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\002" +
    "\126\003\007\004\035\005\042\006\066\007\036\010\025" +
    "\011\040\012\022\013\063\014\062\015\055\016\046\017" +
    "\006\021\030\022\027\023\024\024\023\025\020\026\016" +
    "\027\015\030\014\031\012\045\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\021\134\022\027\023\024" +
    "\024\023\025\020\026\016\027\015\030\014\031\012\035" +
    "\131\036\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\021\134\022" +
    "\027\023\024\024\023\025\020\026\016\027\015\030\014" +
    "\031\012\036\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\145\001\001\000\004\040\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\021\161\022\027\023" +
    "\024\024\023\025\020\026\016\027\015\030\014\031\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\166\001\001\000\002\001\001\000\004\033\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\002" +
    "\200\003\007\004\035\005\042\006\066\007\036\010\025" +
    "\011\040\012\022\013\063\014\062\015\055\016\046\017" +
    "\006\021\030\022\027\023\024\024\023\025\020\026\016" +
    "\027\015\030\014\031\012\045\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\203\001\001\000\002" +
    "\001\001\000\062\002\205\003\007\004\035\005\042\006" +
    "\066\007\036\010\025\011\040\012\022\013\063\014\062" +
    "\015\055\016\046\017\006\021\030\022\027\023\024\024" +
    "\023\025\020\026\016\027\015\030\014\031\012\045\047" +
    "\001\001\000\002\001\001\000\004\045\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\020\214\021\216\022\027\023\024\024" +
    "\023\025\020\026\016\027\015\030\014\031\012\032\220" +
    "\034\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\224\001" +
    "\001\000\002\001\001\000\004\047\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\021\234\022\027" +
    "\023\024\024\023\025\020\026\016\027\015\030\014\031" +
    "\012\032\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\021\237\022\027\023\024\024\023\025\020\026" +
    "\016\027\015\030\014\031\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\021\242\022\027\023\024\024" +
    "\023\025\020\026\016\027\015\030\014\031\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\002\255\003\007\004\035\005\042\006\066" +
    "\007\036\010\025\011\040\012\022\013\063\014\062\015" +
    "\055\016\046\017\006\021\030\022\027\023\024\024\023" +
    "\025\020\026\016\027\015\030\014\031\012\045\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\002\261\003\007\004\035\005\042\006\066\007" +
    "\036\010\025\011\040\012\022\013\063\014\062\015\055" +
    "\016\046\017\006\021\030\022\027\023\024\024\023\025" +
    "\020\026\016\027\015\030\014\031\012\045\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\021\134\022\027\023\024\024\023\025" +
    "\020\026\016\027\015\030\014\031\012\035\271\036\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\021\275\022\027\023\024\024\023\025\020" +
    "\026\016\027\015\030\014\031\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\300\022\027\023\024" +
    "\024\023\025\020\026\016\027\015\030\014\031\012\001" +
    "\001\000\002\001\001\000\022\022\302\023\024\024\023" +
    "\025\020\026\016\027\015\030\014\031\012\001\001\000" +
    "\002\001\001\000\016\024\332\025\020\026\016\027\015" +
    "\030\014\031\012\001\001\000\016\024\331\025\020\026" +
    "\016\027\015\030\014\031\012\001\001\000\014\025\330" +
    "\026\016\027\015\030\014\031\012\001\001\000\016\024" +
    "\327\025\020\026\016\027\015\030\014\031\012\001\001" +
    "\000\014\025\316\026\016\027\015\030\014\031\012\001" +
    "\001\000\016\024\315\025\020\026\016\027\015\030\014" +
    "\031\012\001\001\000\016\024\314\025\020\026\016\027" +
    "\015\030\014\031\012\001\001\000\016\024\313\025\020" +
    "\026\016\027\015\030\014\031\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\326\027\015\030\014\031\012\001\001\000" +
    "\012\026\325\027\015\030\014\031\012\001\001\000\012" +
    "\026\324\027\015\030\014\031\012\001\001\000\012\026" +
    "\323\027\015\030\014\031\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\336\045\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\002\341\003\007\004\035\005\042\006\066\007" +
    "\036\010\025\011\040\012\022\013\063\014\062\015\055" +
    "\016\046\017\006\021\030\022\027\023\024\024\023\025" +
    "\020\026\016\027\015\030\014\031\012\045\047\001\001" +
    "\000\002\001\001\000\032\020\343\021\216\022\027\023" +
    "\024\024\023\025\020\026\016\027\015\030\014\031\012" +
    "\032\220\034\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\352\022\027\023\024" +
    "\024\023\025\020\026\016\027\015\030\014\031\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\357\017\360\021\030\022\027\023\024\024\023" +
    "\025\020\026\016\027\015\030\014\031\012\045\356\001" +
    "\001\000\002\001\001\000\024\021\370\022\027\023\024" +
    "\024\023\025\020\026\016\027\015\030\014\031\012\001" +
    "\001\000\024\021\361\022\027\023\024\024\023\025\020" +
    "\026\016\027\015\030\014\031\012\001\001\000\002\001" +
    "\001\000\024\021\363\022\027\023\024\024\023\025\020" +
    "\026\016\027\015\030\014\031\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\002\366\003\007\004\035" +
    "\005\042\006\066\007\036\010\025\011\040\012\022\013" +
    "\063\014\062\015\055\016\046\017\006\021\030\022\027" +
    "\023\024\024\023\025\020\026\016\027\015\030\014\031" +
    "\012\045\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\021\372\022\027\023\024\024" +
    "\023\025\020\026\016\027\015\030\014\031\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\002\375\003" +
    "\007\004\035\005\042\006\066\007\036\010\025\011\040" +
    "\012\022\013\063\014\062\015\055\016\046\017\006\021" +
    "\030\022\027\023\024\024\023\025\020\026\016\027\015" +
    "\030\014\031\012\045\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();
   public static int numErrores = 0;

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              P RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		P prog = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 prog.anadeIns(ins);
	   RESULT = prog; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		P start_val = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              P RESULT =null;
		 RESULT = as.programa(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= InsCond 
            {
              Ins RESULT =null;
		Ins valorInsCond = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsCond; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsBucle 
            {
              Ins RESULT =null;
		Ins valorInsBucle = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsBucle; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsDec 
            {
              Ins RESULT =null;
		Ins valorInsDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsDec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsAsig 
            {
              Ins RESULT =null;
		Ins valorInsAsig = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsAsig; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsCall 
            {
              Ins RESULT =null;
		Ins valorInsCall = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsCall; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsSwitch 
            {
              Ins RESULT =null;
		Ins valorInsSwitch = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsSwitch; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsFun 
            {
              Ins RESULT =null;
		Ins valorInsFun = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsFun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsProc 
            {
              Ins RESULT =null;
		Ins valorInsProc = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsProc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsStruct 
            {
              Ins RESULT =null;
		Ins valorInsStruct = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsStruct; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsEnum 
            {
              Ins RESULT =null;
		Ins valorInsEnum = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsEnum; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= InsTypeDef 
            {
              Ins RESULT =null;
		Ins valorInsTypeDef = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsTypeDef; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inst ::= error PUNTOYCOMA 
            {
              Ins RESULT =null;
		 numErrores += 1; RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsCond ::= IF Exp0 LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue ifR = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insIfSinElse(cond, insIf, ifR.getFila(), ifR.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsCond ::= IF Exp0 LLAVESAP P LLAVESCIERRE ELSE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue ifR = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		P insElse = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insIfConElse(cond, insIf, insElse, ifR.getFila(), ifR.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InsBucle ::= WHILE Exp0 LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue whileR = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		P ins = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insWhile(cond, ins, whileR.getFila(), whileR.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InsBucle ::= FOR PAP InsDecConValorIni Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue forR = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		Ins insDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insDec, cond, paso, inst, forR.getFila(), forR.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InsBucle ::= FOR PAP InsAsig Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue forR = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		Ins insAsig = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insAsig, cond, paso, inst, forR.getFila(), forR.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InsDec ::= InsDecConValorIni 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = ins; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InsDec ::= Tipo IDEN PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.insDec(tipo, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), false, null, lexDeIden.getFila(), lexDeIden.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InsDecConValorIni ::= Tipo IDEN IGUAL Exp PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.insDec(tipo, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), true, valorExp, lexDeIden.getFila(), lexDeIden.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDecConValorIni",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= INT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoInt(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= BOOL 
            {
              Tipos RESULT =null;
		RESULT = as.tipoBool(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= CHAR 
            {
              Tipos RESULT =null;
		RESULT = as.tipoChar(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= FLOAT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoFloat(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Tipos RESULT =null;
		TokenValue vect = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.tipoVector(tipo, vect.getFila(), vect.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= IDEN 
            {
              Tipos RESULT =null;
		TokenValue lexIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.tipoUsuario(lexIden.getLexema(),lexIden.getFila(), lexIden.getColumna() ); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= MENOR Tipo MAYOR MUL 
            {
              Tipos RESULT =null;
		TokenValue men = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		RESULT = as.tipoPuntero(tipo, men.getFila(), men.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InsAsig ::= Exp0 IGUAL Exp0 PUNTOYCOMA 
            {
              Ins RESULT =null;
		E var = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue asig = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insAsig(var, valorExp, asig.getFila(), asig.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InsCall ::= CALL IDEN PAP ListaArg PCIERRE PUNTOYCOMA 
            {
              Ins RESULT =null;
		TokenValue call = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insCall(as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), lista, call.getFila(), call.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListaArg ::= ListaArg1 
            {
              List<E> RESULT =null;
		List<E> valorExp = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListaArg ::= 
            {
              List<E> RESULT =null;
		 RESULT = new ArrayList<E>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaArg1 ::= Exp0 COMA ListaArg1 
            {
              List<E> RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, elem);
	   RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListaArg1 ::= Exp0 
            {
              List<E> RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<E> args = new ArrayList<E>();
	   args.add(elem);
	   RESULT = args; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InsSwitch ::= SWITCH PAP Exp0 PCIERRE LLAVESAP ListaCase LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue swi = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E var = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Case> lista = (List<Case>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insSwitch(var, lista, swi.getFila(), swi.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsSwitch",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListaCase ::= CASE TiposSwitch DOSPUNTOS P BREAK PUNTOYCOMA ListaCase 
            {
              List<Case> RESULT =null;
		TokenValue cas = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E var = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Case> lista = (List<Case>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(0, as.createCase(var, instr, cas.getFila(), cas.getColumna()));
       RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListaCase ::= DEFAULT DOSPUNTOS P 
            {
              List<Case> RESULT =null;
		TokenValue def = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Case> lista = new ArrayList<Case>();
	 	lista.add(0, as.createCase(as.iden("default", true, def.getFila(), def.getColumna()), instr, def.getFila(), def.getColumna()));
	 	RESULT = lista;
	 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TiposSwitch ::= ENT 
            {
              E RESULT =null;
		TokenValue lexDeEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt.getLexema(), false, lexDeEnt.getFila(), lexDeEnt.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TiposSwitch ::= REAL 
            {
              E RESULT =null;
		TokenValue lexDeReal = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal.getLexema(), false, lexDeReal.getFila(), lexDeReal.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TiposSwitch ::= TRUE 
            {
              E RESULT =null;
		TokenValue tr = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.verdadero(false, tr.getFila(), tr.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TiposSwitch ::= FALSE 
            {
              E RESULT =null;
		TokenValue fs = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.falso(false, fs.getFila(), fs.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TiposSwitch ::= CARACTER 
            {
              E RESULT =null;
		TokenValue lexDeCaracter = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter.getLexema(), false, lexDeCaracter.getFila(), lexDeCaracter.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TiposSwitch ::= IDEN 
            {
              E RESULT =null;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InsFun ::= FUN Tipo IDEN PAP Parametros PCIERRE LLAVESAP P RETURN Exp PUNTOYCOMA LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue fun = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-11)).value;
		Tipos tipoReturn = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E valorReturn = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insFun(tipoReturn, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), params, instr, valorReturn, fun.getFila(), fun.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Parametros ::= Tipo AMPERSAND IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.REFERENCIA, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), lexDeIden.getFila(), lexDeIden.getColumna()));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Parametros ::= Tipo IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.VALOR, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), lexDeIden.getFila(), lexDeIden.getColumna()));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Parametros ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ParamElige ::= COMA Tipo AMPERSAND IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.REFERENCIA, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), lexDeIden.getFila(), lexDeIden.getColumna()));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.VALOR, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), lexDeIden.getFila(), lexDeIden.getColumna()));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ParamElige ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InsProc ::= PROC IDEN PAP Parametros PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue proc = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insProc(as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), params, instr, proc.getFila(), proc.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Ins RESULT =null;
		TokenValue str = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Ins> listaDec = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insStruct(as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), listaDec, str.getFila(), str.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LDec ::= InsDec LDec 
            {
              List<Ins> RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Ins> listaDec = (List<Ins>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 listaDec.add(0,ins);
	   RESULT = listaDec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LDec ::= 
            {
              List<Ins> RESULT =null;
		RESULT = new ArrayList<Ins>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Ins RESULT =null;
		TokenValue en = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<E> listaCtes = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insEnum(as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), listaCtes, en.getFila(), en.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LEnum ::= IDEN LEnumElige 
            {
              List<E> RESULT =null;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> listaCtes = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 listaCtes.add(0, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()));
	   RESULT = listaCtes; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LEnum ::= 
            {
              List<E> RESULT =null;
		 RESULT = new ArrayList<E>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              List<E> RESULT =null;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<E> listaCtes = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 listaCtes.add(0, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()));
	   RESULT = listaCtes; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LEnumElige ::= 
            {
              List<E> RESULT =null;
		 RESULT = new ArrayList<E>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Ins RESULT =null;
		TokenValue tdef = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insTypeDef(tipo, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), tdef.getFila(), tdef.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp ::= Exp0 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT= valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp ::= CreaVector 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp ::= New 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp0 ::= Exp1 OR Exp0 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue or = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.or(valorExp1, valorExp2, false, or.getFila(), or.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue and = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.and(valorExp1, valorExp2, false, and.getFila(), and.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue ig = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.igualIgual(valorExp1, valorExp2, false, ig.getFila(), ig.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue ma = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayor(valorExp1, valorExp2, false, ma.getFila(), ma.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp2 ::= Exp3 MENOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue me = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menor(valorExp1, valorExp2, false, me.getFila(), me.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue mi = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayorIgual(valorExp1, valorExp2, false, mi.getFila(), mi.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue mi = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menorIgual(valorExp1, valorExp2, false, mi.getFila(), mi.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue dist = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.distinto(valorExp1, valorExp2, false, dist.getFila(), dist.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp3 ::= Exp3 SUMA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue sum = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.suma(valorExp1, valorExp2, false, sum.getFila(), sum.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp3 ::= Exp3 RESTA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue rest = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.resta(valorExp1, valorExp2, false, rest.getFila(), rest.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp4 ::= Exp4 MUL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue mul = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mul(valorExp1, valorExp2, false, mul.getFila(), mul.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue div = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divEnt(valorExp1, valorExp2, false, div.getFila(), div.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue div = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divReal(valorExp1, valorExp2, false, div.getFila(), div.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp4 ::= Exp4 MODULO Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue mod = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.modulo(valorExp1, valorExp2, false, mod.getFila(), mod.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp5 ::= NOT Exp5 
            {
              E RESULT =null;
		TokenValue not = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(valorExp, false, not.getFila(), not.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		TokenValue ch = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.corchetes(valorExp1, valorExp2, true, ch.getFila(), ch.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue punt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.punto(valorExp, as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), true, punt.getFila(), punt.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue punt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.size(valorExp, false, punt.getFila(), punt.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp7 ::= RESTA Exp8 
            {
              E RESULT =null;
		TokenValue rest = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.restaUnaria(valorExp, false, rest.getFila(), rest.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp7 ::= SUMA Exp8 
            {
              E RESULT =null;
		TokenValue sum = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.sumaUnaria(valorExp, false, sum.getFila(), sum.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp7 ::= MUL Exp8 
            {
              E RESULT =null;
		TokenValue mul = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.accesoPuntero(valorExp, true, mul.getFila(), mul.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp7 ::= Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp8 ::= ENT 
            {
              E RESULT =null;
		TokenValue lexDeEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt.getLexema(), false, lexDeEnt.getFila(), lexDeEnt.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp8 ::= REAL 
            {
              E RESULT =null;
		TokenValue lexDeReal = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal.getLexema(), false, lexDeReal.getFila(), lexDeReal.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp8 ::= TRUE 
            {
              E RESULT =null;
		TokenValue tr = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.verdadero(false, tr.getFila(), tr.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp8 ::= FALSE 
            {
              E RESULT =null;
		TokenValue fs = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.falso(false, fs.getFila(), fs.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp8 ::= NULL 
            {
              E RESULT =null;
		TokenValue nl = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nulo(false, nl.getFila(), nl.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp8 ::= CARACTER 
            {
              E RESULT =null;
		TokenValue lexDeCaracter = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter.getLexema(), false, lexDeCaracter.getFila(), lexDeCaracter.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp8 ::= IDEN PAP ListaArg PCIERRE 
            {
              E RESULT =null;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.llamadaFun(as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()), lista, false, lexDeIden.getFila(), lexDeIden.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Exp8 ::= IDEN PAP error PCIERRE 
            {
              E RESULT =null;
		 numErrores += 1; RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Exp8 ::= IDEN 
            {
              E RESULT =null;
		TokenValue lexDeIden = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.iden(lexDeIden.getLexema(), true, lexDeIden.getFila(), lexDeIden.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Exp8 ::= PAP error PCIERRE 
            {
              E RESULT =null;
		 numErrores += 1; RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		TokenValue cv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2, false, cv.getFila(), cv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		TokenValue cv = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2, false, cv.getFila(), cv.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // New ::= NEW Tipo PAP ListaNew PCIERRE 
            {
              E RESULT =null;
		TokenValue nuevo = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Integer> lista = (List<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.nuevo(lista, tipo, false, nuevo.getFila(), nuevo.getColumna()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("New",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ListaNew ::= 
            {
              List<Integer> RESULT =null;
		 RESULT = new ArrayList<Integer>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaNew",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ListaNew ::= ENT ListaNewElige 
            {
              List<Integer> RESULT =null;
		TokenValue lexDeEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Integer> lista = (List<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, Integer.parseInt(lexDeEnt.getLexema()));
	RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaNew",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ListaNewElige ::= 
            {
              List<Integer> RESULT =null;
		 RESULT = new ArrayList<Integer>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaNewElige",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ListaNewElige ::= COMA ENT ListaNewElige 
            {
              List<Integer> RESULT =null;
		TokenValue lexDeEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Integer> lista = (List<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, Integer.parseInt(lexDeEnt.getLexema()));
	RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaNewElige",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

