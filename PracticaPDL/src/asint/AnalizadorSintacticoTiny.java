
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 05 21:36:47 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 05 21:36:47 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\004\000\002\005\004\000\002\005" +
    "\004\000\002\047\006\000\002\047\005\000\002\047\002" +
    "\000\002\006\005\000\002\007\003\000\002\007\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\006\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\006\000\002\012\010\000\002\013\006\000" +
    "\002\013\002\000\002\014\007\000\002\015\005\000\002" +
    "\016\016\000\002\017\005\000\002\017\002\000\002\020" +
    "\006\000\002\020\002\000\002\021\012\000\002\022\010" +
    "\000\002\023\004\000\002\023\002\000\002\024\005\000" +
    "\002\024\002\000\002\025\007\000\002\046\004\000\002" +
    "\046\002\000\002\026\011\000\002\027\004\000\002\027" +
    "\002\000\002\030\005\000\002\030\002\000\002\031\006" +
    "\000\002\032\003\000\002\032\003\000\002\033\005\000" +
    "\002\033\003\000\002\034\005\000\002\034\003\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\003\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\003\000\002\040\004\000\002\040" +
    "\003\000\002\041\006\000\002\041\005\000\002\041\005" +
    "\000\002\041\003\000\002\042\004\000\002\042\004\000" +
    "\002\042\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\005\000\002\044\010\000\002\044\010" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\040\002\uffff\004\005\005\031\006\010\011" +
    "\021\012\022\015\011\016\014\017\006\021\030\022\035" +
    "\024\004\025\025\026\027\027\013\001\002\000\004\027" +
    "\305\001\002\000\004\027\uffe5\001\002\000\004\027\273" +
    "\001\002\000\044\002\ufff8\004\ufff8\005\ufff8\006\ufff8\011" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\054\ufff8\001" +
    "\002\000\004\027\uffe3\001\002\000\030\007\061\010\073" +
    "\013\076\027\060\030\102\031\100\032\062\033\056\034" +
    "\103\043\057\056\070\001\002\000\004\002\266\001\002" +
    "\000\012\027\252\052\247\060\uffef\063\250\001\002\000" +
    "\030\007\061\010\073\013\076\027\060\030\102\031\100" +
    "\032\062\033\056\034\103\043\057\056\070\001\002\000" +
    "\044\002\ufff7\004\ufff7\005\ufff7\006\ufff7\011\ufff7\012\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\054\ufff7\001\002\000\044" +
    "\002\uffff\004\005\005\031\006\010\011\021\012\022\015" +
    "\011\016\014\017\006\021\030\022\035\023\uffff\024\004" +
    "\025\025\026\027\027\013\054\uffff\001\002\000\044\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\011\ufff9\012\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\054\ufff9\001\002\000\044\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\011\ufffe\012\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\054\ufffe\001\002\000\004\027\uffe2\001" +
    "\002\000\004\044\232\001\002\000\044\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\054\ufff6\001\002\000\044\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\011\ufffd\012\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\054\ufffd\001\002\000\016\004\045\005\041\006\044" +
    "\011\043\012\037\027\042\001\002\000\004\027\221\001" +
    "\002\000\004\027\206\001\002\000\004\027\177\001\002" +
    "\000\004\027\uffe4\001\002\000\044\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\054\ufff5\001\002\000\044\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\011\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\054\ufffa\001\002\000\044\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\011\ufffb\012\ufffb\015\ufffb\016\ufffb\017\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\054" +
    "\ufffb\001\002\000\016\004\045\005\041\006\044\011\043" +
    "\012\037\027\042\001\002\000\044\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\011\ufffc\012\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\054\ufffc\001\002\000\004\044\174\001\002\000\004" +
    "\027\046\001\002\000\006\027\uffea\045\uffea\001\002\000" +
    "\006\027\uffe6\045\uffe6\001\002\000\006\027\uffe8\045\uffe8" +
    "\001\002\000\006\027\uffe9\045\uffe9\001\002\000\006\027" +
    "\uffeb\045\uffeb\001\002\000\004\056\047\001\002\000\020" +
    "\004\045\005\041\006\044\011\043\012\037\027\042\057" +
    "\uffd9\001\002\000\004\027\166\001\002\000\004\057\052" +
    "\001\002\000\004\053\053\001\002\000\040\004\005\005" +
    "\031\006\010\011\021\012\022\015\011\016\014\017\006" +
    "\021\030\022\035\023\uffff\024\004\025\025\026\027\027" +
    "\013\001\002\000\004\023\055\001\002\000\030\007\061" +
    "\010\073\013\076\027\060\030\102\031\100\032\062\033" +
    "\056\034\103\043\057\056\070\001\002\000\020\007\061" +
    "\010\073\027\060\030\102\031\100\032\062\056\070\001" +
    "\002\000\026\007\061\010\073\027\060\030\102\031\100" +
    "\032\062\033\056\034\103\043\057\056\070\001\002\000" +
    "\054\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\057\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\001\002\000\054\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\057\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002" +
    "\000\054\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\057\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\001\002\000\054\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001" +
    "\002\000\054\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\057\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\001\002\000\054\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052" +
    "\157\053\uffb1\057\uffb1\061\uffb1\062\uffb1\063\156\064\uffb1" +
    "\001\002\000\004\062\154\001\002\000\050\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053" +
    "\uffb3\057\uffb3\061\uffb3\062\uffb3\064\uffb3\001\002\000\026" +
    "\007\061\010\073\027\060\030\102\031\100\032\062\033" +
    "\056\034\103\043\057\056\070\001\002\000\050\033\uffb8" +
    "\034\uffb8\035\140\036\136\037\141\040\137\041\uffb8\042" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\053\uffb8\057\uffb8\061\uffb8\062\uffb8\064\uffb8\001\002\000" +
    "\040\033\126\034\122\041\uffbb\042\uffbb\044\130\045\131" +
    "\046\124\047\123\050\125\051\127\053\uffbb\057\uffbb\061" +
    "\uffbb\062\uffbb\064\uffbb\001\002\000\054\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\057\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001" +
    "\002\000\020\041\120\042\uffc2\053\uffc2\057\uffc2\061\uffc2" +
    "\062\uffc2\064\uffc2\001\002\000\016\042\116\053\uffc4\057" +
    "\uffc4\061\uffc4\062\uffc4\064\uffc4\001\002\000\004\056\105" +
    "\001\002\000\006\053\uffc7\062\uffc7\001\002\000\054\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\057\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\001\002\000\006\053\uffc6\062\uffc6\001\002\000" +
    "\054\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\057\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\001\002\000\020\007\061\010\073\027" +
    "\060\030\102\031\100\032\062\056\070\001\002\000\054" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\057\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\001\002\000\030\007\061\010\073\013\076" +
    "\027\060\030\102\031\100\032\062\033\056\034\103\043" +
    "\057\056\070\001\002\000\004\061\113\001\002\000\004" +
    "\061\110\001\002\000\026\007\061\010\073\027\060\030" +
    "\102\031\100\032\062\033\056\034\103\043\057\056\070" +
    "\001\002\000\004\057\112\001\002\000\010\053\uffa2\061" +
    "\uffa2\062\uffa2\001\002\000\026\007\061\010\073\027\060" +
    "\030\102\031\100\032\062\033\056\034\103\043\057\056" +
    "\070\001\002\000\004\057\115\001\002\000\010\053\uffa1" +
    "\061\uffa1\062\uffa1\001\002\000\026\007\061\010\073\027" +
    "\060\030\102\031\100\032\062\033\056\034\103\043\057" +
    "\056\070\001\002\000\014\053\uffc5\057\uffc5\061\uffc5\062" +
    "\uffc5\064\uffc5\001\002\000\026\007\061\010\073\027\060" +
    "\030\102\031\100\032\062\033\056\034\103\043\057\056" +
    "\070\001\002\000\016\042\uffc3\053\uffc3\057\uffc3\061\uffc3" +
    "\062\uffc3\064\uffc3\001\002\000\026\007\061\010\073\027" +
    "\060\030\102\031\100\032\062\033\056\034\103\043\057" +
    "\056\070\001\002\000\026\007\061\010\073\027\060\030" +
    "\102\031\100\032\062\033\056\034\103\043\057\056\070" +
    "\001\002\000\026\007\061\010\073\027\060\030\102\031" +
    "\100\032\062\033\056\034\103\043\057\056\070\001\002" +
    "\000\026\007\061\010\073\027\060\030\102\031\100\032" +
    "\062\033\056\034\103\043\057\056\070\001\002\000\026" +
    "\007\061\010\073\027\060\030\102\031\100\032\062\033" +
    "\056\034\103\043\057\056\070\001\002\000\026\007\061" +
    "\010\073\027\060\030\102\031\100\032\062\033\056\034" +
    "\103\043\057\056\070\001\002\000\026\007\061\010\073" +
    "\027\060\030\102\031\100\032\062\033\056\034\103\043" +
    "\057\056\070\001\002\000\026\007\061\010\073\027\060" +
    "\030\102\031\100\032\062\033\056\034\103\043\057\056" +
    "\070\001\002\000\024\033\126\034\122\041\uffc0\042\uffc0" +
    "\053\uffc0\057\uffc0\061\uffc0\062\uffc0\064\uffc0\001\002\000" +
    "\024\033\126\034\122\041\uffbf\042\uffbf\053\uffbf\057\uffbf" +
    "\061\uffbf\062\uffbf\064\uffbf\001\002\000\024\033\126\034" +
    "\122\041\uffbc\042\uffbc\053\uffbc\057\uffbc\061\uffbc\062\uffbc" +
    "\064\uffbc\001\002\000\050\033\uffba\034\uffba\035\140\036" +
    "\136\037\141\040\137\041\uffba\042\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\053\uffba\057\uffba\061" +
    "\uffba\062\uffba\064\uffba\001\002\000\026\007\061\010\073" +
    "\027\060\030\102\031\100\032\062\033\056\034\103\043" +
    "\057\056\070\001\002\000\026\007\061\010\073\027\060" +
    "\030\102\031\100\032\062\033\056\034\103\043\057\056" +
    "\070\001\002\000\026\007\061\010\073\027\060\030\102" +
    "\031\100\032\062\033\056\034\103\043\057\056\070\001" +
    "\002\000\026\007\061\010\073\027\060\030\102\031\100" +
    "\032\062\033\056\034\103\043\057\056\070\001\002\000" +
    "\050\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\053\uffb6\057\uffb6\061\uffb6\062\uffb6\064\uffb6" +
    "\001\002\000\050\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\053\uffb7\057\uffb7\061\uffb7\062" +
    "\uffb7\064\uffb7\001\002\000\050\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\057\uffb4" +
    "\061\uffb4\062\uffb4\064\uffb4\001\002\000\050\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\053" +
    "\uffb5\057\uffb5\061\uffb5\062\uffb5\064\uffb5\001\002\000\024" +
    "\033\126\034\122\041\uffc1\042\uffc1\053\uffc1\057\uffc1\061" +
    "\uffc1\062\uffc1\064\uffc1\001\002\000\024\033\126\034\122" +
    "\041\uffbd\042\uffbd\053\uffbd\057\uffbd\061\uffbd\062\uffbd\064" +
    "\uffbd\001\002\000\024\033\126\034\122\041\uffbe\042\uffbe" +
    "\053\uffbe\057\uffbe\061\uffbe\062\uffbe\064\uffbe\001\002\000" +
    "\050\033\uffb9\034\uffb9\035\140\036\136\037\141\040\137" +
    "\041\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\053\uffb9\057\uffb9\061\uffb9\062\uffb9\064\uffb9" +
    "\001\002\000\004\057\153\001\002\000\054\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\057\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\001\002\000\004\054\155\001\002\000\044\002\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\011\uffdb\012\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\054\uffdb\001\002\000\026\007\061\010\073" +
    "\027\060\030\102\031\100\032\062\033\056\034\103\043" +
    "\057\056\070\001\002\000\006\014\161\027\160\001\002" +
    "\000\054\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\057\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\001\002\000\054\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\057\uffae\061\uffae\062\uffae\063\uffae\064\uffae\001" +
    "\002\000\004\064\163\001\002\000\054\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\057\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001" +
    "\002\000\050\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\053\uffb2\057\uffb2\061\uffb2\062\uffb2" +
    "\064\uffb2\001\002\000\054\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\057" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\001\002\000\006" +
    "\057\uffd7\061\167\001\002\000\016\004\045\005\041\006" +
    "\044\011\043\012\037\027\042\001\002\000\004\057\uffda" +
    "\001\002\000\004\027\172\001\002\000\006\057\uffd7\061" +
    "\167\001\002\000\004\057\uffd8\001\002\000\016\004\045" +
    "\005\041\006\044\011\043\012\037\027\042\001\002\000" +
    "\004\045\176\001\002\000\006\027\uffe7\045\uffe7\001\002" +
    "\000\004\056\200\001\002\000\020\004\045\005\041\006" +
    "\044\011\043\012\037\027\042\057\uffd9\001\002\000\004" +
    "\057\202\001\002\000\004\053\203\001\002\000\040\004" +
    "\005\005\031\006\010\011\021\012\022\015\011\016\014" +
    "\017\006\021\030\022\035\024\004\025\025\026\027\027" +
    "\013\054\uffff\001\002\000\004\054\205\001\002\000\044" +
    "\002\uffd6\004\uffd6\005\uffd6\006\uffd6\011\uffd6\012\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\054\uffd6\001\002\000\004\060" +
    "\207\001\002\000\004\053\210\001\002\000\006\027\211" +
    "\054\uffcb\001\002\000\006\054\uffc9\055\215\001\002\000" +
    "\004\054\213\001\002\000\004\062\214\001\002\000\044" +
    "\002\uffcd\004\uffcd\005\uffcd\006\uffcd\011\uffcd\012\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\054\uffcd\001\002\000\004\027" +
    "\217\001\002\000\004\054\uffcc\001\002\000\006\054\uffc9" +
    "\055\215\001\002\000\004\054\uffca\001\002\000\006\060" +
    "\224\062\222\001\002\000\044\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\054\uffed\001\002\000\044\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\011\uffee\012\uffee\015\uffee\016\uffee\017\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\054" +
    "\uffee\001\002\000\030\007\061\010\073\013\076\027\060" +
    "\030\102\031\100\032\062\033\056\034\103\043\057\056" +
    "\070\001\002\000\004\062\226\001\002\000\044\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\011\uffec\012\uffec\015\uffec\016" +
    "\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\054\uffec\001\002\000\004\027\230\001" +
    "\002\000\004\062\231\001\002\000\044\002\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\011\uffc8\012\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\054\uffc8\001\002\000\016\004\045\005\041\006" +
    "\044\011\043\012\037\027\042\001\002\000\004\045\234" +
    "\001\002\000\004\027\uffe1\001\002\000\010\002\001\023" +
    "\001\054\001\001\002\000\004\053\237\001\002\000\040" +
    "\004\005\005\031\006\010\011\021\012\022\015\011\016" +
    "\014\017\006\021\030\022\035\024\004\025\025\026\027" +
    "\027\013\054\uffff\001\002\000\004\054\241\001\002\000" +
    "\046\002\uffde\004\uffde\005\uffde\006\uffde\011\uffde\012\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\242\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\054\uffde\001\002" +
    "\000\004\053\244\001\002\000\044\002\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\054\uffe0\001\002\000\040\004\005\005\031\006\010" +
    "\011\021\012\022\015\011\016\014\017\006\021\030\022" +
    "\035\024\004\025\025\026\027\027\013\054\uffff\001\002" +
    "\000\004\054\246\001\002\000\044\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\054\uffdf\001\002\000\004\027\264\001\002\000\026" +
    "\007\061\010\073\027\060\030\102\031\100\032\062\033" +
    "\056\034\103\043\057\056\070\001\002\000\004\060\255" +
    "\001\002\000\006\060\224\062\222\001\002\000\044\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\011\ufff4\012\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\054\ufff4\001\002\000\044\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\011\ufff3\012\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\054\ufff3\001\002\000\030\007\061\010" +
    "\073\013\076\027\060\030\102\031\100\032\062\033\056" +
    "\034\103\043\057\056\070\001\002\000\044\002\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\011\ufff2\012\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\054\ufff2\001\002\000\004\062\260\001\002" +
    "\000\044\002\uffdc\004\uffdc\005\uffdc\006\uffdc\011\uffdc\012" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\054\uffdc\001\002\000" +
    "\004\064\262\001\002\000\010\052\247\060\uffef\063\250" +
    "\001\002\000\004\060\ufff1\001\002\000\010\052\247\060" +
    "\uffef\063\250\001\002\000\004\060\ufff0\001\002\000\004" +
    "\002\000\001\002\000\004\053\270\001\002\000\040\004" +
    "\005\005\031\006\010\011\021\012\022\015\011\016\014" +
    "\017\006\021\030\022\035\024\004\025\025\026\027\027" +
    "\013\054\uffff\001\002\000\004\054\272\001\002\000\044" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\011\uffdd\012\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\054\uffdd\001\002\000\004\056" +
    "\274\001\002\000\006\027\276\057\uffd3\001\002\000\004" +
    "\057\303\001\002\000\006\057\uffd1\061\277\001\002\000" +
    "\004\027\301\001\002\000\004\057\uffd4\001\002\000\006" +
    "\057\uffd1\061\277\001\002\000\004\057\uffd2\001\002\000" +
    "\004\062\304\001\002\000\044\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\011\uffd5\012\uffd5\015\uffd5\016\uffd5\017\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\054\uffd5\001\002\000\004\053\306\001\002\000\004\054" +
    "\uffce\001\002\000\004\054\312\001\002\000\004\054\uffce" +
    "\001\002\000\004\054\uffcf\001\002\000\044\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\011\uffd0\012\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\054\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\034\002\011\003\015\004\033\006\023\011" +
    "\025\012\017\014\035\016\032\021\016\022\031\025\006" +
    "\026\014\031\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\032\266\033\076\034\074\035\073\036\071\037" +
    "\070\040\066\041\064\042\063\043\062\044\100\001\001" +
    "\000\002\001\001\000\006\005\252\047\250\001\001\000" +
    "\030\032\235\033\076\034\074\035\073\036\071\037\070" +
    "\040\066\041\064\042\063\043\062\044\100\001\001\000" +
    "\002\001\001\000\034\002\234\003\015\004\033\006\023" +
    "\011\025\012\017\014\035\016\032\021\016\022\031\025" +
    "\006\026\014\031\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\047\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\053\003\015\004\033\006\023\011\025\012\017\014\035" +
    "\016\032\021\016\022\031\025\006\026\014\031\022\001" +
    "\001\000\002\001\001\000\030\032\065\033\076\034\074" +
    "\035\073\036\071\037\070\040\066\041\064\042\063\043" +
    "\062\044\100\001\001\000\004\043\164\001\001\000\012" +
    "\040\163\041\064\042\063\043\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\033\151\034\074\035\073\036\071" +
    "\037\070\040\066\041\064\042\063\043\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\103\001\001\000\002\001\001\000\026\033" +
    "\105\034\074\035\073\036\071\037\070\040\066\041\064" +
    "\042\063\043\062\044\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\033\110\034\074\035\073\036\071" +
    "\037\070\040\066\041\064\042\063\043\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\113\034\074" +
    "\035\073\036\071\037\070\040\066\041\064\042\063\043" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\033\116\034\074\035\073\036\071\037\070\040\066\041" +
    "\064\042\063\043\062\001\001\000\002\001\001\000\022" +
    "\034\120\035\073\036\071\037\070\040\066\041\064\042" +
    "\063\043\062\001\001\000\002\001\001\000\014\037\150" +
    "\040\066\041\064\042\063\043\062\001\001\000\016\036" +
    "\147\037\070\040\066\041\064\042\063\043\062\001\001" +
    "\000\016\036\146\037\070\040\066\041\064\042\063\043" +
    "\062\001\001\000\016\036\145\037\070\040\066\041\064" +
    "\042\063\043\062\001\001\000\014\037\134\040\066\041" +
    "\064\042\063\043\062\001\001\000\016\036\133\037\070" +
    "\040\066\041\064\042\063\043\062\001\001\000\016\036" +
    "\132\037\070\040\066\041\064\042\063\043\062\001\001" +
    "\000\016\036\131\037\070\040\066\041\064\042\063\043" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\040\144\041\064\042" +
    "\063\043\062\001\001\000\012\040\143\041\064\042\063" +
    "\043\062\001\001\000\012\040\142\041\064\042\063\043" +
    "\062\001\001\000\012\040\141\041\064\042\063\043\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\033\161\034\074\035\073\036\071\037\070\040\066\041" +
    "\064\042\063\043\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\167" +
    "\001\001\000\004\010\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\172\001\001\000\002\001\001" +
    "\000\004\010\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\047\017\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\203\003" +
    "\015\004\033\006\023\011\025\012\017\014\035\016\032" +
    "\021\016\022\031\025\006\026\014\031\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\211\001\001\000\004\030\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\217\001" +
    "\001\000\002\001\001\000\004\007\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\032\224\033\076\034" +
    "\074\035\073\036\071\037\070\040\066\041\064\042\063" +
    "\043\062\044\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\237" +
    "\003\015\004\033\006\023\011\025\012\017\014\035\016" +
    "\032\021\016\022\031\025\006\026\014\031\022\001\001" +
    "\000\002\001\001\000\004\013\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\244\003\015\004\033" +
    "\006\023\011\025\012\017\014\035\016\032\021\016\022" +
    "\031\025\006\026\014\031\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\033\260\034" +
    "\074\035\073\036\071\037\070\040\066\041\064\042\063" +
    "\043\062\001\001\000\004\015\255\001\001\000\004\007" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\032\256\033\076\034\074\035\073\036\071\037\070\040" +
    "\066\041\064\042\063\043\062\044\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\262\001\001\000\002\001\001\000\004" +
    "\047\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\270\003\015\004\033\006\023" +
    "\011\025\012\017\014\035\016\032\021\016\022\031\025" +
    "\006\026\014\031\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\274\001\001\000" +
    "\002\001\001\000\004\024\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\307\046\306\001\001\000\002\001\001\000" +
    "\006\045\307\046\310\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= InsCond 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsBucle 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsIden 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsFun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsStruct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsEnum 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsTypeDef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InsIden ::= IDEN InsIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIden",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // InsIdenElige ::= IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsIdenElige ::= CorchetesPuntosIzq InsAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CorchetesPuntosIzq ::= CORCHETEAP Exp0 CORCHETECIERRE CorchetesPuntosIzq 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CorchetesPuntosIzq ::= PUNTO IDEN CorchetesPuntosIzq 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CorchetesPuntosIzq ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InsDec ::= TipoSinIden IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AsigDec ::= PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AsigDec ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TipoSinIden ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TipoSinIden ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TipoSinIden ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TipoSinIden ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TipoSinIden ::= VECTOR MENOR Tipo MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InsCond ::= IF Exp LLAVESAP P LLAVESCIERRE ConElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConElse ::= ELSE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConElse ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InsBucle ::= WHILE Exp LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InsAsig ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InsFun ::= FUN Tipo IDEN PAP Param PCIERRE LLAVESAP P RETURN Exp PUNTOYCOMA LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Param ::= Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParamElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InsProc ::= PROC IDEN PAP Param PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InsCall ::= CALL IDEN PAP LIden PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LIden ::= IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LIden ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LIdenElige ::= COMA IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LIdenElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LDec ::= DecConNuevosTipos LDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LEnum ::= IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LEnum ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LEnumElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp ::= Exp0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp ::= CreaVector 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp0 ::= Exp1 OR Exp0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp0 ::= Exp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp1 ::= Exp2 AND Exp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp1 ::= Exp2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp2 ::= Exp3 MENOR Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp3 ::= Exp3 SUMA Exp4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp3 ::= Exp3 RESTA Exp4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp3 ::= Exp4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp4 ::= Exp4 MUL Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp4 ::= Exp4 MODULO Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp4 ::= Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp5 ::= NOT Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp5 ::= Exp6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp6 ::= Exp7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp7 ::= RESTA Exp8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp7 ::= SUMA Exp8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp7 ::= Exp8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp8 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp8 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp8 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp8 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp8 ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp8 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

