
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 05 19:55:08 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 05 19:55:08 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\004\000\002\005\004\000\002\005" +
    "\003\000\002\006\005\000\002\007\003\000\002\007\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\006\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\006\000\002\012\010\000\002\013\006" +
    "\000\002\013\002\000\002\014\007\000\002\015\005\000" +
    "\002\016\015\000\002\017\005\000\002\017\002\000\002" +
    "\020\006\000\002\020\002\000\002\021\012\000\002\022" +
    "\010\000\002\023\004\000\002\023\002\000\002\024\005" +
    "\000\002\024\002\000\002\025\007\000\002\046\004\000" +
    "\002\046\002\000\002\026\011\000\002\027\004\000\002" +
    "\027\002\000\002\030\005\000\002\030\002\000\002\031" +
    "\006\000\002\032\003\000\002\032\003\000\002\033\005" +
    "\000\002\033\003\000\002\034\005\000\002\034\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\003\000\002\040\004\000\002" +
    "\040\003\000\002\041\006\000\002\041\005\000\002\041" +
    "\005\000\002\041\003\000\002\042\004\000\002\042\004" +
    "\000\002\042\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\005\000\002\044\010\000\002\044" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\040\002\uffff\004\005\005\031\006\006\011" +
    "\021\012\022\015\011\016\014\017\010\021\030\022\035" +
    "\024\004\025\025\026\026\027\013\001\002\000\004\027" +
    "\274\001\002\000\004\027\uffe8\001\002\000\004\027\uffe6" +
    "\001\002\000\044\002\ufff8\004\ufff8\005\ufff8\006\ufff8\011" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\054\ufff8\001" +
    "\002\000\004\027\262\001\002\000\030\007\061\010\073" +
    "\013\076\027\060\030\101\031\100\032\062\033\056\034" +
    "\103\043\057\056\071\001\002\000\004\002\255\001\002" +
    "\000\006\027\247\060\246\001\002\000\030\007\061\010" +
    "\073\013\076\027\060\030\101\031\100\032\062\033\056" +
    "\034\103\043\057\056\071\001\002\000\044\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\011\ufff7\012\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\054\ufff7\001\002\000\044\002\uffff\004\005" +
    "\005\031\006\006\011\021\012\022\015\011\016\014\017" +
    "\010\021\030\022\035\023\uffff\024\004\025\025\026\026" +
    "\027\013\054\uffff\001\002\000\044\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\011\ufff9\012\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\054\ufff9\001\002\000\044\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\011\ufffe\012\ufffe\015\ufffe\016\ufffe\017\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\054\ufffe\001\002\000\004\027\uffe5\001\002\000\004\044" +
    "\231\001\002\000\044\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\011\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\054\ufff6" +
    "\001\002\000\044\002\ufffd\004\ufffd\005\ufffd\006\ufffd\011" +
    "\ufffd\012\ufffd\015\ufffd\016\ufffd\017\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\054\ufffd\001" +
    "\002\000\016\004\045\005\041\006\044\011\043\012\037" +
    "\027\042\001\002\000\004\027\213\001\002\000\004\027" +
    "\205\001\002\000\004\027\176\001\002\000\004\027\uffe7" +
    "\001\002\000\044\002\ufff5\004\ufff5\005\ufff5\006\ufff5\011" +
    "\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\054\ufff5\001" +
    "\002\000\044\002\ufffa\004\ufffa\005\ufffa\006\ufffa\011\ufffa" +
    "\012\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\054\ufffa\001\002" +
    "\000\044\002\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\012" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\054\ufffb\001\002\000" +
    "\016\004\045\005\041\006\044\011\043\012\037\027\042" +
    "\001\002\000\044\002\ufffc\004\ufffc\005\ufffc\006\ufffc\011" +
    "\ufffc\012\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\054\ufffc\001" +
    "\002\000\004\044\173\001\002\000\004\027\046\001\002" +
    "\000\006\027\uffed\045\uffed\001\002\000\006\027\uffe9\045" +
    "\uffe9\001\002\000\006\027\uffeb\045\uffeb\001\002\000\006" +
    "\027\uffec\045\uffec\001\002\000\006\027\uffee\045\uffee\001" +
    "\002\000\004\056\047\001\002\000\020\004\045\005\041" +
    "\006\044\011\043\012\037\027\042\057\uffdc\001\002\000" +
    "\004\027\165\001\002\000\004\057\052\001\002\000\004" +
    "\053\053\001\002\000\040\004\005\005\031\006\006\011" +
    "\021\012\022\015\011\016\014\017\010\021\030\022\035" +
    "\023\uffff\024\004\025\025\026\026\027\013\001\002\000" +
    "\004\023\055\001\002\000\030\007\061\010\073\013\076" +
    "\027\060\030\101\031\100\032\062\033\056\034\103\043" +
    "\057\056\071\001\002\000\020\007\061\010\073\027\060" +
    "\030\101\031\100\032\062\056\071\001\002\000\026\007" +
    "\061\010\073\027\060\030\101\031\100\032\062\033\056" +
    "\034\103\043\057\056\071\001\002\000\056\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\057\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\001\002\000\056\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002" +
    "\000\056\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8\061" +
    "\uffa8\062\uffa8\063\uffa8\064\uffa8\001\002\000\056\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\057\uffad\061\uffad\062\uffad\063" +
    "\uffad\064\uffad\001\002\000\056\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\057\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001" +
    "\002\000\056\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\156\053\uffb4\054\uffb4\057\uffb4" +
    "\061\uffb4\062\uffb4\063\155\064\uffb4\001\002\000\004\054" +
    "\154\001\002\000\052\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\057\uffb6" +
    "\061\uffb6\062\uffb6\064\uffb6\001\002\000\052\033\uffbb\034" +
    "\uffbb\035\140\036\136\037\141\040\137\041\uffbb\042\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\053" +
    "\uffbb\054\uffbb\057\uffbb\061\uffbb\062\uffbb\064\uffbb\001\002" +
    "\000\026\007\061\010\073\027\060\030\101\031\100\032" +
    "\062\033\056\034\103\043\057\056\071\001\002\000\042" +
    "\033\126\034\122\041\uffbe\042\uffbe\044\130\045\131\046" +
    "\124\047\123\050\125\051\127\053\uffbe\054\uffbe\057\uffbe" +
    "\061\uffbe\062\uffbe\064\uffbe\001\002\000\056\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\057\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\001\002\000\022\041\120\042\uffc5\053\uffc5\054" +
    "\uffc5\057\uffc5\061\uffc5\062\uffc5\064\uffc5\001\002\000\020" +
    "\042\116\053\uffc7\054\uffc7\057\uffc7\061\uffc7\062\uffc7\064" +
    "\uffc7\001\002\000\004\056\105\001\002\000\010\053\uffca" +
    "\054\uffca\062\uffca\001\002\000\056\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\057\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\001\002\000\056\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\057" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\001\002\000\010" +
    "\053\uffc9\054\uffc9\062\uffc9\001\002\000\020\007\061\010" +
    "\073\027\060\030\101\031\100\032\062\056\071\001\002" +
    "\000\056\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\057\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\001\002\000\030\007\061" +
    "\010\073\013\076\027\060\030\101\031\100\032\062\033" +
    "\056\034\103\043\057\056\071\001\002\000\004\061\113" +
    "\001\002\000\004\061\110\001\002\000\026\007\061\010" +
    "\073\027\060\030\101\031\100\032\062\033\056\034\103" +
    "\043\057\056\071\001\002\000\004\057\112\001\002\000" +
    "\012\053\uffa5\054\uffa5\061\uffa5\062\uffa5\001\002\000\026" +
    "\007\061\010\073\027\060\030\101\031\100\032\062\033" +
    "\056\034\103\043\057\056\071\001\002\000\004\057\115" +
    "\001\002\000\012\053\uffa4\054\uffa4\061\uffa4\062\uffa4\001" +
    "\002\000\026\007\061\010\073\027\060\030\101\031\100" +
    "\032\062\033\056\034\103\043\057\056\071\001\002\000" +
    "\016\053\uffc8\054\uffc8\057\uffc8\061\uffc8\062\uffc8\064\uffc8" +
    "\001\002\000\026\007\061\010\073\027\060\030\101\031" +
    "\100\032\062\033\056\034\103\043\057\056\071\001\002" +
    "\000\020\042\uffc6\053\uffc6\054\uffc6\057\uffc6\061\uffc6\062" +
    "\uffc6\064\uffc6\001\002\000\026\007\061\010\073\027\060" +
    "\030\101\031\100\032\062\033\056\034\103\043\057\056" +
    "\071\001\002\000\026\007\061\010\073\027\060\030\101" +
    "\031\100\032\062\033\056\034\103\043\057\056\071\001" +
    "\002\000\026\007\061\010\073\027\060\030\101\031\100" +
    "\032\062\033\056\034\103\043\057\056\071\001\002\000" +
    "\026\007\061\010\073\027\060\030\101\031\100\032\062" +
    "\033\056\034\103\043\057\056\071\001\002\000\026\007" +
    "\061\010\073\027\060\030\101\031\100\032\062\033\056" +
    "\034\103\043\057\056\071\001\002\000\026\007\061\010" +
    "\073\027\060\030\101\031\100\032\062\033\056\034\103" +
    "\043\057\056\071\001\002\000\026\007\061\010\073\027" +
    "\060\030\101\031\100\032\062\033\056\034\103\043\057" +
    "\056\071\001\002\000\026\007\061\010\073\027\060\030" +
    "\101\031\100\032\062\033\056\034\103\043\057\056\071" +
    "\001\002\000\026\033\126\034\122\041\uffc3\042\uffc3\053" +
    "\uffc3\054\uffc3\057\uffc3\061\uffc3\062\uffc3\064\uffc3\001\002" +
    "\000\026\033\126\034\122\041\uffc2\042\uffc2\053\uffc2\054" +
    "\uffc2\057\uffc2\061\uffc2\062\uffc2\064\uffc2\001\002\000\026" +
    "\033\126\034\122\041\uffbf\042\uffbf\053\uffbf\054\uffbf\057" +
    "\uffbf\061\uffbf\062\uffbf\064\uffbf\001\002\000\052\033\uffbd" +
    "\034\uffbd\035\140\036\136\037\141\040\137\041\uffbd\042" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\053\uffbd\054\uffbd\057\uffbd\061\uffbd\062\uffbd\064\uffbd\001" +
    "\002\000\026\007\061\010\073\027\060\030\101\031\100" +
    "\032\062\033\056\034\103\043\057\056\071\001\002\000" +
    "\026\007\061\010\073\027\060\030\101\031\100\032\062" +
    "\033\056\034\103\043\057\056\071\001\002\000\026\007" +
    "\061\010\073\027\060\030\101\031\100\032\062\033\056" +
    "\034\103\043\057\056\071\001\002\000\026\007\061\010" +
    "\073\027\060\030\101\031\100\032\062\033\056\034\103" +
    "\043\057\056\071\001\002\000\052\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054" +
    "\uffb9\057\uffb9\061\uffb9\062\uffb9\064\uffb9\001\002\000\052" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\053\uffba\054\uffba\057\uffba\061\uffba\062\uffba\064" +
    "\uffba\001\002\000\052\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7\057\uffb7" +
    "\061\uffb7\062\uffb7\064\uffb7\001\002\000\052\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\053" +
    "\uffb8\054\uffb8\057\uffb8\061\uffb8\062\uffb8\064\uffb8\001\002" +
    "\000\026\033\126\034\122\041\uffc4\042\uffc4\053\uffc4\054" +
    "\uffc4\057\uffc4\061\uffc4\062\uffc4\064\uffc4\001\002\000\026" +
    "\033\126\034\122\041\uffc0\042\uffc0\053\uffc0\054\uffc0\057" +
    "\uffc0\061\uffc0\062\uffc0\064\uffc0\001\002\000\026\033\126" +
    "\034\122\041\uffc1\042\uffc1\053\uffc1\054\uffc1\057\uffc1\061" +
    "\uffc1\062\uffc1\064\uffc1\001\002\000\052\033\uffbc\034\uffbc" +
    "\035\140\036\136\037\141\040\137\041\uffbc\042\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\053\uffbc" +
    "\054\uffbc\057\uffbc\061\uffbc\062\uffbc\064\uffbc\001\002\000" +
    "\004\057\153\001\002\000\056\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\057\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001" +
    "\002\000\044\002\uffde\004\uffde\005\uffde\006\uffde\011\uffde" +
    "\012\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\054\uffde\001\002" +
    "\000\026\007\061\010\073\027\060\030\101\031\100\032" +
    "\062\033\056\034\103\043\057\056\071\001\002\000\006" +
    "\014\160\027\157\001\002\000\056\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\057\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\001\002\000\056\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\057" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000\004" +
    "\064\162\001\002\000\056\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\057\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\001\002" +
    "\000\052\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\053\uffb5\054\uffb5\057\uffb5\061\uffb5\062" +
    "\uffb5\064\uffb5\001\002\000\056\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\057\uffae\061\uffae\062\uffae\063\uffae\064\uffae\001" +
    "\002\000\006\057\uffda\061\166\001\002\000\016\004\045" +
    "\005\041\006\044\011\043\012\037\027\042\001\002\000" +
    "\004\057\uffdd\001\002\000\004\027\171\001\002\000\006" +
    "\057\uffda\061\166\001\002\000\004\057\uffdb\001\002\000" +
    "\016\004\045\005\041\006\044\011\043\012\037\027\042" +
    "\001\002\000\004\045\175\001\002\000\006\027\uffea\045" +
    "\uffea\001\002\000\004\056\177\001\002\000\020\004\045" +
    "\005\041\006\044\011\043\012\037\027\042\057\uffdc\001" +
    "\002\000\004\057\201\001\002\000\004\053\202\001\002" +
    "\000\040\004\005\005\031\006\006\011\021\012\022\015" +
    "\011\016\014\017\010\021\030\022\035\024\004\025\025" +
    "\026\026\027\013\054\uffff\001\002\000\004\054\204\001" +
    "\002\000\044\002\uffd9\004\uffd9\005\uffd9\006\uffd9\011\uffd9" +
    "\012\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\054\uffd9\001\002" +
    "\000\006\060\210\062\206\001\002\000\044\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\054\ufff0\001\002\000\044\002\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\011\ufff1\012\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\054\ufff1\001\002\000\030\007\061\010\073\013" +
    "\076\027\060\030\101\031\100\032\062\033\056\034\103" +
    "\043\057\056\071\001\002\000\004\062\212\001\002\000" +
    "\044\002\uffef\004\uffef\005\uffef\006\uffef\011\uffef\012\uffef" +
    "\015\uffef\016\uffef\017\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\054\uffef\001\002\000\004" +
    "\060\214\001\002\000\004\053\215\001\002\000\006\027" +
    "\216\054\uffce\001\002\000\006\054\uffcc\055\222\001\002" +
    "\000\004\054\220\001\002\000\004\062\221\001\002\000" +
    "\044\002\uffd0\004\uffd0\005\uffd0\006\uffd0\011\uffd0\012\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\054\uffd0\001\002\000\004" +
    "\027\224\001\002\000\004\054\uffcf\001\002\000\006\054" +
    "\uffcc\055\222\001\002\000\004\054\uffcd\001\002\000\004" +
    "\027\227\001\002\000\004\062\230\001\002\000\044\002" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\011\uffcb\012\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\054\uffcb\001\002\000\016\004\045" +
    "\005\041\006\044\011\043\012\037\027\042\001\002\000" +
    "\004\045\233\001\002\000\004\027\uffe4\001\002\000\010" +
    "\002\001\023\001\054\001\001\002\000\004\053\236\001" +
    "\002\000\040\004\005\005\031\006\006\011\021\012\022" +
    "\015\011\016\014\017\010\021\030\022\035\024\004\025" +
    "\025\026\026\027\013\054\uffff\001\002\000\004\054\240" +
    "\001\002\000\046\002\uffe1\004\uffe1\005\uffe1\006\uffe1\011" +
    "\uffe1\012\uffe1\015\uffe1\016\uffe1\017\uffe1\020\241\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\054" +
    "\uffe1\001\002\000\004\053\243\001\002\000\044\002\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\011\uffe3\012\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\054\uffe3\001\002\000\040\004\005\005" +
    "\031\006\006\011\021\012\022\015\011\016\014\017\010" +
    "\021\030\022\035\024\004\025\025\026\026\027\013\054" +
    "\uffff\001\002\000\004\054\245\001\002\000\044\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\011\uffe2\012\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\054\uffe2\001\002\000\030\007\061\010" +
    "\073\013\076\027\060\030\101\031\100\032\062\033\056" +
    "\034\103\043\057\056\071\001\002\000\006\060\210\062" +
    "\206\001\002\000\044\002\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\011\ufff2\012\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\054\ufff2" +
    "\001\002\000\044\002\ufff4\004\ufff4\005\ufff4\006\ufff4\011" +
    "\ufff4\012\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\054\ufff4\001" +
    "\002\000\044\002\ufff3\004\ufff3\005\ufff3\006\ufff3\011\ufff3" +
    "\012\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\054\ufff3\001\002" +
    "\000\004\062\254\001\002\000\044\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\054\uffdf\001\002\000\004\002\000\001\002\000\004" +
    "\053\257\001\002\000\040\004\005\005\031\006\006\011" +
    "\021\012\022\015\011\016\014\017\010\021\030\022\035" +
    "\024\004\025\025\026\026\027\013\054\uffff\001\002\000" +
    "\004\054\261\001\002\000\044\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\054\uffe0\001\002\000\004\056\263\001\002\000\006\027" +
    "\265\057\uffd6\001\002\000\004\057\272\001\002\000\006" +
    "\057\uffd4\061\266\001\002\000\004\027\270\001\002\000" +
    "\004\057\uffd7\001\002\000\006\057\uffd4\061\266\001\002" +
    "\000\004\057\uffd5\001\002\000\004\062\273\001\002\000" +
    "\044\002\uffd8\004\uffd8\005\uffd8\006\uffd8\011\uffd8\012\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\054\uffd8\001\002\000\004" +
    "\053\275\001\002\000\004\054\uffd1\001\002\000\004\054" +
    "\301\001\002\000\004\054\uffd1\001\002\000\004\054\uffd2" +
    "\001\002\000\044\002\uffd3\004\uffd3\005\uffd3\006\uffd3\011" +
    "\uffd3\012\uffd3\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\054\uffd3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\034\002\011\003\015\004\033\006\023\011" +
    "\026\012\017\014\035\016\032\021\016\022\031\025\006" +
    "\026\014\031\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\032\255\033\076\034\074\035\073\036\071\037" +
    "\067\040\066\041\064\042\063\043\062\044\101\001\001" +
    "\000\002\001\001\000\006\005\250\015\247\001\001\000" +
    "\030\032\234\033\076\034\074\035\073\036\071\037\067" +
    "\040\066\041\064\042\063\043\062\044\101\001\001\000" +
    "\002\001\001\000\034\002\233\003\015\004\033\006\023" +
    "\011\026\012\017\014\035\016\032\021\016\022\031\025" +
    "\006\026\014\031\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\047\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\053\003\015\004\033\006\023\011\026\012\017\014\035" +
    "\016\032\021\016\022\031\025\006\026\014\031\022\001" +
    "\001\000\002\001\001\000\030\032\065\033\076\034\074" +
    "\035\073\036\071\037\067\040\066\041\064\042\063\043" +
    "\062\044\101\001\001\000\004\043\163\001\001\000\012" +
    "\040\162\041\064\042\063\043\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\151\034\074" +
    "\035\073\036\071\037\067\040\066\041\064\042\063\043" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\103\001\001\000\002\001\001\000\026\033" +
    "\105\034\074\035\073\036\071\037\067\040\066\041\064" +
    "\042\063\043\062\044\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\033\110\034\074\035\073\036\071" +
    "\037\067\040\066\041\064\042\063\043\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\113\034\074" +
    "\035\073\036\071\037\067\040\066\041\064\042\063\043" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\033\116\034\074\035\073\036\071\037\067\040\066\041" +
    "\064\042\063\043\062\001\001\000\002\001\001\000\022" +
    "\034\120\035\073\036\071\037\067\040\066\041\064\042" +
    "\063\043\062\001\001\000\002\001\001\000\014\037\150" +
    "\040\066\041\064\042\063\043\062\001\001\000\016\036" +
    "\147\037\067\040\066\041\064\042\063\043\062\001\001" +
    "\000\016\036\146\037\067\040\066\041\064\042\063\043" +
    "\062\001\001\000\016\036\145\037\067\040\066\041\064" +
    "\042\063\043\062\001\001\000\014\037\134\040\066\041" +
    "\064\042\063\043\062\001\001\000\016\036\133\037\067" +
    "\040\066\041\064\042\063\043\062\001\001\000\016\036" +
    "\132\037\067\040\066\041\064\042\063\043\062\001\001" +
    "\000\016\036\131\037\067\040\066\041\064\042\063\043" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\040\144\041\064\042" +
    "\063\043\062\001\001\000\012\040\143\041\064\042\063" +
    "\043\062\001\001\000\012\040\142\041\064\042\063\043" +
    "\062\001\001\000\012\040\141\041\064\042\063\043\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\160\034\074" +
    "\035\073\036\071\037\067\040\066\041\064\042\063\043" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\166\001\001\000\004" +
    "\010\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\171\001\001\000\002\001\001\000\004\010\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\047\017\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\202\003\015\004\033\006" +
    "\023\011\026\012\017\014\035\016\032\021\016\022\031" +
    "\025\006\026\014\031\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\032\210\033\076\034\074\035" +
    "\073\036\071\037\067\040\066\041\064\042\063\043\062" +
    "\044\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\216\001\001" +
    "\000\004\030\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\236\003\015\004\033" +
    "\006\023\011\026\012\017\014\035\016\032\021\016\022" +
    "\031\025\006\026\014\031\022\001\001\000\002\001\001" +
    "\000\004\013\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\243\003\015\004\033\006\023\011\026" +
    "\012\017\014\035\016\032\021\016\022\031\025\006\026" +
    "\014\031\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\032\252\033\076\034\074\035\073\036\071\037" +
    "\067\040\066\041\064\042\063\043\062\044\101\001\001" +
    "\000\004\007\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\257\003" +
    "\015\004\033\006\023\011\026\012\017\014\035\016\032" +
    "\021\016\022\031\025\006\026\014\031\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\263\001\001\000\002\001\001\000\004\024\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\276\046\275\001\001" +
    "\000\002\001\001\000\006\045\276\046\277\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= InsCond 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsBucle 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsIden 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsFun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsStruct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsEnum 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsTypeDef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InsIden ::= IDEN InsIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIden",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // InsIdenElige ::= IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsIdenElige ::= InsAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsDec ::= TipoSinIden IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AsigDec ::= PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AsigDec ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TipoSinIden ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TipoSinIden ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TipoSinIden ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TipoSinIden ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TipoSinIden ::= VECTOR MENOR Tipo MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InsCond ::= IF Exp LLAVESAP P LLAVESCIERRE ConElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConElse ::= ELSE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ConElse ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InsBucle ::= WHILE Exp LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InsAsig ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InsFun ::= FUN Tipo IDEN PAP Param PCIERRE LLAVESAP P RETURN Exp LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Param ::= Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParamElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InsProc ::= PROC IDEN PAP Param PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InsCall ::= CALL IDEN PAP LIden PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LIden ::= IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LIden ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LIdenElige ::= COMA IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LIdenElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LDec ::= DecConNuevosTipos LDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LEnum ::= IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LEnum ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LEnumElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp ::= Exp0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp ::= CreaVector 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp0 ::= Exp1 OR Exp0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp0 ::= Exp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp1 ::= Exp2 AND Exp1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp1 ::= Exp2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp2 ::= Exp3 MENOR Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp2 ::= Exp3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp3 ::= Exp3 SUMA Exp4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp3 ::= Exp3 RESTA Exp4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp3 ::= Exp4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp4 ::= Exp4 MUL Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp4 ::= Exp4 MODULO Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp4 ::= Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp5 ::= NOT Exp5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp5 ::= Exp6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp6 ::= Exp7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp7 ::= RESTA Exp8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp7 ::= SUMA Exp8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp7 ::= Exp8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp8 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp8 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp8 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp8 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp8 ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp8 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

