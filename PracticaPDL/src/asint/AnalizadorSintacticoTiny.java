
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 08 19:46:18 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.E;
import ast.ASExp;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 08 19:46:18 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\004\000\002\006\004\000\002\006\004\000\002\035\006" +
    "\000\002\035\005\000\002\035\002\000\002\007\005\000" +
    "\002\010\003\000\002\010\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\006\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\006\000" +
    "\002\013\010\000\002\014\006\000\002\014\002\000\002" +
    "\015\007\000\002\015\014\000\002\041\003\000\002\041" +
    "\003\000\002\036\012\000\002\037\011\000\002\037\005" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\016\005\000\002\017\016\000\002\020\005\000\002\020" +
    "\002\000\002\021\006\000\002\021\002\000\002\022\012" +
    "\000\002\023\010\000\002\024\004\000\002\024\002\000" +
    "\002\025\005\000\002\025\002\000\002\026\007\000\002" +
    "\034\004\000\002\034\002\000\002\027\011\000\002\030" +
    "\004\000\002\030\002\000\002\031\005\000\002\031\002" +
    "\000\002\032\006\000\002\042\003\000\002\042\003\000" +
    "\002\043\005\000\002\043\003\000\002\044\005\000\002" +
    "\044\003\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\003\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\047\003\000\002\050" +
    "\004\000\002\050\003\000\002\051\006\000\002\051\005" +
    "\000\002\051\005\000\002\051\003\000\002\052\004\000" +
    "\002\052\004\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\005\000\002\054\010" +
    "\000\002\054\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\030\007\010\010\022\013\025\033\004\034" +
    "\032\043\005\056\017\067\007\070\031\071\027\072\011" +
    "\001\002\000\020\007\010\010\022\056\017\067\007\070" +
    "\031\071\027\072\011\001\002\000\026\007\010\010\022" +
    "\033\004\034\032\043\005\056\017\067\007\070\031\071" +
    "\027\072\011\001\002\000\004\002\111\001\002\000\052" +
    "\002\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\057\uff96\061\uff96\063\uff96\064" +
    "\uff96\001\002\000\052\002\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\057\uff99" +
    "\061\uff99\063\uff99\064\uff99\001\002\000\052\002\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\057\uff97\061\uff97\063\uff97\064\uff97\001\002" +
    "\000\052\002\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\057\uff9c\061\uff9c\063" +
    "\uff9c\064\uff9c\001\002\000\052\002\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\057\uff9f\061\uff9f\063\uff9f\064\uff9f\001\002\000\004\002" +
    "\001\001\002\000\052\002\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\103\057\uffa3" +
    "\061\uffa3\063\104\064\uffa3\001\002\000\046\002\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\057\uffa5\061\uffa5\064\uffa5\001\002\000\026\007\010" +
    "\010\022\033\004\034\032\043\005\056\017\067\007\070" +
    "\031\071\027\072\011\001\002\000\046\002\uffaa\033\uffaa" +
    "\034\uffaa\035\067\036\065\037\070\040\066\041\uffaa\042" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\057\uffaa\061\uffaa\064\uffaa\001\002\000\036\002\uffad\033" +
    "\055\034\053\041\uffad\042\uffad\044\057\045\060\046\052" +
    "\047\051\050\054\051\056\057\uffad\061\uffad\064\uffad\001" +
    "\002\000\052\002\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\057\uff98\061\uff98" +
    "\063\uff98\064\uff98\001\002\000\016\002\uffb4\041\047\042" +
    "\uffb4\057\uffb4\061\uffb4\064\uffb4\001\002\000\014\002\uffb6" +
    "\042\045\057\uffb6\061\uffb6\064\uffb6\001\002\000\004\056" +
    "\034\001\002\000\004\002\uffb9\001\002\000\052\002\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\057\uff9a\061\uff9a\063\uff9a\064\uff9a\001" +
    "\002\000\004\002\uffb8\001\002\000\052\002\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\057\uff9b\061\uff9b\063\uff9b\064\uff9b\001\002\000" +
    "\020\007\010\010\022\056\017\067\007\070\031\071\027" +
    "\072\011\001\002\000\052\002\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\057" +
    "\uff9e\061\uff9e\063\uff9e\064\uff9e\001\002\000\030\007\010" +
    "\010\022\013\025\033\004\034\032\043\005\056\017\067" +
    "\007\070\031\071\027\072\011\001\002\000\004\061\042" +
    "\001\002\000\004\061\037\001\002\000\026\007\010\010" +
    "\022\033\004\034\032\043\005\056\017\067\007\070\031" +
    "\071\027\072\011\001\002\000\004\057\041\001\002\000" +
    "\006\002\uff94\061\uff94\001\002\000\026\007\010\010\022" +
    "\033\004\034\032\043\005\056\017\067\007\070\031\071" +
    "\027\072\011\001\002\000\004\057\044\001\002\000\006" +
    "\002\uff93\061\uff93\001\002\000\026\007\010\010\022\033" +
    "\004\034\032\043\005\056\017\067\007\070\031\071\027" +
    "\072\011\001\002\000\012\002\uffb7\057\uffb7\061\uffb7\064" +
    "\uffb7\001\002\000\026\007\010\010\022\033\004\034\032" +
    "\043\005\056\017\067\007\070\031\071\027\072\011\001" +
    "\002\000\014\002\uffb5\042\uffb5\057\uffb5\061\uffb5\064\uffb5" +
    "\001\002\000\026\007\010\010\022\033\004\034\032\043" +
    "\005\056\017\067\007\070\031\071\027\072\011\001\002" +
    "\000\026\007\010\010\022\033\004\034\032\043\005\056" +
    "\017\067\007\070\031\071\027\072\011\001\002\000\026" +
    "\007\010\010\022\033\004\034\032\043\005\056\017\067" +
    "\007\070\031\071\027\072\011\001\002\000\026\007\010" +
    "\010\022\033\004\034\032\043\005\056\017\067\007\070" +
    "\031\071\027\072\011\001\002\000\026\007\010\010\022" +
    "\033\004\034\032\043\005\056\017\067\007\070\031\071" +
    "\027\072\011\001\002\000\026\007\010\010\022\033\004" +
    "\034\032\043\005\056\017\067\007\070\031\071\027\072" +
    "\011\001\002\000\026\007\010\010\022\033\004\034\032" +
    "\043\005\056\017\067\007\070\031\071\027\072\011\001" +
    "\002\000\026\007\010\010\022\033\004\034\032\043\005" +
    "\056\017\067\007\070\031\071\027\072\011\001\002\000" +
    "\022\002\uffb2\033\055\034\053\041\uffb2\042\uffb2\057\uffb2" +
    "\061\uffb2\064\uffb2\001\002\000\022\002\uffb1\033\055\034" +
    "\053\041\uffb1\042\uffb1\057\uffb1\061\uffb1\064\uffb1\001\002" +
    "\000\022\002\uffae\033\055\034\053\041\uffae\042\uffae\057" +
    "\uffae\061\uffae\064\uffae\001\002\000\046\002\uffac\033\uffac" +
    "\034\uffac\035\067\036\065\037\070\040\066\041\uffac\042" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\057\uffac\061\uffac\064\uffac\001\002\000\026\007\010\010" +
    "\022\033\004\034\032\043\005\056\017\067\007\070\031" +
    "\071\027\072\011\001\002\000\026\007\010\010\022\033" +
    "\004\034\032\043\005\056\017\067\007\070\031\071\027" +
    "\072\011\001\002\000\026\007\010\010\022\033\004\034" +
    "\032\043\005\056\017\067\007\070\031\071\027\072\011" +
    "\001\002\000\026\007\010\010\022\033\004\034\032\043" +
    "\005\056\017\067\007\070\031\071\027\072\011\001\002" +
    "\000\046\002\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\057\uffa8\061\uffa8\064\uffa8\001" +
    "\002\000\046\002\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\050\uffa9\051\uffa9\057\uffa9\061\uffa9\064\uffa9" +
    "\001\002\000\046\002\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\057\uffa6\061\uffa6\064" +
    "\uffa6\001\002\000\046\002\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\057\uffa7\061\uffa7" +
    "\064\uffa7\001\002\000\022\002\uffb3\033\055\034\053\041" +
    "\uffb3\042\uffb3\057\uffb3\061\uffb3\064\uffb3\001\002\000\046" +
    "\002\uffab\033\uffab\034\uffab\035\067\036\065\037\070\040" +
    "\066\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\057\uffab\061\uffab\064\uffab\001\002\000" +
    "\022\002\uffaf\033\055\034\053\041\uffaf\042\uffaf\057\uffaf" +
    "\061\uffaf\064\uffaf\001\002\000\022\002\uffb0\033\055\034" +
    "\053\041\uffb0\042\uffb0\057\uffb0\061\uffb0\064\uffb0\001\002" +
    "\000\004\057\102\001\002\000\052\002\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\057\uff95\061\uff95\063\uff95\064\uff95\001\002\000\006" +
    "\014\110\067\107\001\002\000\026\007\010\010\022\033" +
    "\004\034\032\043\005\056\017\067\007\070\031\071\027" +
    "\072\011\001\002\000\004\064\106\001\002\000\052\002" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\057\uffa2\061\uffa2\063\uffa2\064\uffa2" +
    "\001\002\000\052\002\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\057\uffa1\061" +
    "\uffa1\063\uffa1\064\uffa1\001\002\000\052\002\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\057\uffa0\061\uffa0\063\uffa0\064\uffa0\001\002\000" +
    "\004\002\000\001\002\000\046\002\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\057\uffa4" +
    "\061\uffa4\064\uffa4\001\002\000\052\002\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\057\uff9d\061\uff9d\063\uff9d\064\uff9d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\032\002\005\042\013\043\025\044\023\045" +
    "\022\046\020\047\017\050\015\051\014\052\012\053\011" +
    "\054\027\001\001\000\004\053\112\001\001\000\012\050" +
    "\111\051\014\052\012\053\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\043\100\044\023\045" +
    "\022\046\020\047\017\050\015\051\014\052\012\053\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\032\001\001\000\002\001\001" +
    "\000\026\043\034\044\023\045\022\046\020\047\017\050" +
    "\015\051\014\052\012\053\011\054\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\043\037\044\023\045" +
    "\022\046\020\047\017\050\015\051\014\052\012\053\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\043" +
    "\042\044\023\045\022\046\020\047\017\050\015\051\014" +
    "\052\012\053\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\043\045\044\023\045\022\046\020\047\017" +
    "\050\015\051\014\052\012\053\011\001\001\000\002\001" +
    "\001\000\022\044\047\045\022\046\020\047\017\050\015" +
    "\051\014\052\012\053\011\001\001\000\002\001\001\000" +
    "\016\046\077\047\017\050\015\051\014\052\012\053\011" +
    "\001\001\000\016\046\076\047\017\050\015\051\014\052" +
    "\012\053\011\001\001\000\014\047\075\050\015\051\014" +
    "\052\012\053\011\001\001\000\016\046\074\047\017\050" +
    "\015\051\014\052\012\053\011\001\001\000\014\047\063" +
    "\050\015\051\014\052\012\053\011\001\001\000\016\046" +
    "\062\047\017\050\015\051\014\052\012\053\011\001\001" +
    "\000\016\046\061\047\017\050\015\051\014\052\012\053" +
    "\011\001\001\000\016\046\060\047\017\050\015\051\014" +
    "\052\012\053\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\050\073" +
    "\051\014\052\012\053\011\001\001\000\012\050\072\051" +
    "\014\052\012\053\011\001\001\000\012\050\071\051\014" +
    "\052\012\053\011\001\001\000\012\050\070\051\014\052" +
    "\012\053\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\043" +
    "\104\044\023\045\022\046\020\047\017\050\015\051\014" +
    "\052\012\053\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASExp as = new ASExp();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Q ::= Exp 
            {
              Object RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Q",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Q EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= Inst P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsCond 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsBucle 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsSwitch 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsIden 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsFun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsStruct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsEnum 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= InsTypeDef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inst ::= InsCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsIden ::= IDEN InsIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIden",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsIdenElige ::= IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InsIdenElige ::= CorchetesPuntosIzq InsAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CorchetesPuntosIzq ::= CORCHETEAP Exp0 CORCHETECIERRE CorchetesPuntosIzq 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CorchetesPuntosIzq ::= PUNTO IDEN CorchetesPuntosIzq 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CorchetesPuntosIzq ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InsDec ::= TipoSinIden IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AsigDec ::= PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AsigDec ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TipoSinIden ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TipoSinIden ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TipoSinIden ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TipoSinIden ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TipoSinIden ::= VECTOR MENOR Tipo MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InsCond ::= IF Exp LLAVESAP P LLAVESCIERRE ConElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConElse ::= ELSE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ConElse ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InsBucle ::= WHILE Exp LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InsBucle ::= FOR PAP InsIdenOInsDec Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InsIdenOInsDec ::= InsIden 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenOInsDec",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InsIdenOInsDec ::= InsDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenOInsDec",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InsSwitch ::= SWITCH PAP IDEN CorchetesPuntosIzq PCIERRE LLAVESAP ListaCase LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsSwitch",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListaCase ::= CASE TiposSwitch DOSPUNTOS P BREAK PUNTOYCOMA ListaCase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListaCase ::= DEFAULT DOSPUNTOS P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TiposSwitch ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TiposSwitch ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TiposSwitch ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TiposSwitch ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TiposSwitch ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TiposSwitch ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InsAsig ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InsFun ::= FUN Tipo IDEN PAP Param PCIERRE LLAVESAP P RETURN Exp PUNTOYCOMA LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Param ::= Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ParamElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InsProc ::= PROC IDEN PAP Param PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsCall ::= CALL IDEN PAP LIden PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LIden ::= IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LIden ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LIdenElige ::= COMA IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LIdenElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LDec ::= DecConNuevosTipos LDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LEnum ::= IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LEnum ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LEnumElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp ::= Exp0 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT= valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp ::= CreaVector 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp0 ::= Exp1 OR Exp0 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.or(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.and(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.igualIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp2 ::= Exp3 MENOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.distinto(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp3 ::= Exp3 SUMA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.suma(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp3 ::= Exp3 RESTA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.resta(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp4 ::= Exp4 MUL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mul(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divEnt(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divReal(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp4 ::= Exp4 MODULO Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.modulo(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp5 ::= NOT Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.corchetes(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.punto(valorExp, as.iden(lexDeIden)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.size(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp7 ::= RESTA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.restaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp7 ::= SUMA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.sumaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Exp7 ::= Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Exp8 ::= ENT 
            {
              E RESULT =null;
		String lexDeEnt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp8 ::= REAL 
            {
              E RESULT =null;
		String lexDeReal = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Exp8 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.verdadero(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Exp8 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.falso(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Exp8 ::= CARACTER 
            {
              E RESULT =null;
		String lexDeCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Exp8 ::= IDEN 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.iden(lexDeIden); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

