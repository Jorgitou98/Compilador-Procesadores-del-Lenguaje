
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 13 20:21:45 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.E;
import ast.AS;
import ast.Ins;
import java.util.List;
import java.util.ArrayList;
import ast.FuncionOIden;
import ast.IfConElse;
import ast.P;
import ast.DecConValorIni;
import ast.Tipos;
import ast.AsigODec;
import ast.CorchetesYPuntosIzq;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 13 20:21:45 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\042\004\000\002\002\004\000\002\042" +
    "\002\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\050\004\000\002\052" +
    "\004\000\002\052\004\000\002\054\006\000\002\054\005" +
    "\000\002\054\002\000\002\047\005\000\002\051\003\000" +
    "\002\051\005\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\006\000\002\056" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\006\000\002\043\010\000" +
    "\002\041\006\000\002\041\002\000\002\045\007\000\002" +
    "\045\014\000\002\046\003\000\002\046\003\000\002\020" +
    "\012\000\002\021\011\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\053\005\000\002" +
    "\002\016\000\002\003\005\000\002\003\002\000\002\004" +
    "\006\000\002\004\002\000\002\005\012\000\002\006\010" +
    "\000\002\007\004\000\002\007\002\000\002\010\005\000" +
    "\002\010\002\000\002\011\007\000\002\017\004\000\002" +
    "\017\002\000\002\012\011\000\002\013\004\000\002\013" +
    "\002\000\002\014\005\000\002\014\002\000\002\015\006" +
    "\000\002\023\003\000\002\023\003\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\003\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\003\000\002\031\004\000\002\031" +
    "\003\000\002\032\006\000\002\032\005\000\002\032\005" +
    "\000\002\032\003\000\002\033\004\000\002\033\004\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\004\000\002\034\005\000\002\040\005\000\002\040\002" +
    "\000\002\036\003\000\002\036\002\000\002\037\005\000" +
    "\002\037\003\000\002\035\010\000\002\035\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\044\002\uffff\010\006\011\035\012\014\015" +
    "\015\016\011\020\032\021\041\023\004\024\027\025\031" +
    "\062\013\066\005\067\033\070\010\071\023\072\024\001" +
    "\002\000\004\062\362\001\002\000\004\062\uffe4\001\002" +
    "\000\030\004\064\005\075\006\101\026\061\027\106\036" +
    "\062\051\074\062\063\063\105\064\103\065\065\001\002" +
    "\000\052\002\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\047\ufff8\062\ufff8\066\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\072\ufff8\001\002\000\004\062\uffe2\001\002\000\004" +
    "\062\344\001\002\000\004\002\343\001\002\000\012\045" +
    "\300\053\uffee\056\277\062\335\001\002\000\004\051\275" +
    "\001\002\000\030\004\064\005\075\006\101\026\061\027" +
    "\106\036\062\051\074\062\063\063\105\064\103\065\065" +
    "\001\002\000\052\002\ufff7\010\ufff7\011\ufff7\012\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\047\ufff7\062\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\071\ufff7\072\ufff7\001\002\000\052\002\uffff\010\006" +
    "\011\035\012\014\014\uffff\015\015\016\011\020\032\021" +
    "\041\022\uffff\023\004\024\027\025\031\047\uffff\062\013" +
    "\066\005\067\033\070\010\071\023\072\024\001\002\000" +
    "\052\002\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\047\ufff9\062\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9" +
    "\072\ufff9\001\002\000\052\002\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\047\ufffb\062\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\071\ufffb\072\ufffb\001\002\000\052\002\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\047\ufffe" +
    "\062\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\001" +
    "\002\000\004\062\uffe1\001\002\000\004\037\260\001\002" +
    "\000\052\002\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\047\ufff6\062\ufff6\066\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\001\002\000\052\002\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\047\ufffc\062\ufffc\066\ufffc" +
    "\067\ufffc\070\ufffc\071\ufffc\072\ufffc\001\002\000\016\062" +
    "\045\066\050\067\044\070\046\071\047\072\042\001\002" +
    "\000\004\062\247\001\002\000\004\062\234\001\002\000" +
    "\004\062\225\001\002\000\004\062\uffe3\001\002\000\052" +
    "\002\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\047\ufff5\062\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072" +
    "\ufff5\001\002\000\004\051\212\001\002\000\052\002\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\047\ufffa" +
    "\062\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\001" +
    "\002\000\052\002\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\047\ufff4\062\ufff4\066\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\001\002\000\052\002\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\047\ufffd\062\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\001\002\000\016" +
    "\062\045\066\050\067\044\070\046\071\047\072\042\001" +
    "\002\000\004\037\207\001\002\000\004\062\051\001\002" +
    "\000\006\040\uffe9\062\uffe9\001\002\000\006\040\uffe5\062" +
    "\uffe5\001\002\000\006\040\uffe8\062\uffe8\001\002\000\006" +
    "\040\uffe7\062\uffe7\001\002\000\006\040\uffea\062\uffea\001" +
    "\002\000\004\051\052\001\002\000\020\052\uffcc\062\045" +
    "\066\050\067\044\070\046\071\047\072\042\001\002\000" +
    "\004\062\201\001\002\000\004\052\055\001\002\000\004" +
    "\046\056\001\002\000\044\010\006\011\035\012\014\015" +
    "\015\016\011\020\032\021\041\022\uffff\023\004\024\027" +
    "\025\031\062\013\066\005\067\033\070\010\071\023\072" +
    "\024\001\002\000\004\022\060\001\002\000\030\004\064" +
    "\005\075\006\101\026\061\027\106\036\062\051\074\062" +
    "\063\063\105\064\103\065\065\001\002\000\020\004\064" +
    "\005\075\051\074\062\063\063\105\064\103\065\065\001" +
    "\002\000\026\004\064\005\075\026\061\027\106\036\062" +
    "\051\074\062\063\063\105\064\103\065\065\001\002\000" +
    "\056\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\045\uff94\046\uff94\051\167\052\uff94\054\uff94" +
    "\055\uff94\056\uff94\057\uff94\001\002\000\054\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\052\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\001\002\000\054\026\uff98\027\uff98\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\034\uff98\035\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\052\uff98\054" +
    "\uff98\055\uff98\056\uff98\057\uff98\001\002\000\054\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\052\uff9d\054\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\001\002\000\054\026\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\052\uffa0" +
    "\054\uffa0\055\uffa0\056\uffa0\057\uffa0\001\002\000\054\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\162\046\uffa4\052\uffa4\054\uffa4\055\uffa4\056\161" +
    "\057\uffa4\001\002\000\004\055\157\001\002\000\050\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\046\uffa6\052\uffa6\054\uffa6\055\uffa6\057\uffa6\001\002" +
    "\000\050\026\uffab\027\uffab\030\143\031\141\032\144\033" +
    "\142\034\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\046\uffab\052\uffab\054\uffab\055\uffab\057" +
    "\uffab\001\002\000\026\004\064\005\075\026\061\027\106" +
    "\036\062\051\074\062\063\063\105\064\103\065\065\001" +
    "\002\000\054\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\052\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\001\002\000\040\026\131\027" +
    "\126\034\uffae\035\uffae\037\133\040\134\041\125\042\127" +
    "\043\130\044\132\046\uffae\052\uffae\054\uffae\055\uffae\057" +
    "\uffae\001\002\000\020\034\123\035\uffb5\046\uffb5\052\uffb5" +
    "\054\uffb5\055\uffb5\057\uffb5\001\002\000\016\035\121\046" +
    "\uffb7\052\uffb7\054\uffb7\055\uffb7\057\uffb7\001\002\000\004" +
    "\051\110\001\002\000\006\046\uffba\055\uffba\001\002\000" +
    "\054\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\052\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\006\046\uffb9\055\uffb9\001" +
    "\002\000\054\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\052\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\057\uff9c\001\002\000\020\004\064\005" +
    "\075\051\074\062\063\063\105\064\103\065\065\001\002" +
    "\000\054\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\052\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\001\002\000\030\004\064\005\075" +
    "\006\101\026\061\027\106\036\062\051\074\062\063\063" +
    "\105\064\103\065\065\001\002\000\004\054\116\001\002" +
    "\000\004\054\113\001\002\000\026\004\064\005\075\026" +
    "\061\027\106\036\062\051\074\062\063\063\105\064\103" +
    "\065\065\001\002\000\004\052\115\001\002\000\010\046" +
    "\uff8f\054\uff8f\055\uff8f\001\002\000\026\004\064\005\075" +
    "\026\061\027\106\036\062\051\074\062\063\063\105\064" +
    "\103\065\065\001\002\000\004\052\120\001\002\000\010" +
    "\046\uff8e\054\uff8e\055\uff8e\001\002\000\026\004\064\005" +
    "\075\026\061\027\106\036\062\051\074\062\063\063\105" +
    "\064\103\065\065\001\002\000\014\046\uffb8\052\uffb8\054" +
    "\uffb8\055\uffb8\057\uffb8\001\002\000\026\004\064\005\075" +
    "\026\061\027\106\036\062\051\074\062\063\063\105\064" +
    "\103\065\065\001\002\000\016\035\uffb6\046\uffb6\052\uffb6" +
    "\054\uffb6\055\uffb6\057\uffb6\001\002\000\026\004\064\005" +
    "\075\026\061\027\106\036\062\051\074\062\063\063\105" +
    "\064\103\065\065\001\002\000\026\004\064\005\075\026" +
    "\061\027\106\036\062\051\074\062\063\063\105\064\103" +
    "\065\065\001\002\000\026\004\064\005\075\026\061\027" +
    "\106\036\062\051\074\062\063\063\105\064\103\065\065" +
    "\001\002\000\026\004\064\005\075\026\061\027\106\036" +
    "\062\051\074\062\063\063\105\064\103\065\065\001\002" +
    "\000\026\004\064\005\075\026\061\027\106\036\062\051" +
    "\074\062\063\063\105\064\103\065\065\001\002\000\026" +
    "\004\064\005\075\026\061\027\106\036\062\051\074\062" +
    "\063\063\105\064\103\065\065\001\002\000\026\004\064" +
    "\005\075\026\061\027\106\036\062\051\074\062\063\063" +
    "\105\064\103\065\065\001\002\000\026\004\064\005\075" +
    "\026\061\027\106\036\062\051\074\062\063\063\105\064" +
    "\103\065\065\001\002\000\024\026\131\027\126\034\uffb3" +
    "\035\uffb3\046\uffb3\052\uffb3\054\uffb3\055\uffb3\057\uffb3\001" +
    "\002\000\024\026\131\027\126\034\uffb2\035\uffb2\046\uffb2" +
    "\052\uffb2\054\uffb2\055\uffb2\057\uffb2\001\002\000\024\026" +
    "\131\027\126\034\uffaf\035\uffaf\046\uffaf\052\uffaf\054\uffaf" +
    "\055\uffaf\057\uffaf\001\002\000\050\026\uffad\027\uffad\030" +
    "\143\031\141\032\144\033\142\034\uffad\035\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\046\uffad\052" +
    "\uffad\054\uffad\055\uffad\057\uffad\001\002\000\026\004\064" +
    "\005\075\026\061\027\106\036\062\051\074\062\063\063" +
    "\105\064\103\065\065\001\002\000\026\004\064\005\075" +
    "\026\061\027\106\036\062\051\074\062\063\063\105\064" +
    "\103\065\065\001\002\000\026\004\064\005\075\026\061" +
    "\027\106\036\062\051\074\062\063\063\105\064\103\065" +
    "\065\001\002\000\026\004\064\005\075\026\061\027\106" +
    "\036\062\051\074\062\063\063\105\064\103\065\065\001" +
    "\002\000\050\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\046\uffa9\052\uffa9\054\uffa9\055\uffa9" +
    "\057\uffa9\001\002\000\050\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\046\uffaa\052\uffaa\054" +
    "\uffaa\055\uffaa\057\uffaa\001\002\000\050\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\046\uffa7" +
    "\052\uffa7\054\uffa7\055\uffa7\057\uffa7\001\002\000\050\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\046\uffa8\052\uffa8\054\uffa8\055\uffa8\057\uffa8\001\002" +
    "\000\024\026\131\027\126\034\uffb4\035\uffb4\046\uffb4\052" +
    "\uffb4\054\uffb4\055\uffb4\057\uffb4\001\002\000\024\026\131" +
    "\027\126\034\uffb1\035\uffb1\046\uffb1\052\uffb1\054\uffb1\055" +
    "\uffb1\057\uffb1\001\002\000\050\026\uffac\027\uffac\030\143" +
    "\031\141\032\144\033\142\034\uffac\035\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\046\uffac\052\uffac" +
    "\054\uffac\055\uffac\057\uffac\001\002\000\024\026\131\027" +
    "\126\034\uffb0\035\uffb0\046\uffb0\052\uffb0\054\uffb0\055\uffb0" +
    "\057\uffb0\001\002\000\004\052\156\001\002\000\054\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\052\uff96\054\uff96\055\uff96\056\uff96" +
    "\057\uff96\001\002\000\004\047\160\001\002\000\052\002" +
    "\uffce\010\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\047" +
    "\uffce\062\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce" +
    "\001\002\000\026\004\064\005\075\026\061\027\106\036" +
    "\062\051\074\062\063\063\105\064\103\065\065\001\002" +
    "\000\006\007\164\062\163\001\002\000\054\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\052\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\001\002\000\054\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\052\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002\000\004\057\166" +
    "\001\002\000\054\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\052\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000\030\004\064" +
    "\005\075\026\061\027\106\036\062\051\074\052\uff92\062" +
    "\063\063\105\064\103\065\065\001\002\000\054\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97" +
    "\045\uff97\046\uff97\052\uff97\054\uff97\055\uff97\056\uff97\057" +
    "\uff97\001\002\000\004\052\176\001\002\000\004\052\uff93" +
    "\001\002\000\006\052\uff90\054\174\001\002\000\026\004" +
    "\064\005\075\026\061\027\106\036\062\051\074\062\063" +
    "\063\105\064\103\065\065\001\002\000\004\052\uff91\001" +
    "\002\000\054\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\052\uff95\054\uff95" +
    "\055\uff95\056\uff95\057\uff95\001\002\000\050\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\046" +
    "\uffa5\052\uffa5\054\uffa5\055\uffa5\057\uffa5\001\002\000\054" +
    "\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\052\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\001\002\000\006\052\uffca\054\202\001\002" +
    "\000\016\062\045\066\050\067\044\070\046\071\047\072" +
    "\042\001\002\000\004\052\uffcd\001\002\000\004\062\205" +
    "\001\002\000\006\052\uffca\054\202\001\002\000\004\052" +
    "\uffcb\001\002\000\016\062\045\066\050\067\044\070\046" +
    "\071\047\072\042\001\002\000\004\040\211\001\002\000" +
    "\006\040\uffe6\062\uffe6\001\002\000\016\062\013\066\005" +
    "\067\033\070\010\071\023\072\024\001\002\000\026\004" +
    "\uffda\005\uffda\026\uffda\027\uffda\036\uffda\051\uffda\062\uffda" +
    "\063\uffda\064\uffda\065\uffda\001\002\000\026\004\064\005" +
    "\075\026\061\027\106\036\062\051\074\062\063\063\105" +
    "\064\103\065\065\001\002\000\026\004\uffd9\005\uffd9\026" +
    "\uffd9\027\uffd9\036\uffd9\051\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\001\002\000\004\055\217\001\002\000\026\004" +
    "\064\005\075\026\061\027\106\036\062\051\074\062\063" +
    "\063\105\064\103\065\065\001\002\000\004\052\221\001" +
    "\002\000\004\046\222\001\002\000\044\010\006\011\035" +
    "\012\014\015\015\016\011\020\032\021\041\023\004\024" +
    "\027\025\031\047\uffff\062\013\066\005\067\033\070\010" +
    "\071\023\072\024\001\002\000\004\047\224\001\002\000" +
    "\052\002\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\047\uffdb\062\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb" +
    "\072\uffdb\001\002\000\004\051\226\001\002\000\020\052" +
    "\uffcc\062\045\066\050\067\044\070\046\071\047\072\042" +
    "\001\002\000\004\052\230\001\002\000\004\046\231\001" +
    "\002\000\044\010\006\011\035\012\014\015\015\016\011" +
    "\020\032\021\041\023\004\024\027\025\031\047\uffff\062" +
    "\013\066\005\067\033\070\010\071\023\072\024\001\002" +
    "\000\004\047\233\001\002\000\052\002\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\047\uffc9\062\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\001\002\000\004" +
    "\053\235\001\002\000\004\046\236\001\002\000\006\047" +
    "\uffbe\062\237\001\002\000\006\047\uffbc\050\243\001\002" +
    "\000\004\047\241\001\002\000\004\055\242\001\002\000" +
    "\052\002\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\047\uffc0\062\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0" +
    "\072\uffc0\001\002\000\004\062\245\001\002\000\004\047" +
    "\uffbf\001\002\000\006\047\uffbc\050\243\001\002\000\004" +
    "\047\uffbd\001\002\000\006\053\252\055\250\001\002\000" +
    "\074\002\uffec\004\uffec\005\uffec\010\uffec\011\uffec\012\uffec" +
    "\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\036\uffec\047\uffec" +
    "\051\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\070\uffec\071\uffec\072\uffec\001\002\000\074\002\uffed" +
    "\004\uffed\005\uffed\010\uffed\011\uffed\012\uffed\014\uffed\015" +
    "\uffed\016\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\036\uffed\047\uffed\051\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\071\uffed\072\uffed\001\002\000\030\004\064\005\075\006" +
    "\101\026\061\027\106\036\062\051\074\062\063\063\105" +
    "\064\103\065\065\001\002\000\004\055\254\001\002\000" +
    "\074\002\uffeb\004\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\036\uffeb\047\uffeb" +
    "\051\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\072\uffeb\001\002\000\004\062\256" +
    "\001\002\000\004\055\257\001\002\000\052\002\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\047\uffbb\062" +
    "\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\001\002" +
    "\000\016\062\045\066\050\067\044\070\046\071\047\072" +
    "\042\001\002\000\004\040\262\001\002\000\004\062\uffe0" +
    "\001\002\000\012\002\001\014\001\022\001\047\001\001" +
    "\002\000\004\046\265\001\002\000\044\010\006\011\035" +
    "\012\014\015\015\016\011\020\032\021\041\023\004\024" +
    "\027\025\031\047\uffff\062\013\066\005\067\033\070\010" +
    "\071\023\072\024\001\002\000\004\047\267\001\002\000" +
    "\054\002\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\270\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\047\uffdd\062\uffdd\066\uffdd\067\uffdd\070\uffdd" +
    "\071\uffdd\072\uffdd\001\002\000\004\046\272\001\002\000" +
    "\052\002\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\047\uffdf\062\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\001\002\000\044\010\006\011\035\012\014\015" +
    "\015\016\011\020\032\021\041\023\004\024\027\025\031" +
    "\047\uffff\062\013\066\005\067\033\070\010\071\023\072" +
    "\024\001\002\000\004\047\274\001\002\000\052\002\uffde" +
    "\010\uffde\011\uffde\012\uffde\014\uffde\015\uffde\016\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\047\uffde" +
    "\062\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\001" +
    "\002\000\004\062\276\001\002\000\010\045\300\052\uffee" +
    "\056\277\001\002\000\026\004\064\005\075\026\061\027" +
    "\106\036\062\051\074\062\063\063\105\064\103\065\065" +
    "\001\002\000\004\062\326\001\002\000\004\052\302\001" +
    "\002\000\004\046\303\001\002\000\006\013\305\061\304" +
    "\001\002\000\004\060\324\001\002\000\016\004\313\005" +
    "\314\062\316\063\311\064\312\065\315\001\002\000\004" +
    "\047\307\001\002\000\052\002\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\047\uffd8\062\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\001\002\000\004\060\317" +
    "\001\002\000\004\060\uffd5\001\002\000\004\060\uffd4\001" +
    "\002\000\004\060\uffd3\001\002\000\004\060\uffd2\001\002" +
    "\000\004\060\uffd1\001\002\000\004\060\uffd0\001\002\000" +
    "\044\010\006\011\035\012\014\014\uffff\015\015\016\011" +
    "\020\032\021\041\023\004\024\027\025\031\062\013\066" +
    "\005\067\033\070\010\071\023\072\024\001\002\000\004" +
    "\014\321\001\002\000\004\055\322\001\002\000\006\013" +
    "\305\061\304\001\002\000\004\047\uffd7\001\002\000\044" +
    "\010\006\011\035\012\014\015\015\016\011\020\032\021" +
    "\041\023\004\024\027\025\031\047\uffff\062\013\066\005" +
    "\067\033\070\010\071\023\072\024\001\002\000\004\047" +
    "\uffd6\001\002\000\012\045\300\052\uffee\053\uffee\056\277" +
    "\001\002\000\006\052\uffef\053\uffef\001\002\000\004\057" +
    "\331\001\002\000\012\045\300\052\uffee\053\uffee\056\277" +
    "\001\002\000\006\052\ufff0\053\ufff0\001\002\000\004\053" +
    "\337\001\002\000\074\002\ufff3\004\ufff3\005\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\036\ufff3\047\ufff3\051\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\001\002" +
    "\000\006\053\252\055\250\001\002\000\074\002\ufff2\004" +
    "\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\036\ufff2\047\ufff2\051\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\001\002\000\030\004\064\005\075\006\101" +
    "\026\061\027\106\036\062\051\074\062\063\063\105\064" +
    "\103\065\065\001\002\000\074\002\ufff1\004\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\036\ufff1\047\ufff1\051\ufff1\062\ufff1\063\ufff1\064" +
    "\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1" +
    "\001\002\000\004\055\342\001\002\000\074\002\uffcf\004" +
    "\uffcf\005\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\036\uffcf\047\uffcf\051\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071" +
    "\uffcf\072\uffcf\001\002\000\004\002\000\001\002\000\004" +
    "\051\345\001\002\000\006\052\uffc6\062\347\001\002\000" +
    "\004\052\354\001\002\000\006\052\uffc4\054\350\001\002" +
    "\000\004\062\352\001\002\000\004\052\uffc7\001\002\000" +
    "\006\052\uffc4\054\350\001\002\000\004\052\uffc5\001\002" +
    "\000\004\055\355\001\002\000\052\002\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\047\uffc8\062\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\001\002\000\004" +
    "\046\357\001\002\000\044\010\006\011\035\012\014\015" +
    "\015\016\011\020\032\021\041\023\004\024\027\025\031" +
    "\047\uffff\062\013\066\005\067\033\070\010\071\023\072" +
    "\024\001\002\000\004\047\361\001\002\000\052\002\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\047\uffdc" +
    "\062\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\001" +
    "\002\000\004\046\363\001\002\000\004\047\uffc1\001\002" +
    "\000\004\047\367\001\002\000\004\047\uffc1\001\002\000" +
    "\004\047\uffc2\001\002\000\052\002\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\047\uffc3\062\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\036\002\035\005\017\006\033\011\006\012" +
    "\015\015\024\020\020\042\011\043\021\044\016\045\037" +
    "\047\025\050\036\055\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\023\355\024\101\025\077\026\076" +
    "\027\075\030\072\031\071\032\067\033\066\034\065\035" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\052\333\054\332\001" +
    "\001\000\002\001\001\000\030\023\263\024\101\025\077" +
    "\026\076\027\075\030\072\031\071\032\067\033\066\034" +
    "\065\035\103\001\001\000\002\001\001\000\036\002\035" +
    "\005\017\006\033\011\006\012\015\015\024\020\020\042" +
    "\262\043\021\044\016\045\037\047\025\050\036\055\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\053\056\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\035\005\017\006\033\011\006\012\015\015" +
    "\024\020\020\042\056\043\021\044\016\045\037\047\025" +
    "\050\036\055\027\001\001\000\002\001\001\000\030\023" +
    "\070\024\101\025\077\026\076\027\075\030\072\031\071" +
    "\032\067\033\066\034\065\035\103\001\001\000\004\034" +
    "\177\001\001\000\012\031\176\032\067\033\066\034\065" +
    "\001\001\000\004\040\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\154\025\077\026\076\027\075\030\072" +
    "\031\071\032\067\033\066\034\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\106\001\001" +
    "\000\002\001\001\000\026\024\110\025\077\026\076\027" +
    "\075\030\072\031\071\032\067\033\066\034\065\035\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\113\025\077\026\076\027\075\030\072\031\071\032\067" +
    "\033\066\034\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\116\025\077\026\076\027\075\030\072" +
    "\031\071\032\067\033\066\034\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\024\121\025\077\026\076" +
    "\027\075\030\072\031\071\032\067\033\066\034\065\001" +
    "\001\000\002\001\001\000\022\025\123\026\076\027\075" +
    "\030\072\031\071\032\067\033\066\034\065\001\001\000" +
    "\002\001\001\000\016\027\153\030\072\031\071\032\067" +
    "\033\066\034\065\001\001\000\014\030\152\031\071\032" +
    "\067\033\066\034\065\001\001\000\016\027\151\030\072" +
    "\031\071\032\067\033\066\034\065\001\001\000\016\027" +
    "\150\030\072\031\071\032\067\033\066\034\065\001\001" +
    "\000\014\030\137\031\071\032\067\033\066\034\065\001" +
    "\001\000\016\027\136\030\072\031\071\032\067\033\066" +
    "\034\065\001\001\000\016\027\135\030\072\031\071\032" +
    "\067\033\066\034\065\001\001\000\016\027\134\030\072" +
    "\031\071\032\067\033\066\034\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\031\147\032\067\033\066\034\065\001\001\000" +
    "\012\031\146\032\067\033\066\034\065\001\001\000\012" +
    "\031\145\032\067\033\066\034\065\001\001\000\012\031" +
    "\144\032\067\033\066\034\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\024\164\025\077\026\076" +
    "\027\075\030\072\031\071\032\067\033\066\034\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\024\172\025" +
    "\077\026\076\027\075\030\072\031\071\032\067\033\066" +
    "\034\065\036\170\037\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\024\172\025\077\026\076\027\075\030\072\031\071\032" +
    "\067\033\066\034\065\037\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\202\001\001\000\004\056\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\205\001\001\000" +
    "\002\001\001\000\004\056\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\213\047\214\050\212\055" +
    "\027\001\001\000\002\001\001\000\024\024\215\025\077" +
    "\026\076\027\075\030\072\031\071\032\067\033\066\034" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\024\217\025\077\026\076\027\075\030\072\031\071\032" +
    "\067\033\066\034\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\002\035\005\017\006\033\011\006\012" +
    "\015\015\024\020\020\042\222\043\021\044\016\045\037" +
    "\047\025\050\036\055\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\226\056\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\002" +
    "\035\005\017\006\033\011\006\012\015\015\024\020\020" +
    "\042\231\043\021\044\016\045\037\047\025\050\036\055" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\237\001\001\000" +
    "\004\014\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\245\001\001\000\002\001\001\000\004\051\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\023" +
    "\252\024\101\025\077\026\076\027\075\030\072\031\071" +
    "\032\067\033\066\034\065\035\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\035\005\017\006\033\011\006\012\015\015" +
    "\024\020\020\042\265\043\021\044\016\045\037\047\025" +
    "\050\036\055\027\001\001\000\002\001\001\000\004\041" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\002\035\005\017\006\033\011\006\012\015\015\024\020" +
    "\020\042\272\043\021\044\016\045\037\047\025\050\036" +
    "\055\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\300\001\001\000\024\024\327" +
    "\025\077\026\076\027\075\030\072\031\071\032\067\033" +
    "\066\034\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\305\001\001\000\002\001" +
    "\001\000\004\022\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\035\005\017\006\033\011" +
    "\006\012\015\015\024\020\020\042\317\043\021\044\016" +
    "\045\037\047\025\050\036\055\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\322\001\001\000\002" +
    "\001\001\000\036\002\035\005\017\006\033\011\006\012" +
    "\015\015\024\020\020\042\324\043\021\044\016\045\037" +
    "\047\025\050\036\055\027\001\001\000\002\001\001\000" +
    "\004\054\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\331\001\001\000\002\001\001\000\004\053" +
    "\337\001\001\000\002\001\001\000\004\051\335\001\001" +
    "\000\002\001\001\000\030\023\340\024\101\025\077\026" +
    "\076\027\075\030\072\031\071\032\067\033\066\034\065" +
    "\035\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\345\001\001\000\002\001\001\000\004\010\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\035\005\017\006\033" +
    "\011\006\012\015\015\024\020\020\042\357\043\021\044" +
    "\016\045\037\047\025\050\036\055\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\364\017\363\001\001\000\002\001\001\000\006\016\364" +
    "\017\365\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              P RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		P prog = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 prog.anadeIns(ins);
	   RESULT = prog; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		P start_val = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              P RESULT =null;
		 RESULT = as.programa(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= InsCond 
            {
              Ins RESULT =null;
		Ins valorInsCond = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsCond; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsBucle 
            {
              Ins RESULT =null;
		Ins valorInsBucle = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = valorInsBucle; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsDec 
            {
              Ins RESULT =null;
		Ins valorInsDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsDec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsSwitch 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsFun 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsProc 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsStruct 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsEnum 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsTypeDef 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsCall 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= InsIden 
            {
              Ins RESULT =null;
		Ins valorInsIden = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsIden; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // InsIden ::= IDEN InsIdenElige 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		AsigODec valorAsigODec = (AsigODec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 if (valorAsigODec.isEsDec()){
			if (valorAsigODec.isConValorIni()){
				RESULT = as.insDec(as.tipoUsuario(lexDeIden), valorAsigODec.getIdenSiDec(), true, valorAsigODec.getValor());
			}
			else{
				RESULT = as.insDec(as.tipoUsuario(lexDeIden), valorAsigODec.getIdenSiDec(), false, null);
			}
		}
		else{
			RESULT = as.insAsig(as.iden(lexDeIden), valorAsigODec.getLista(), valorAsigODec.getValor());
		}
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIden",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsIdenElige ::= IDEN AsigDec 
            {
              AsigODec RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DecConValorIni valorAsig = (DecConValorIni)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.asigODec(true, valorAsig.isConValorIni(), valorAsig.getValorIni(), as.iden(lexDeIden), null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsIdenElige ::= CorchetesPuntosIzq InsAsig 
            {
              AsigODec RESULT =null;
		List<CorchetesYPuntosIzq> lista = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		AsigODec asig = (AsigODec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 asig.setLista(lista);
		RESULT = asig; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CorchetesPuntosIzq ::= CORCHETEAP Exp0 CORCHETECIERRE CorchetesPuntosIzq 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<CorchetesYPuntosIzq> valorCorchPunto = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 valorCorchPunto.add(0, as.corchetesIzq(valorExp));
		RESULT = valorCorchPunto; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CorchetesPuntosIzq ::= PUNTO IDEN CorchetesPuntosIzq 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<CorchetesYPuntosIzq> valorCorchPunto = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 valorCorchPunto.add(0, as.puntosIzq(as.iden(lexDeIden)));
		RESULT = valorCorchPunto; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CorchetesPuntosIzq ::= 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		 RESULT = new ArrayList<CorchetesYPuntosIzq>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InsDec ::= TipoSinIden IDEN AsigDec 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		DecConValorIni valorIni = (DecConValorIni)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 if(valorIni.isConValorIni()){
		RESULT = as.insDec(tipo, as.iden(lexDeIden), true, valorIni.getValorIni());
	}
	else {
		RESULT = as.insDec(tipo, as.iden(lexDeIden), false, null);
	}

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AsigDec ::= PUNTOYCOMA 
            {
              DecConValorIni RESULT =null;
		RESULT = as.decConValorIni(false, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AsigDec ::= IGUAL Exp PUNTOYCOMA 
            {
              DecConValorIni RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.decConValorIni (true, valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= INT 
            {
              Tipos RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= BOOL 
            {
              Tipos RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= CHAR 
            {
              Tipos RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= FLOAT 
            {
              Tipos RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Tipos RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= IDEN 
            {
              Tipos RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TipoSinIden ::= INT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoInt(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TipoSinIden ::= BOOL 
            {
              Tipos RESULT =null;
		RESULT = as.tipoBool(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TipoSinIden ::= CHAR 
            {
              Tipos RESULT =null;
		RESULT = as.tipoChar(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TipoSinIden ::= FLOAT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoFloat(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TipoSinIden ::= VECTOR MENOR Tipo MAYOR 
            {
              Tipos RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.tipoVector(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InsCond ::= IF Exp LLAVESAP P LLAVESCIERRE ConElse 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		IfConElse insElse = (IfConElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		  if(insElse.isVieneConElse()){
	   		RESULT = as.insIfConElse(cond, insIf, insElse.getInstElse());
	   	}
	   	else{
	   		RESULT = as.insIfSinElse(cond, insIf);
	   	}
	 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConElse ::= ELSE LLAVESAP P LLAVESCIERRE 
            {
              IfConElse RESULT =null;
		P insElse = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.ifConElse(true, insElse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConElse ::= 
            {
              IfConElse RESULT =null;
		RESULT = as.ifConElse(false, new P()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InsBucle ::= WHILE Exp LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		P ins = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insWhile(cond, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InsBucle ::= FOR PAP InsIdenOInsDec Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		Ins insDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insDec, cond, paso, inst); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InsIdenOInsDec ::= InsIden 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ins; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenOInsDec",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InsIdenOInsDec ::= InsDec 
            {
              Ins RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ins; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenOInsDec",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InsSwitch ::= SWITCH PAP IDEN CorchetesPuntosIzq PCIERRE LLAVESAP ListaCase LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsSwitch",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ListaCase ::= CASE TiposSwitch DOSPUNTOS P BREAK PUNTOYCOMA ListaCase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListaCase ::= DEFAULT DOSPUNTOS P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TiposSwitch ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TiposSwitch ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TiposSwitch ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TiposSwitch ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TiposSwitch ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TiposSwitch ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InsAsig ::= IGUAL Exp PUNTOYCOMA 
            {
              AsigODec RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.asigODec(false, true, valorExp, null, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InsFun ::= FUN Tipo IDEN PAP Param PCIERRE LLAVESAP P RETURN Exp PUNTOYCOMA LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Param ::= Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ParamElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InsProc ::= PROC IDEN PAP Param PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InsCall ::= CALL IDEN PAP LIden PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LIden ::= IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LIden ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LIdenElige ::= COMA IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LIdenElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LDec ::= DecConNuevosTipos LDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LEnum ::= IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LEnum ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LEnumElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp ::= Exp0 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT= valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp ::= CreaVector 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp0 ::= Exp1 OR Exp0 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.or(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.and(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.igualIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp2 ::= Exp3 MENOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.distinto(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp3 ::= Exp3 SUMA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.suma(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp3 ::= Exp3 RESTA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.resta(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp4 ::= Exp4 MUL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mul(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divEnt(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divReal(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp4 ::= Exp4 MODULO Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.modulo(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp5 ::= NOT Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.corchetes(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.punto(valorExp, as.iden(lexDeIden)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.size(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp7 ::= RESTA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.restaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp7 ::= SUMA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.sumaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp7 ::= Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Exp8 ::= ENT 
            {
              E RESULT =null;
		String lexDeEnt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Exp8 ::= REAL 
            {
              E RESULT =null;
		String lexDeReal = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp8 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.verdadero(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Exp8 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.falso(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Exp8 ::= CARACTER 
            {
              E RESULT =null;
		String lexDeCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Exp8 ::= IDEN FuncionOIden 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		FuncionOIden valorExp = (FuncionOIden)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		  if (valorExp.isEsIden()){
		 	RESULT = as.iden(lexDeIden);
		 }
		 else{
		 	RESULT = as.llamadaFun(as.iden(lexDeIden), valorExp.getArgumentos());
		 }
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FuncionOIden ::= PAP ListaArg PCIERRE 
            {
              FuncionOIden RESULT =null;
		FuncionOIden valorExp = (FuncionOIden)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionOIden",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FuncionOIden ::= 
            {
              FuncionOIden RESULT =null;
		 RESULT = as.funcionOIden(true, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionOIden",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ListaArg ::= ListaArg1 
            {
              FuncionOIden RESULT =null;
		FuncionOIden valorExp = (FuncionOIden)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ListaArg ::= 
            {
              FuncionOIden RESULT =null;
		 RESULT = as.funcionOIden(false, new ArrayList<E>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ListaArg1 ::= Exp0 COMA ListaArg1 
            {
              FuncionOIden RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		FuncionOIden valorExp = (FuncionOIden)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 valorExp.anadeElem(elem);
	   RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ListaArg1 ::= Exp0 
            {
              FuncionOIden RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<E> args = new ArrayList<E>();
	   args.add(elem);
	   RESULT = as.funcionOIden(false, args); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

