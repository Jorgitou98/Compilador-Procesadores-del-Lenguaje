
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 18 20:20:17 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.E;
import ast.AS;
import ast.Ins;
import java.util.List;
import java.util.ArrayList;
import ast.IfConElse;
import ast.P;
import ast.Tipos;
import ast.CorchetesYPuntosIzq;
import ast.Case;
import ast.TipoParam;
import ast.Param;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 18 20:20:17 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\026\004\000\002\002\004\000\002\026" +
    "\002\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\032\005\000\002\032" +
    "\007\000\002\033\007\000\002\040\006\000\002\040\005" +
    "\000\002\040\002\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\006\000\002" +
    "\046\003\000\002\027\010\000\002\025\006\000\002\025" +
    "\002\000\002\031\007\000\002\031\014\000\002\031\014" +
    "\000\002\035\012\000\002\043\011\000\002\043\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\036" +
    "\016\000\002\044\006\000\002\044\005\000\002\044\002" +
    "\000\002\045\007\000\002\045\006\000\002\045\002\000" +
    "\002\037\012\000\002\034\010\000\002\002\007\000\002" +
    "\010\004\000\002\010\002\000\002\003\011\000\002\004" +
    "\004\000\002\004\002\000\002\005\005\000\002\005\002" +
    "\000\002\006\006\000\002\011\003\000\002\011\003\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\004\000\002\017\003\000\002\020\006\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\021\004\000" +
    "\002\021\004\000\002\021\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\006\000\002\022\003\000\002\022\005" +
    "\000\002\041\003\000\002\041\002\000\002\042\005\000" +
    "\002\042\003\000\002\023\010\000\002\023\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\044\002\uffff\010\010\011\036\012\014\015" +
    "\015\016\007\020\033\021\041\023\004\024\031\025\032" +
    "\063\013\067\005\070\034\071\006\072\024\073\025\001" +
    "\002\000\004\063\353\001\002\000\010\040\uffed\062\uffed" +
    "\063\uffed\001\002\000\010\040\uffeb\062\uffeb\063\uffeb\001" +
    "\002\000\004\063\346\001\002\000\030\004\057\005\071" +
    "\006\074\026\054\027\101\036\055\051\067\063\056\064" +
    "\100\065\076\066\060\001\002\000\052\002\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\047\ufff6\063\ufff6" +
    "\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\001\002\000" +
    "\004\002\341\001\002\000\012\045\302\053\uffee\056\301" +
    "\063\uffe8\001\002\000\004\051\277\001\002\000\030\004" +
    "\057\005\071\006\074\026\054\027\101\036\055\051\067" +
    "\063\056\064\100\065\076\066\060\001\002\000\004\063" +
    "\261\001\002\000\052\002\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\047\ufff5\063\ufff5\067\ufff5\070\ufff5" +
    "\071\ufff5\072\ufff5\073\ufff5\001\002\000\052\002\uffff\010" +
    "\010\011\036\012\014\014\uffff\015\015\016\007\020\033" +
    "\021\041\022\uffff\023\004\024\031\025\032\047\uffff\063" +
    "\013\067\005\070\034\071\006\072\024\073\025\001\002" +
    "\000\052\002\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\047\ufff7\063\ufff7\067\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\001\002\000\052\002\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\047\ufff9\063\ufff9\067\ufff9" +
    "\070\ufff9\071\ufff9\072\ufff9\073\ufff9\001\002\000\052\002" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\047" +
    "\ufffe\063\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe" +
    "\001\002\000\010\040\uffea\062\uffea\063\uffea\001\002\000" +
    "\004\037\255\001\002\000\052\002\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\047\ufffb\063\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\073\ufffb\001\002\000\052\002" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\047" +
    "\ufff4\063\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\001\002\000\052\002\ufffc\010\ufffc\011\ufffc\012\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\047\ufffc\063\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\073\ufffc\001\002\000\016\063\043\067\005" +
    "\070\034\071\006\072\024\073\025\001\002\000\004\063" +
    "\237\001\002\000\004\063\230\001\002\000\010\040\uffec" +
    "\062\uffec\063\uffec\001\002\000\052\002\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\047\ufffa\063\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\001\002\000\004" +
    "\051\207\001\002\000\052\002\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\047\ufff8\063\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\001\002\000\052\002\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\047\ufffd" +
    "\063\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\001" +
    "\002\000\016\063\043\067\005\070\034\071\006\072\024" +
    "\073\025\001\002\000\004\063\044\001\002\000\010\040" +
    "\uffe8\062\uffe8\063\uffe8\001\002\000\004\051\045\001\002" +
    "\000\020\052\uffd5\063\043\067\005\070\034\071\006\072" +
    "\024\073\025\001\002\000\006\062\173\063\174\001\002" +
    "\000\004\052\050\001\002\000\004\046\051\001\002\000" +
    "\044\010\010\011\036\012\014\015\015\016\007\020\033" +
    "\021\041\022\uffff\023\004\024\031\025\032\063\013\067" +
    "\005\070\034\071\006\072\024\073\025\001\002\000\004" +
    "\022\053\001\002\000\030\004\057\005\071\006\074\026" +
    "\054\027\101\036\055\051\067\063\056\064\100\065\076" +
    "\066\060\001\002\000\020\004\057\005\071\051\067\063" +
    "\056\064\100\065\076\066\060\001\002\000\026\004\057" +
    "\005\071\026\054\027\101\036\055\051\067\063\056\064" +
    "\100\065\076\066\060\001\002\000\056\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\051\162\052\uffa2\054\uffa2\055\uffa2\056\uffa2\057" +
    "\uffa2\001\002\000\054\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\052\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\001\002\000\054\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\052\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\001\002\000\054\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\052" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002\000\054" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\052\uffac\054\uffac\055\uffac\056" +
    "\uffac\057\uffac\001\002\000\004\055\160\001\002\000\054" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\152\046\uffb0\052\uffb0\054\uffb0\055\uffb0\056" +
    "\153\057\uffb0\001\002\000\050\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\052\uffb2" +
    "\054\uffb2\055\uffb2\057\uffb2\001\002\000\050\026\uffb7\027" +
    "\uffb7\030\136\031\134\032\137\033\135\034\uffb7\035\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\046" +
    "\uffb7\052\uffb7\054\uffb7\055\uffb7\057\uffb7\001\002\000\026" +
    "\004\057\005\071\026\054\027\101\036\055\051\067\063" +
    "\056\064\100\065\076\066\060\001\002\000\040\026\124" +
    "\027\121\034\uffba\035\uffba\037\126\040\127\041\120\042" +
    "\122\043\123\044\125\046\uffba\052\uffba\054\uffba\055\uffba" +
    "\057\uffba\001\002\000\054\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\052" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001\002\000\020" +
    "\034\116\035\uffc1\046\uffc1\052\uffc1\054\uffc1\055\uffc1\057" +
    "\uffc1\001\002\000\016\035\114\046\uffc3\052\uffc3\054\uffc3" +
    "\055\uffc3\057\uffc3\001\002\000\004\051\103\001\002\000" +
    "\006\046\uffc6\055\uffc6\001\002\000\054\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\052\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\001" +
    "\002\000\006\046\uffc5\055\uffc5\001\002\000\054\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\052\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\001\002\000\020\004\057\005\071\051\067\063\056" +
    "\064\100\065\076\066\060\001\002\000\054\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\052\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\001\002\000\030\004\057\005\071\006\074\026\054\027" +
    "\101\036\055\051\067\063\056\064\100\065\076\066\060" +
    "\001\002\000\004\054\111\001\002\000\004\054\106\001" +
    "\002\000\026\004\057\005\071\026\054\027\101\036\055" +
    "\051\067\063\056\064\100\065\076\066\060\001\002\000" +
    "\004\052\110\001\002\000\010\046\uff9c\054\uff9c\055\uff9c" +
    "\001\002\000\026\004\057\005\071\026\054\027\101\036" +
    "\055\051\067\063\056\064\100\065\076\066\060\001\002" +
    "\000\004\052\113\001\002\000\010\046\uff9b\054\uff9b\055" +
    "\uff9b\001\002\000\026\004\057\005\071\026\054\027\101" +
    "\036\055\051\067\063\056\064\100\065\076\066\060\001" +
    "\002\000\014\046\uffc4\052\uffc4\054\uffc4\055\uffc4\057\uffc4" +
    "\001\002\000\026\004\057\005\071\026\054\027\101\036" +
    "\055\051\067\063\056\064\100\065\076\066\060\001\002" +
    "\000\016\035\uffc2\046\uffc2\052\uffc2\054\uffc2\055\uffc2\057" +
    "\uffc2\001\002\000\026\004\057\005\071\026\054\027\101" +
    "\036\055\051\067\063\056\064\100\065\076\066\060\001" +
    "\002\000\026\004\057\005\071\026\054\027\101\036\055" +
    "\051\067\063\056\064\100\065\076\066\060\001\002\000" +
    "\026\004\057\005\071\026\054\027\101\036\055\051\067" +
    "\063\056\064\100\065\076\066\060\001\002\000\026\004" +
    "\057\005\071\026\054\027\101\036\055\051\067\063\056" +
    "\064\100\065\076\066\060\001\002\000\026\004\057\005" +
    "\071\026\054\027\101\036\055\051\067\063\056\064\100" +
    "\065\076\066\060\001\002\000\026\004\057\005\071\026" +
    "\054\027\101\036\055\051\067\063\056\064\100\065\076" +
    "\066\060\001\002\000\026\004\057\005\071\026\054\027" +
    "\101\036\055\051\067\063\056\064\100\065\076\066\060" +
    "\001\002\000\026\004\057\005\071\026\054\027\101\036" +
    "\055\051\067\063\056\064\100\065\076\066\060\001\002" +
    "\000\024\026\124\027\121\034\uffbf\035\uffbf\046\uffbf\052" +
    "\uffbf\054\uffbf\055\uffbf\057\uffbf\001\002\000\024\026\124" +
    "\027\121\034\uffbe\035\uffbe\046\uffbe\052\uffbe\054\uffbe\055" +
    "\uffbe\057\uffbe\001\002\000\024\026\124\027\121\034\uffbb" +
    "\035\uffbb\046\uffbb\052\uffbb\054\uffbb\055\uffbb\057\uffbb\001" +
    "\002\000\050\026\uffb9\027\uffb9\030\136\031\134\032\137" +
    "\033\135\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\046\uffb9\052\uffb9\054\uffb9\055\uffb9" +
    "\057\uffb9\001\002\000\026\004\057\005\071\026\054\027" +
    "\101\036\055\051\067\063\056\064\100\065\076\066\060" +
    "\001\002\000\026\004\057\005\071\026\054\027\101\036" +
    "\055\051\067\063\056\064\100\065\076\066\060\001\002" +
    "\000\026\004\057\005\071\026\054\027\101\036\055\051" +
    "\067\063\056\064\100\065\076\066\060\001\002\000\026" +
    "\004\057\005\071\026\054\027\101\036\055\051\067\063" +
    "\056\064\100\065\076\066\060\001\002\000\050\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\046\uffb5\052\uffb5\054\uffb5\055\uffb5\057\uffb5\001\002\000" +
    "\050\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\046\uffb6\052\uffb6\054\uffb6\055\uffb6\057\uffb6" +
    "\001\002\000\050\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\046\uffb3\052\uffb3\054\uffb3\055" +
    "\uffb3\057\uffb3\001\002\000\050\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\052\uffb4" +
    "\054\uffb4\055\uffb4\057\uffb4\001\002\000\024\026\124\027" +
    "\121\034\uffc0\035\uffc0\046\uffc0\052\uffc0\054\uffc0\055\uffc0" +
    "\057\uffc0\001\002\000\024\026\124\027\121\034\uffbd\035" +
    "\uffbd\046\uffbd\052\uffbd\054\uffbd\055\uffbd\057\uffbd\001\002" +
    "\000\050\026\uffb8\027\uffb8\030\136\031\134\032\137\033" +
    "\135\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\046\uffb8\052\uffb8\054\uffb8\055\uffb8\057" +
    "\uffb8\001\002\000\024\026\124\027\121\034\uffbc\035\uffbc" +
    "\046\uffbc\052\uffbc\054\uffbc\055\uffbc\057\uffbc\001\002\000" +
    "\004\052\151\001\002\000\054\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\052\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002\000" +
    "\006\007\157\063\156\001\002\000\026\004\057\005\071" +
    "\026\054\027\101\036\055\051\067\063\056\064\100\065" +
    "\076\066\060\001\002\000\004\057\155\001\002\000\054" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\052\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\001\002\000\054\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\052\uffae\054\uffae\055\uffae\056\uffae\057\uffae\001\002\000" +
    "\054\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\052\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\001\002\000\004\047\161\001\002\000" +
    "\052\002\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\047\uffd8\063\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8" +
    "\073\uffd8\001\002\000\030\004\057\005\071\026\054\027" +
    "\101\036\055\051\067\052\uff9f\063\056\064\100\065\076" +
    "\066\060\001\002\000\004\052\170\001\002\000\004\052" +
    "\uffa0\001\002\000\006\052\uff9d\054\166\001\002\000\026" +
    "\004\057\005\071\026\054\027\101\036\055\051\067\063" +
    "\056\064\100\065\076\066\060\001\002\000\004\052\uff9e" +
    "\001\002\000\054\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\052\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000\050\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\046\uffb1\052\uffb1\054\uffb1\055\uffb1\057\uffb1\001\002\000" +
    "\054\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\052\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\001\002\000\004\063\205\001\002\000" +
    "\006\052\uffd2\054\175\001\002\000\016\063\043\067\005" +
    "\070\034\071\006\072\024\073\025\001\002\000\004\052" +
    "\uffd6\001\002\000\006\062\200\063\201\001\002\000\004" +
    "\063\203\001\002\000\006\052\uffd2\054\175\001\002\000" +
    "\004\052\uffd3\001\002\000\006\052\uffd2\054\175\001\002" +
    "\000\004\052\uffd4\001\002\000\006\052\uffd2\054\175\001" +
    "\002\000\004\052\uffd7\001\002\000\016\063\013\067\005" +
    "\070\034\071\006\072\024\073\025\001\002\000\026\004" +
    "\057\005\071\026\054\027\101\036\055\051\067\063\056" +
    "\064\100\065\076\066\060\001\002\000\026\004\057\005" +
    "\071\026\054\027\101\036\055\051\067\063\056\064\100" +
    "\065\076\066\060\001\002\000\004\055\213\001\002\000" +
    "\026\004\057\005\071\026\054\027\101\036\055\051\067" +
    "\063\056\064\100\065\076\066\060\001\002\000\004\052" +
    "\215\001\002\000\004\046\216\001\002\000\044\010\010" +
    "\011\036\012\014\015\015\016\007\020\033\021\041\023" +
    "\004\024\031\025\032\047\uffff\063\013\067\005\070\034" +
    "\071\006\072\024\073\025\001\002\000\004\047\220\001" +
    "\002\000\052\002\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\047\uffe2\063\uffe2\067\uffe2\070\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\001\002\000\004\055\222\001\002\000" +
    "\026\004\057\005\071\026\054\027\101\036\055\051\067" +
    "\063\056\064\100\065\076\066\060\001\002\000\004\052" +
    "\224\001\002\000\004\046\225\001\002\000\044\010\010" +
    "\011\036\012\014\015\015\016\007\020\033\021\041\023" +
    "\004\024\031\025\032\047\uffff\063\013\067\005\070\034" +
    "\071\006\072\024\073\025\001\002\000\004\047\227\001" +
    "\002\000\052\002\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\047\uffe3\063\uffe3\067\uffe3\070\uffe3\071\uffe3" +
    "\072\uffe3\073\uffe3\001\002\000\004\051\231\001\002\000" +
    "\020\052\uffd5\063\043\067\005\070\034\071\006\072\024" +
    "\073\025\001\002\000\004\052\233\001\002\000\004\046" +
    "\234\001\002\000\044\010\010\011\036\012\014\015\015" +
    "\016\007\020\033\021\041\023\004\024\031\025\032\047" +
    "\uffff\063\013\067\005\070\034\071\006\072\024\073\025" +
    "\001\002\000\004\047\236\001\002\000\052\002\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\047\uffd1\063" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\001\002" +
    "\000\004\053\240\001\002\000\004\046\241\001\002\000" +
    "\006\047\uffca\063\242\001\002\000\006\047\uffc8\050\246" +
    "\001\002\000\004\047\244\001\002\000\004\055\245\001" +
    "\002\000\052\002\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\047\uffcc\063\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\001\002\000\004\063\250\001\002\000" +
    "\004\047\uffcb\001\002\000\006\047\uffc8\050\246\001\002" +
    "\000\004\047\uffc9\001\002\000\004\063\253\001\002\000" +
    "\004\055\254\001\002\000\052\002\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\047\uffc7\063\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\001\002\000\016\063" +
    "\043\067\005\070\034\071\006\072\024\073\025\001\002" +
    "\000\004\040\257\001\002\000\010\040\uffe9\062\uffe9\063" +
    "\uffe9\001\002\000\012\002\001\014\001\022\001\047\001" +
    "\001\002\000\006\053\263\055\262\001\002\000\074\002" +
    "\ufff3\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\036\ufff3\047\ufff3\051\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\001\002\000\030\004\057\005\071" +
    "\006\074\026\054\027\101\036\055\051\067\063\056\064" +
    "\100\065\076\066\060\001\002\000\004\055\265\001\002" +
    "\000\074\002\ufff2\004\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\036\ufff2\047" +
    "\ufff2\051\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\070\ufff2\071\ufff2\072\ufff2\073\ufff2\001\002\000\004\046" +
    "\267\001\002\000\044\010\010\011\036\012\014\015\015" +
    "\016\007\020\033\021\041\023\004\024\031\025\032\047" +
    "\uffff\063\013\067\005\070\034\071\006\072\024\073\025" +
    "\001\002\000\004\047\271\001\002\000\054\002\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\272" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\047" +
    "\uffe5\063\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\001\002\000\004\046\274\001\002\000\052\002\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\047\uffe7\063" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\001\002" +
    "\000\044\010\010\011\036\012\014\015\015\016\007\020" +
    "\033\021\041\023\004\024\031\025\032\047\uffff\063\013" +
    "\067\005\070\034\071\006\072\024\073\025\001\002\000" +
    "\004\047\276\001\002\000\052\002\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\047\uffe6\063\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\073\uffe6\001\002\000\004\063" +
    "\300\001\002\000\010\045\302\052\uffee\056\301\001\002" +
    "\000\026\004\057\005\071\026\054\027\101\036\055\051" +
    "\067\063\056\064\100\065\076\066\060\001\002\000\004" +
    "\063\330\001\002\000\004\052\304\001\002\000\004\046" +
    "\305\001\002\000\006\013\307\061\306\001\002\000\004" +
    "\060\326\001\002\000\016\004\314\005\316\063\320\064" +
    "\315\065\313\066\317\001\002\000\004\047\311\001\002" +
    "\000\052\002\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\047\uffe1\063\uffe1\067\uffe1\070\uffe1\071\uffe1\072" +
    "\uffe1\073\uffe1\001\002\000\004\060\321\001\002\000\004" +
    "\060\uffdd\001\002\000\004\060\uffdc\001\002\000\004\060" +
    "\uffde\001\002\000\004\060\uffdb\001\002\000\004\060\uffda" +
    "\001\002\000\004\060\uffd9\001\002\000\044\010\010\011" +
    "\036\012\014\014\uffff\015\015\016\007\020\033\021\041" +
    "\023\004\024\031\025\032\063\013\067\005\070\034\071" +
    "\006\072\024\073\025\001\002\000\004\014\323\001\002" +
    "\000\004\055\324\001\002\000\006\013\307\061\306\001" +
    "\002\000\004\047\uffe0\001\002\000\044\010\010\011\036" +
    "\012\014\015\015\016\007\020\033\021\041\023\004\024" +
    "\031\025\032\047\uffff\063\013\067\005\070\034\071\006" +
    "\072\024\073\025\001\002\000\004\047\uffdf\001\002\000" +
    "\012\045\302\052\uffee\053\uffee\056\301\001\002\000\006" +
    "\052\uffef\053\uffef\001\002\000\004\057\333\001\002\000" +
    "\012\045\302\052\uffee\053\uffee\056\301\001\002\000\006" +
    "\052\ufff0\053\ufff0\001\002\000\004\053\336\001\002\000" +
    "\030\004\057\005\071\006\074\026\054\027\101\036\055" +
    "\051\067\063\056\064\100\065\076\066\060\001\002\000" +
    "\004\055\340\001\002\000\074\002\ufff1\004\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\036\ufff1\047\ufff1\051\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1" +
    "\001\002\000\004\002\000\001\002\000\004\046\343\001" +
    "\002\000\044\010\010\011\036\012\014\015\015\016\007" +
    "\020\033\021\041\023\004\024\031\025\032\047\uffff\063" +
    "\013\067\005\070\034\071\006\072\024\073\025\001\002" +
    "\000\004\047\345\001\002\000\052\002\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\047\uffe4\063\uffe4\067" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\001\002\000\004" +
    "\051\347\001\002\000\030\004\057\005\071\026\054\027" +
    "\101\036\055\051\067\052\uff9f\063\056\064\100\065\076" +
    "\066\060\001\002\000\004\052\351\001\002\000\004\055" +
    "\352\001\002\000\052\002\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\047\uffd0\063\uffd0\067\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\073\uffd0\001\002\000\004\046\354\001" +
    "\002\000\004\047\uffcd\001\002\000\004\047\360\001\002" +
    "\000\004\047\uffcd\001\002\000\004\047\uffce\001\002\000" +
    "\052\002\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\047\uffcf\063\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\036\002\010\003\016\006\026\026\011\027" +
    "\022\030\017\031\037\032\027\033\025\034\034\035\021" +
    "\036\036\037\020\046\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\011\341\012\074\013\072\014\071\015\067\016\065\017" +
    "\064\020\063\021\061\022\060\023\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\334\001\001\000" +
    "\002\001\001\000\030\011\265\012\074\013\072\014\071" +
    "\015\067\016\065\017\064\020\063\021\061\022\060\023" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\002\010\003\016\006\026\026\257\027\022\030\017\031" +
    "\037\032\027\033\025\034\034\035\021\036\036\037\020" +
    "\046\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\046\046\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\010\003\016\006\026\026" +
    "\051\027\022\030\017\031\037\032\027\033\025\034\034" +
    "\035\021\036\036\037\020\046\015\001\001\000\002\001" +
    "\001\000\030\011\062\012\074\013\072\014\071\015\067" +
    "\016\065\017\064\020\063\021\061\022\060\023\076\001" +
    "\001\000\004\022\171\001\001\000\012\017\170\020\063" +
    "\021\061\022\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\012\147\013\072\014\071\015\067" +
    "\016\065\017\064\020\063\021\061\022\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\101" +
    "\001\001\000\002\001\001\000\026\012\103\013\072\014" +
    "\071\015\067\016\065\017\064\020\063\021\061\022\060" +
    "\023\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\106\013\072\014\071\015\067\016\065\017\064" +
    "\020\063\021\061\022\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\012\111\013\072\014\071\015\067" +
    "\016\065\017\064\020\063\021\061\022\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\114\013\072" +
    "\014\071\015\067\016\065\017\064\020\063\021\061\022" +
    "\060\001\001\000\002\001\001\000\022\013\116\014\071" +
    "\015\067\016\065\017\064\020\063\021\061\022\060\001" +
    "\001\000\002\001\001\000\016\015\146\016\065\017\064" +
    "\020\063\021\061\022\060\001\001\000\014\016\145\017" +
    "\064\020\063\021\061\022\060\001\001\000\016\015\144" +
    "\016\065\017\064\020\063\021\061\022\060\001\001\000" +
    "\016\015\143\016\065\017\064\020\063\021\061\022\060" +
    "\001\001\000\014\016\132\017\064\020\063\021\061\022" +
    "\060\001\001\000\016\015\131\016\065\017\064\020\063" +
    "\021\061\022\060\001\001\000\016\015\130\016\065\017" +
    "\064\020\063\021\061\022\060\001\001\000\016\015\127" +
    "\016\065\017\064\020\063\021\061\022\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\142\020\063\021\061\022\060\001" +
    "\001\000\012\017\141\020\063\021\061\022\060\001\001" +
    "\000\012\017\140\020\063\021\061\022\060\001\001\000" +
    "\012\017\137\020\063\021\061\022\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\012\153\013\072\014\071\015\067" +
    "\016\065\017\064\020\063\021\061\022\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\164\013\072\014\071\015\067\016\065\017\064\020\063" +
    "\021\061\022\060\041\162\042\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\164" +
    "\013\072\014\071\015\067\016\065\017\064\020\063\021" +
    "\061\022\060\042\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\175\001\001\000\004\046\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\201\001\001\000\002\001\001\000\004\045\203" +
    "\001\001\000\002\001\001\000\004\045\205\001\001\000" +
    "\002\001\001\000\010\032\207\033\210\046\015\001\001" +
    "\000\024\012\220\013\072\014\071\015\067\016\065\017" +
    "\064\020\063\021\061\022\060\001\001\000\024\012\211" +
    "\013\072\014\071\015\067\016\065\017\064\020\063\021" +
    "\061\022\060\001\001\000\002\001\001\000\024\012\213" +
    "\013\072\014\071\015\067\016\065\017\064\020\063\021" +
    "\061\022\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\010\003\016\006\026\026\216\027\022\030" +
    "\017\031\037\032\027\033\025\034\034\035\021\036\036" +
    "\037\020\046\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\222\013\072\014\071" +
    "\015\067\016\065\017\064\020\063\021\061\022\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\002\010" +
    "\003\016\006\026\026\225\027\022\030\017\031\037\032" +
    "\027\033\025\034\034\035\021\036\036\037\020\046\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\231\046\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\010\003\016\006\026\026" +
    "\234\027\022\030\017\031\037\032\027\033\025\034\034" +
    "\035\021\036\036\037\020\046\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\242\001\001\000\004\005\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\263\012\074\013\072\014\071\015" +
    "\067\016\065\017\064\020\063\021\061\022\060\023\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\002\010\003\016\006\026\026\267\027\022" +
    "\030\017\031\037\032\027\033\025\034\034\035\021\036" +
    "\036\037\020\046\015\001\001\000\002\001\001\000\004" +
    "\025\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\010\003\016\006\026\026\274\027\022\030\017" +
    "\031\037\032\027\033\025\034\034\035\021\036\036\037" +
    "\020\046\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\302\001\001\000\024\012" +
    "\331\013\072\014\071\015\067\016\065\017\064\020\063" +
    "\021\061\022\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\307\001\001\000\002" +
    "\001\001\000\004\024\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\010\003\016\006\026" +
    "\026\321\027\022\030\017\031\037\032\027\033\025\034" +
    "\034\035\021\036\036\037\020\046\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\324\001\001\000" +
    "\002\001\001\000\036\002\010\003\016\006\026\026\326" +
    "\027\022\030\017\031\037\032\027\033\025\034\034\035" +
    "\021\036\036\037\020\046\015\001\001\000\002\001\001" +
    "\000\004\040\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\336\012\074\013\072\014\071\015" +
    "\067\016\065\017\064\020\063\021\061\022\060\023\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\010\003\016\006\026" +
    "\026\343\027\022\030\017\031\037\032\027\033\025\034" +
    "\034\035\021\036\036\037\020\046\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\164\013\072\014\071\015\067\016\065\017\064\020\063" +
    "\021\061\022\060\041\347\042\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\355\010\354\001\001\000\002\001\001\000" +
    "\006\007\355\010\356\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              P RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		P prog = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 prog.anadeIns(ins);
	   RESULT = prog; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		P start_val = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              P RESULT =null;
		 RESULT = as.programa(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= InsCond 
            {
              Ins RESULT =null;
		Ins valorInsCond = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsCond; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsBucle 
            {
              Ins RESULT =null;
		Ins valorInsBucle = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsBucle; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsDec 
            {
              Ins RESULT =null;
		Ins valorInsDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsDec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsAsig 
            {
              Ins RESULT =null;
		Ins valorInsAsig = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsAsig; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsCall 
            {
              Ins RESULT =null;
		Ins valorInsCall = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsCall; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsSwitch 
            {
              Ins RESULT =null;
		Ins valorInsSwitch = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsSwitch; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsFun 
            {
              Ins RESULT =null;
		Ins valorInsFun = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsFun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsProc 
            {
              Ins RESULT =null;
		Ins valorInsProc = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsProc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsStruct 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsEnum 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= InsTypeDef 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // InsDec ::= Tipo IDEN PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.insDec(tipo, as.iden(lexDeIden), false, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsDec ::= Tipo IDEN IGUAL Exp PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.insDec(tipo, as.iden(lexDeIden), true, valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsAsig ::= IDEN CorchetesPuntosIzq IGUAL Exp PUNTOYCOMA 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<CorchetesYPuntosIzq> listaPuntosCorchetes = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insAsig(as.iden(lexDeIden), listaPuntosCorchetes, valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CorchetesPuntosIzq ::= CORCHETEAP Exp0 CORCHETECIERRE CorchetesPuntosIzq 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<CorchetesYPuntosIzq> valorCorchPunto = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 valorCorchPunto.add(0, as.corchetesIzq(valorExp));
		RESULT = valorCorchPunto; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CorchetesPuntosIzq ::= PUNTO IDEN CorchetesPuntosIzq 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<CorchetesYPuntosIzq> valorCorchPunto = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 valorCorchPunto.add(0, as.puntosIzq(as.iden(lexDeIden)));
		RESULT = valorCorchPunto; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CorchetesPuntosIzq ::= 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		 RESULT = new ArrayList<CorchetesYPuntosIzq>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= INT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoInt(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= BOOL 
            {
              Tipos RESULT =null;
		RESULT = as.tipoBool(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= CHAR 
            {
              Tipos RESULT =null;
		RESULT = as.tipoChar(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= FLOAT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoFloat(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Tipos RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.tipoVector(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= IDEN 
            {
              Tipos RESULT =null;
		String lexIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.tipoUsuario(lexIden); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InsCond ::= IF Exp LLAVESAP P LLAVESCIERRE ConElse 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		IfConElse insElse = (IfConElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		  if(insElse.isVieneConElse()){
	   		RESULT = as.insIfConElse(cond, insIf, insElse.getInstElse());
	   	}
	   	else{
	   		RESULT = as.insIfSinElse(cond, insIf);
	   	}
	 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ConElse ::= ELSE LLAVESAP P LLAVESCIERRE 
            {
              IfConElse RESULT =null;
		P insElse = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.ifConElse(true, insElse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConElse ::= 
            {
              IfConElse RESULT =null;
		RESULT = as.ifConElse(false, new P()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // InsBucle ::= WHILE Exp LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		P ins = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insWhile(cond, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InsBucle ::= FOR PAP InsDec Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		Ins insDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insDec, cond, paso, inst); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InsBucle ::= FOR PAP InsAsig Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		Ins insAsig = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insAsig, cond, paso, inst); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InsSwitch ::= SWITCH PAP IDEN CorchetesPuntosIzq PCIERRE LLAVESAP ListaCase LLAVESCIERRE 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		List<CorchetesYPuntosIzq> listaPyC = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<Case> lista = (List<Case>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insSwitch(as.iden(lexDeIden), listaPyC, lista); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsSwitch",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListaCase ::= CASE TiposSwitch DOSPUNTOS P BREAK PUNTOYCOMA ListaCase 
            {
              List<Case> RESULT =null;
		E var = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<Case> lista = (List<Case>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(0, as.createCase(var, instr));
       RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaCase ::= DEFAULT DOSPUNTOS P 
            {
              List<Case> RESULT =null;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<Case> lista = new ArrayList<Case>();
	 	lista.add(0, as.createCase(as.iden("default"), instr));
	 	RESULT = lista;
	 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TiposSwitch ::= ENT 
            {
              E RESULT =null;
		String lexDeEnt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TiposSwitch ::= REAL 
            {
              E RESULT =null;
		String lexDeReal = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TiposSwitch ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.verdadero(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TiposSwitch ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.falso(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TiposSwitch ::= CARACTER 
            {
              E RESULT =null;
		String lexDeCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TiposSwitch ::= IDEN 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.iden(lexDeIden); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InsFun ::= FUN Tipo IDEN PAP Parametros PCIERRE LLAVESAP P RETURN Exp PUNTOYCOMA LLAVESCIERRE 
            {
              Ins RESULT =null;
		Tipos tipoReturn = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		E valorReturn = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insFun(tipoReturn, as.iden(lexDeIden), params, instr, valorReturn); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Parametros ::= Tipo AMPERSAND IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.REFERENCIA, as.iden(lexDeIden)));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Parametros ::= Tipo IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.VALOR, as.iden(lexDeIden)));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Parametros ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParamElige ::= COMA Tipo AMPERSAND IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.REFERENCIA, as.iden(lexDeIden)));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              List<Param> RESULT =null;
		Tipos tipoParam = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<Param> lista = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, as.param(tipoParam, TipoParam.VALOR, as.iden(lexDeIden)));
		RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ParamElige ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InsProc ::= PROC IDEN PAP Parametros PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P instr = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insProc(as.iden(lexDeIden), params, instr); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InsCall ::= CALL IDEN PAP ListaArg PCIERRE PUNTOYCOMA 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.insCall(as.iden(lexDeIden), lista); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LDec ::= DecConNuevosTipos LDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LEnum ::= IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LEnum ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LEnumElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp ::= Exp0 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT= valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp ::= CreaVector 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp0 ::= Exp1 OR Exp0 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.or(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.and(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.igualIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp2 ::= Exp3 MENOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.distinto(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp3 ::= Exp3 SUMA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.suma(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp3 ::= Exp3 RESTA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.resta(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp4 ::= Exp4 MUL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mul(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divEnt(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divReal(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp4 ::= Exp4 MODULO Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.modulo(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp5 ::= NOT Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.corchetes(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.punto(valorExp, as.iden(lexDeIden)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.size(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp7 ::= RESTA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.restaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp7 ::= SUMA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.sumaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp7 ::= Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp8 ::= ENT 
            {
              E RESULT =null;
		String lexDeEnt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp8 ::= REAL 
            {
              E RESULT =null;
		String lexDeReal = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp8 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.verdadero(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp8 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.falso(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp8 ::= CARACTER 
            {
              E RESULT =null;
		String lexDeCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp8 ::= IDEN PAP ListaArg PCIERRE 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.llamadaFun(as.iden(lexDeIden), lista); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp8 ::= IDEN 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.iden(lexDeIden); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ListaArg ::= ListaArg1 
            {
              List<E> RESULT =null;
		List<E> valorExp = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ListaArg ::= 
            {
              List<E> RESULT =null;
		 RESULT = new ArrayList<E>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ListaArg1 ::= Exp0 COMA ListaArg1 
            {
              List<E> RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<E> lista = (List<E>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 lista.add(0, elem);
	   RESULT = lista; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ListaArg1 ::= Exp0 
            {
              List<E> RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<E> args = new ArrayList<E>();
	   args.add(elem);
	   RESULT = args; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

