
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 18 16:11:29 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import ast.E;
import ast.AS;
import ast.Ins;
import java.util.List;
import java.util.ArrayList;
import ast.FuncionOIden;
import ast.IfConElse;
import ast.P;
import ast.Tipos;
import ast.CorchetesYPuntosIzq;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 18 16:11:29 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\042\004\000\002\002\004\000\002\042" +
    "\002\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\046\005\000\002\046" +
    "\007\000\002\047\007\000\002\050\006\000\002\050\005" +
    "\000\002\050\002\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\006\000\002" +
    "\051\003\000\002\043\010\000\002\041\006\000\002\041" +
    "\002\000\002\045\007\000\002\045\014\000\002\045\014" +
    "\000\002\020\012\000\002\021\011\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\002" +
    "\016\000\002\003\005\000\002\003\002\000\002\004\006" +
    "\000\002\004\002\000\002\005\012\000\002\006\010\000" +
    "\002\007\004\000\002\007\002\000\002\010\005\000\002" +
    "\010\002\000\002\011\007\000\002\017\004\000\002\017" +
    "\002\000\002\012\011\000\002\013\004\000\002\013\002" +
    "\000\002\014\005\000\002\014\002\000\002\015\006\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\003\000" +
    "\002\027\005\000\002\027\005\000\002\027\003\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\031\004\000\002\031\003" +
    "\000\002\032\006\000\002\032\005\000\002\032\005\000" +
    "\002\032\003\000\002\033\004\000\002\033\004\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\004" +
    "\000\002\034\005\000\002\040\005\000\002\040\002\000" +
    "\002\036\003\000\002\036\002\000\002\037\005\000\002" +
    "\037\003\000\002\035\010\000\002\035\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\044\002\uffff\010\010\011\036\012\014\015" +
    "\015\016\006\020\033\021\041\023\004\024\031\025\032" +
    "\062\013\066\005\067\034\070\007\071\024\072\025\001" +
    "\002\000\004\062\353\001\002\000\006\040\uffed\062\uffed" +
    "\001\002\000\004\062\341\001\002\000\006\040\uffeb\062" +
    "\uffeb\001\002\000\030\004\057\005\070\006\074\026\054" +
    "\027\101\036\055\051\067\062\056\063\100\064\076\065" +
    "\060\001\002\000\052\002\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\047\ufff7\062\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\071\ufff7\072\ufff7\001\002\000\004\002\334\001" +
    "\002\000\012\045\275\053\uffee\056\274\062\uffe8\001\002" +
    "\000\004\051\272\001\002\000\030\004\057\005\070\006" +
    "\074\026\054\027\101\036\055\051\067\062\056\063\100" +
    "\064\076\065\060\001\002\000\004\062\254\001\002\000" +
    "\052\002\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\047\ufff6\062\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\001\002\000\052\002\uffff\010\010\011\036\012" +
    "\014\014\uffff\015\015\016\006\020\033\021\041\022\uffff" +
    "\023\004\024\031\025\032\047\uffff\062\013\066\005\067" +
    "\034\070\007\071\024\072\025\001\002\000\052\002\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\047\ufffa" +
    "\062\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\001" +
    "\002\000\052\002\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\047\ufff8\062\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\071\ufff8\072\ufff8\001\002\000\052\002\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\014\ufffe\015\ufffe\016\ufffe\020\ufffe\021\ufffe" +
    "\022\ufffe\023\ufffe\024\ufffe\025\ufffe\047\ufffe\062\ufffe\066" +
    "\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\001\002\000\006" +
    "\040\uffea\062\uffea\001\002\000\004\037\250\001\002\000" +
    "\052\002\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\047\ufffb\062\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\001\002\000\052\002\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\047\ufff5\062\ufff5\066\ufff5\067" +
    "\ufff5\070\ufff5\071\ufff5\072\ufff5\001\002\000\052\002\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\047\ufffc" +
    "\062\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\001" +
    "\002\000\016\062\043\066\005\067\034\070\007\071\024" +
    "\072\025\001\002\000\004\062\232\001\002\000\004\062" +
    "\223\001\002\000\006\040\uffec\062\uffec\001\002\000\052" +
    "\002\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\047\ufff4\062\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072" +
    "\ufff4\001\002\000\004\051\202\001\002\000\052\002\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\047\ufff9" +
    "\062\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\001" +
    "\002\000\052\002\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\047\ufffd\062\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\001\002\000\016\062\043\066\005\067" +
    "\034\070\007\071\024\072\025\001\002\000\004\062\044" +
    "\001\002\000\006\040\uffe8\062\uffe8\001\002\000\004\051" +
    "\045\001\002\000\020\052\uffd6\062\043\066\005\067\034" +
    "\070\007\071\024\072\025\001\002\000\004\062\174\001" +
    "\002\000\004\052\050\001\002\000\004\046\051\001\002" +
    "\000\044\010\010\011\036\012\014\015\015\016\006\020" +
    "\033\021\041\022\uffff\023\004\024\031\025\032\062\013" +
    "\066\005\067\034\070\007\071\024\072\025\001\002\000" +
    "\004\022\053\001\002\000\030\004\057\005\070\006\074" +
    "\026\054\027\101\036\055\051\067\062\056\063\100\064" +
    "\076\065\060\001\002\000\020\004\057\005\070\051\067" +
    "\062\056\063\100\064\076\065\060\001\002\000\026\004" +
    "\057\005\070\026\054\027\101\036\055\051\067\062\056" +
    "\063\100\064\076\065\060\001\002\000\056\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\051\162\052\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\001\002\000\054\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\052" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\001\002\000\054" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\052\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\001\002\000\054\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\052\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002\000" +
    "\054\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\052\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\001\002\000\004\055\160\001\002\000" +
    "\054\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\152\046\uffae\052\uffae\054\uffae\055\uffae" +
    "\056\153\057\uffae\001\002\000\050\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0\052" +
    "\uffb0\054\uffb0\055\uffb0\057\uffb0\001\002\000\050\026\uffb5" +
    "\027\uffb5\030\136\031\134\032\137\033\135\034\uffb5\035" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\046\uffb5\052\uffb5\054\uffb5\055\uffb5\057\uffb5\001\002\000" +
    "\026\004\057\005\070\026\054\027\101\036\055\051\067" +
    "\062\056\063\100\064\076\065\060\001\002\000\054\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\052\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\057\uffa3\001\002\000\040\026\124\027\120\034\uffb8\035" +
    "\uffb8\037\126\040\127\041\122\042\121\043\123\044\125" +
    "\046\uffb8\052\uffb8\054\uffb8\055\uffb8\057\uffb8\001\002\000" +
    "\020\034\116\035\uffbf\046\uffbf\052\uffbf\054\uffbf\055\uffbf" +
    "\057\uffbf\001\002\000\016\035\114\046\uffc1\052\uffc1\054" +
    "\uffc1\055\uffc1\057\uffc1\001\002\000\004\051\103\001\002" +
    "\000\006\046\uffc4\055\uffc4\001\002\000\054\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\052\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\001\002\000\006\046\uffc3\055\uffc3\001\002\000\054\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\052\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\001\002\000\020\004\057\005\070\051\067\062" +
    "\056\063\100\064\076\065\060\001\002\000\054\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\052\uffa9\054\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\001\002\000\030\004\057\005\070\006\074\026\054" +
    "\027\101\036\055\051\067\062\056\063\100\064\076\065" +
    "\060\001\002\000\004\054\111\001\002\000\004\054\106" +
    "\001\002\000\026\004\057\005\070\026\054\027\101\036" +
    "\055\051\067\062\056\063\100\064\076\065\060\001\002" +
    "\000\004\052\110\001\002\000\010\046\uff99\054\uff99\055" +
    "\uff99\001\002\000\026\004\057\005\070\026\054\027\101" +
    "\036\055\051\067\062\056\063\100\064\076\065\060\001" +
    "\002\000\004\052\113\001\002\000\010\046\uff98\054\uff98" +
    "\055\uff98\001\002\000\026\004\057\005\070\026\054\027" +
    "\101\036\055\051\067\062\056\063\100\064\076\065\060" +
    "\001\002\000\014\046\uffc2\052\uffc2\054\uffc2\055\uffc2\057" +
    "\uffc2\001\002\000\026\004\057\005\070\026\054\027\101" +
    "\036\055\051\067\062\056\063\100\064\076\065\060\001" +
    "\002\000\016\035\uffc0\046\uffc0\052\uffc0\054\uffc0\055\uffc0" +
    "\057\uffc0\001\002\000\026\004\057\005\070\026\054\027" +
    "\101\036\055\051\067\062\056\063\100\064\076\065\060" +
    "\001\002\000\026\004\057\005\070\026\054\027\101\036" +
    "\055\051\067\062\056\063\100\064\076\065\060\001\002" +
    "\000\026\004\057\005\070\026\054\027\101\036\055\051" +
    "\067\062\056\063\100\064\076\065\060\001\002\000\026" +
    "\004\057\005\070\026\054\027\101\036\055\051\067\062" +
    "\056\063\100\064\076\065\060\001\002\000\026\004\057" +
    "\005\070\026\054\027\101\036\055\051\067\062\056\063" +
    "\100\064\076\065\060\001\002\000\026\004\057\005\070" +
    "\026\054\027\101\036\055\051\067\062\056\063\100\064" +
    "\076\065\060\001\002\000\026\004\057\005\070\026\054" +
    "\027\101\036\055\051\067\062\056\063\100\064\076\065" +
    "\060\001\002\000\026\004\057\005\070\026\054\027\101" +
    "\036\055\051\067\062\056\063\100\064\076\065\060\001" +
    "\002\000\024\026\124\027\120\034\uffbd\035\uffbd\046\uffbd" +
    "\052\uffbd\054\uffbd\055\uffbd\057\uffbd\001\002\000\024\026" +
    "\124\027\120\034\uffbc\035\uffbc\046\uffbc\052\uffbc\054\uffbc" +
    "\055\uffbc\057\uffbc\001\002\000\024\026\124\027\120\034" +
    "\uffb9\035\uffb9\046\uffb9\052\uffb9\054\uffb9\055\uffb9\057\uffb9" +
    "\001\002\000\050\026\uffb7\027\uffb7\030\136\031\134\032" +
    "\137\033\135\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\046\uffb7\052\uffb7\054\uffb7\055" +
    "\uffb7\057\uffb7\001\002\000\026\004\057\005\070\026\054" +
    "\027\101\036\055\051\067\062\056\063\100\064\076\065" +
    "\060\001\002\000\026\004\057\005\070\026\054\027\101" +
    "\036\055\051\067\062\056\063\100\064\076\065\060\001" +
    "\002\000\026\004\057\005\070\026\054\027\101\036\055" +
    "\051\067\062\056\063\100\064\076\065\060\001\002\000" +
    "\026\004\057\005\070\026\054\027\101\036\055\051\067" +
    "\062\056\063\100\064\076\065\060\001\002\000\050\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\046\uffb3\052\uffb3\054\uffb3\055\uffb3\057\uffb3\001\002" +
    "\000\050\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\046\uffb4\052\uffb4\054\uffb4\055\uffb4\057" +
    "\uffb4\001\002\000\050\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\046\uffb1\052\uffb1\054\uffb1" +
    "\055\uffb1\057\uffb1\001\002\000\050\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\052" +
    "\uffb2\054\uffb2\055\uffb2\057\uffb2\001\002\000\024\026\124" +
    "\027\120\034\uffbe\035\uffbe\046\uffbe\052\uffbe\054\uffbe\055" +
    "\uffbe\057\uffbe\001\002\000\024\026\124\027\120\034\uffba" +
    "\035\uffba\046\uffba\052\uffba\054\uffba\055\uffba\057\uffba\001" +
    "\002\000\024\026\124\027\120\034\uffbb\035\uffbb\046\uffbb" +
    "\052\uffbb\054\uffbb\055\uffbb\057\uffbb\001\002\000\050\026" +
    "\uffb6\027\uffb6\030\136\031\134\032\137\033\135\034\uffb6" +
    "\035\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\046\uffb6\052\uffb6\054\uffb6\055\uffb6\057\uffb6\001\002" +
    "\000\004\052\151\001\002\000\054\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\052\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\001\002" +
    "\000\006\007\157\062\156\001\002\000\026\004\057\005" +
    "\070\026\054\027\101\036\055\051\067\062\056\063\100" +
    "\064\076\065\060\001\002\000\004\057\155\001\002\000" +
    "\054\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\052\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\001\002\000\054\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\052\uffac\054\uffac\055\uffac\056\uffac\057\uffac\001\002" +
    "\000\054\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\052\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\001\002\000\004\047\161\001\002" +
    "\000\052\002\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\047\uffd8\062\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\001\002\000\030\004\057\005\070\026\054" +
    "\027\101\036\055\051\067\052\uff9c\062\056\063\100\064" +
    "\076\065\060\001\002\000\054\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\052\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002\000" +
    "\004\052\171\001\002\000\004\052\uff9d\001\002\000\006" +
    "\052\uff9a\054\167\001\002\000\026\004\057\005\070\026" +
    "\054\027\101\036\055\051\067\062\056\063\100\064\076" +
    "\065\060\001\002\000\004\052\uff9b\001\002\000\054\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\052\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\001\002\000\050\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\052\uffaf\054" +
    "\uffaf\055\uffaf\057\uffaf\001\002\000\054\026\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\052\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\001" +
    "\002\000\006\052\uffd4\054\175\001\002\000\016\062\043" +
    "\066\005\067\034\070\007\071\024\072\025\001\002\000" +
    "\004\052\uffd7\001\002\000\004\062\200\001\002\000\006" +
    "\052\uffd4\054\175\001\002\000\004\052\uffd5\001\002\000" +
    "\016\062\013\066\005\067\034\070\007\071\024\072\025" +
    "\001\002\000\026\004\057\005\070\026\054\027\101\036" +
    "\055\051\067\062\056\063\100\064\076\065\060\001\002" +
    "\000\026\004\057\005\070\026\054\027\101\036\055\051" +
    "\067\062\056\063\100\064\076\065\060\001\002\000\004" +
    "\055\206\001\002\000\026\004\057\005\070\026\054\027" +
    "\101\036\055\051\067\062\056\063\100\064\076\065\060" +
    "\001\002\000\004\052\210\001\002\000\004\046\211\001" +
    "\002\000\044\010\010\011\036\012\014\015\015\016\006" +
    "\020\033\021\041\023\004\024\031\025\032\047\uffff\062" +
    "\013\066\005\067\034\070\007\071\024\072\025\001\002" +
    "\000\004\047\213\001\002\000\052\002\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\047\uffe2\062\uffe2\066" +
    "\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\001\002\000\004" +
    "\055\215\001\002\000\026\004\057\005\070\026\054\027" +
    "\101\036\055\051\067\062\056\063\100\064\076\065\060" +
    "\001\002\000\004\052\217\001\002\000\004\046\220\001" +
    "\002\000\044\010\010\011\036\012\014\015\015\016\006" +
    "\020\033\021\041\023\004\024\031\025\032\047\uffff\062" +
    "\013\066\005\067\034\070\007\071\024\072\025\001\002" +
    "\000\004\047\222\001\002\000\052\002\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\047\uffe3\062\uffe3\066" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\001\002\000\004" +
    "\051\224\001\002\000\020\052\uffd6\062\043\066\005\067" +
    "\034\070\007\071\024\072\025\001\002\000\004\052\226" +
    "\001\002\000\004\046\227\001\002\000\044\010\010\011" +
    "\036\012\014\015\015\016\006\020\033\021\041\023\004" +
    "\024\031\025\032\047\uffff\062\013\066\005\067\034\070" +
    "\007\071\024\072\025\001\002\000\004\047\231\001\002" +
    "\000\052\002\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\047\uffd3\062\uffd3\066\uffd3\067\uffd3\070\uffd3\071" +
    "\uffd3\072\uffd3\001\002\000\004\053\233\001\002\000\004" +
    "\046\234\001\002\000\006\047\uffc8\062\235\001\002\000" +
    "\006\047\uffc6\050\241\001\002\000\004\047\237\001\002" +
    "\000\004\055\240\001\002\000\052\002\uffca\010\uffca\011" +
    "\uffca\012\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\047\uffca\062\uffca\066" +
    "\uffca\067\uffca\070\uffca\071\uffca\072\uffca\001\002\000\004" +
    "\062\243\001\002\000\004\047\uffc9\001\002\000\006\047" +
    "\uffc6\050\241\001\002\000\004\047\uffc7\001\002\000\004" +
    "\062\246\001\002\000\004\055\247\001\002\000\052\002" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\047" +
    "\uffc5\062\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\001\002\000\016\062\043\066\005\067\034\070\007\071" +
    "\024\072\025\001\002\000\004\040\252\001\002\000\006" +
    "\040\uffe9\062\uffe9\001\002\000\012\002\001\014\001\022" +
    "\001\047\001\001\002\000\006\053\256\055\255\001\002" +
    "\000\074\002\ufff3\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\036\ufff3\047" +
    "\ufff3\051\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\001\002\000\030\004" +
    "\057\005\070\006\074\026\054\027\101\036\055\051\067" +
    "\062\056\063\100\064\076\065\060\001\002\000\004\055" +
    "\260\001\002\000\074\002\ufff2\004\ufff2\005\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\036\ufff2\047\ufff2\051\ufff2\062\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\001\002" +
    "\000\004\046\262\001\002\000\044\010\010\011\036\012" +
    "\014\015\015\016\006\020\033\021\041\023\004\024\031" +
    "\025\032\047\uffff\062\013\066\005\067\034\070\007\071" +
    "\024\072\025\001\002\000\004\047\264\001\002\000\054" +
    "\002\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\265\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\047\uffe5\062\uffe5\066\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\072\uffe5\001\002\000\004\046\267\001\002\000\052" +
    "\002\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\047\uffe7\062\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072" +
    "\uffe7\001\002\000\044\010\010\011\036\012\014\015\015" +
    "\016\006\020\033\021\041\023\004\024\031\025\032\047" +
    "\uffff\062\013\066\005\067\034\070\007\071\024\072\025" +
    "\001\002\000\004\047\271\001\002\000\052\002\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\047\uffe6\062" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\001\002" +
    "\000\004\062\273\001\002\000\010\045\275\052\uffee\056" +
    "\274\001\002\000\026\004\057\005\070\026\054\027\101" +
    "\036\055\051\067\062\056\063\100\064\076\065\060\001" +
    "\002\000\004\062\323\001\002\000\004\052\277\001\002" +
    "\000\004\046\300\001\002\000\006\013\302\061\301\001" +
    "\002\000\004\060\321\001\002\000\016\004\307\005\311" +
    "\062\313\063\310\064\306\065\312\001\002\000\004\047" +
    "\304\001\002\000\052\002\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\047\uffe1\062\uffe1\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\001\002\000\004\060\314\001" +
    "\002\000\004\060\uffdd\001\002\000\004\060\uffdc\001\002" +
    "\000\004\060\uffde\001\002\000\004\060\uffdb\001\002\000" +
    "\004\060\uffda\001\002\000\004\060\uffd9\001\002\000\044" +
    "\010\010\011\036\012\014\014\uffff\015\015\016\006\020" +
    "\033\021\041\023\004\024\031\025\032\062\013\066\005" +
    "\067\034\070\007\071\024\072\025\001\002\000\004\014" +
    "\316\001\002\000\004\055\317\001\002\000\006\013\302" +
    "\061\301\001\002\000\004\047\uffe0\001\002\000\044\010" +
    "\010\011\036\012\014\015\015\016\006\020\033\021\041" +
    "\023\004\024\031\025\032\047\uffff\062\013\066\005\067" +
    "\034\070\007\071\024\072\025\001\002\000\004\047\uffdf" +
    "\001\002\000\012\045\275\052\uffee\053\uffee\056\274\001" +
    "\002\000\006\052\uffef\053\uffef\001\002\000\004\057\326" +
    "\001\002\000\012\045\275\052\uffee\053\uffee\056\274\001" +
    "\002\000\006\052\ufff0\053\ufff0\001\002\000\004\053\331" +
    "\001\002\000\030\004\057\005\070\006\074\026\054\027" +
    "\101\036\055\051\067\062\056\063\100\064\076\065\060" +
    "\001\002\000\004\055\333\001\002\000\074\002\ufff1\004" +
    "\ufff1\005\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\036\ufff1\047\ufff1\051\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071" +
    "\ufff1\072\ufff1\001\002\000\004\002\000\001\002\000\004" +
    "\046\336\001\002\000\044\010\010\011\036\012\014\015" +
    "\015\016\006\020\033\021\041\023\004\024\031\025\032" +
    "\047\uffff\062\013\066\005\067\034\070\007\071\024\072" +
    "\025\001\002\000\004\047\340\001\002\000\052\002\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\047\uffe4" +
    "\062\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\001" +
    "\002\000\004\051\342\001\002\000\006\052\uffd0\062\344" +
    "\001\002\000\004\052\351\001\002\000\006\052\uffce\054" +
    "\345\001\002\000\004\062\347\001\002\000\004\052\uffd1" +
    "\001\002\000\006\052\uffce\054\345\001\002\000\004\052" +
    "\uffcf\001\002\000\004\055\352\001\002\000\052\002\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\047\uffd2" +
    "\062\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\001" +
    "\002\000\004\046\354\001\002\000\004\047\uffcb\001\002" +
    "\000\004\047\360\001\002\000\004\047\uffcb\001\002\000" +
    "\004\047\uffcc\001\002\000\052\002\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\047\uffcd\062\uffcd\066\uffcd" +
    "\067\uffcd\070\uffcd\071\uffcd\072\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\036\002\036\005\021\006\034\011\010\012" +
    "\016\015\026\020\020\042\011\043\022\044\017\045\037" +
    "\046\027\047\025\051\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\023\334\024\074\025\072\026\071\027\070\030\065\031" +
    "\064\032\063\033\061\034\060\035\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\327\001\001\000" +
    "\002\001\001\000\030\023\260\024\074\025\072\026\071" +
    "\027\070\030\065\031\064\032\063\033\061\034\060\035" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\002\036\005\021\006\034\011\010\012\016\015\026\020" +
    "\020\042\252\043\022\044\017\045\037\046\027\047\025" +
    "\051\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\046\051\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\036\005\021\006\034\011" +
    "\010\012\016\015\026\020\020\042\051\043\022\044\017" +
    "\045\037\046\027\047\025\051\015\001\001\000\002\001" +
    "\001\000\030\023\062\024\074\025\072\026\071\027\070" +
    "\030\065\031\064\032\063\033\061\034\060\035\076\001" +
    "\001\000\004\034\172\001\001\000\012\031\171\032\063" +
    "\033\061\034\060\001\001\000\004\040\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\024\147\025\072\026\071" +
    "\027\070\030\065\031\064\032\063\033\061\034\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\101\001\001\000\002\001\001\000\026\024\103\025" +
    "\072\026\071\027\070\030\065\031\064\032\063\033\061" +
    "\034\060\035\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\106\025\072\026\071\027\070\030\065" +
    "\031\064\032\063\033\061\034\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\024\111\025\072\026\071" +
    "\027\070\030\065\031\064\032\063\033\061\034\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\114" +
    "\025\072\026\071\027\070\030\065\031\064\032\063\033" +
    "\061\034\060\001\001\000\002\001\001\000\022\025\116" +
    "\026\071\027\070\030\065\031\064\032\063\033\061\034" +
    "\060\001\001\000\002\001\001\000\014\030\146\031\064" +
    "\032\063\033\061\034\060\001\001\000\016\027\145\030" +
    "\065\031\064\032\063\033\061\034\060\001\001\000\016" +
    "\027\144\030\065\031\064\032\063\033\061\034\060\001" +
    "\001\000\016\027\143\030\065\031\064\032\063\033\061" +
    "\034\060\001\001\000\014\030\132\031\064\032\063\033" +
    "\061\034\060\001\001\000\016\027\131\030\065\031\064" +
    "\032\063\033\061\034\060\001\001\000\016\027\130\030" +
    "\065\031\064\032\063\033\061\034\060\001\001\000\016" +
    "\027\127\030\065\031\064\032\063\033\061\034\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\142\032\063\033\061\034" +
    "\060\001\001\000\012\031\141\032\063\033\061\034\060" +
    "\001\001\000\012\031\140\032\063\033\061\034\060\001" +
    "\001\000\012\031\137\032\063\033\061\034\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\024\153\025\072\026\071" +
    "\027\070\030\065\031\064\032\063\033\061\034\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\024\165\025\072\026\071\027\070\030\065\031\064" +
    "\032\063\033\061\034\060\036\163\037\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\024\165\025\072\026\071\027\070\030" +
    "\065\031\064\032\063\033\061\034\060\037\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\175\001\001\000\004\051\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\200\001\001\000\002\001\001\000\010\046\202\047\203" +
    "\051\015\001\001\000\024\024\213\025\072\026\071\027" +
    "\070\030\065\031\064\032\063\033\061\034\060\001\001" +
    "\000\024\024\204\025\072\026\071\027\070\030\065\031" +
    "\064\032\063\033\061\034\060\001\001\000\002\001\001" +
    "\000\024\024\206\025\072\026\071\027\070\030\065\031" +
    "\064\032\063\033\061\034\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\002\036\005\021\006\034\011" +
    "\010\012\016\015\026\020\020\042\211\043\022\044\017" +
    "\045\037\046\027\047\025\051\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\215" +
    "\025\072\026\071\027\070\030\065\031\064\032\063\033" +
    "\061\034\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\036\005\021\006\034\011\010\012\016\015" +
    "\026\020\020\042\220\043\022\044\017\045\037\046\027" +
    "\047\025\051\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\224\051\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\036\005" +
    "\021\006\034\011\010\012\016\015\026\020\020\042\227" +
    "\043\022\044\017\045\037\046\027\047\025\051\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\235\001\001\000\004\014" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\023\256\024\074\025" +
    "\072\026\071\027\070\030\065\031\064\032\063\033\061" +
    "\034\060\035\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\036\005\021\006\034" +
    "\011\010\012\016\015\026\020\020\042\262\043\022\044" +
    "\017\045\037\046\027\047\025\051\015\001\001\000\002" +
    "\001\001\000\004\041\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\036\005\021\006\034\011\010" +
    "\012\016\015\026\020\020\042\267\043\022\044\017\045" +
    "\037\046\027\047\025\051\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\275\001" +
    "\001\000\024\024\324\025\072\026\071\027\070\030\065" +
    "\031\064\032\063\033\061\034\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\302" +
    "\001\001\000\002\001\001\000\004\022\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\002\036" +
    "\005\021\006\034\011\010\012\016\015\026\020\020\042" +
    "\314\043\022\044\017\045\037\046\027\047\025\051\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\317\001\001\000\002\001\001\000\036\002\036\005\021" +
    "\006\034\011\010\012\016\015\026\020\020\042\321\043" +
    "\022\044\017\045\037\046\027\047\025\051\015\001\001" +
    "\000\002\001\001\000\004\050\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\023\331\024\074\025" +
    "\072\026\071\027\070\030\065\031\064\032\063\033\061" +
    "\034\060\035\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\002\036" +
    "\005\021\006\034\011\010\012\016\015\026\020\020\042" +
    "\336\043\022\044\017\045\037\046\027\047\025\051\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\342\001\001\000\002\001\001\000\004" +
    "\010\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\355\017" +
    "\354\001\001\000\002\001\001\000\006\016\355\017\356" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private AS as = new AS();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              P RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		P prog = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 prog.anadeIns(ins);
	   RESULT = prog; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		P start_val = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              P RESULT =null;
		 RESULT = as.programa(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= InsCond 
            {
              Ins RESULT =null;
		Ins valorInsCond = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsCond; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsBucle 
            {
              Ins RESULT =null;
		Ins valorInsBucle = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = valorInsBucle; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsDec 
            {
              Ins RESULT =null;
		Ins valorInsDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsDec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsAsig 
            {
              Ins RESULT =null;
		Ins valorInsAsig = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorInsAsig; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsSwitch 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsFun 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsProc 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsStruct 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsEnum 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsTypeDef 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= InsCall 
            {
              Ins RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // InsDec ::= Tipo IDEN PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.insDec(tipo, as.iden(lexDeIden), false, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsDec ::= Tipo IDEN IGUAL Exp PUNTOYCOMA 
            {
              Ins RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.insDec(tipo, as.iden(lexDeIden), true, valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsAsig ::= IDEN CorchetesPuntosIzq IGUAL Exp PUNTOYCOMA 
            {
              Ins RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		List<CorchetesYPuntosIzq> listaPuntosCorchetes = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insAsig(as.iden(lexDeIden), listaPuntosCorchetes, valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CorchetesPuntosIzq ::= CORCHETEAP Exp0 CORCHETECIERRE CorchetesPuntosIzq 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List<CorchetesYPuntosIzq> valorCorchPunto = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 valorCorchPunto.add(0, as.corchetesIzq(valorExp));
		RESULT = valorCorchPunto; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CorchetesPuntosIzq ::= PUNTO IDEN CorchetesPuntosIzq 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		List<CorchetesYPuntosIzq> valorCorchPunto = (List<CorchetesYPuntosIzq>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 valorCorchPunto.add(0, as.puntosIzq(as.iden(lexDeIden)));
		RESULT = valorCorchPunto; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CorchetesPuntosIzq ::= 
            {
              List<CorchetesYPuntosIzq> RESULT =null;
		 RESULT = new ArrayList<CorchetesYPuntosIzq>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CorchetesPuntosIzq",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= INT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoInt(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= BOOL 
            {
              Tipos RESULT =null;
		RESULT = as.tipoBool(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= CHAR 
            {
              Tipos RESULT =null;
		RESULT = as.tipoChar(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= FLOAT 
            {
              Tipos RESULT =null;
		RESULT = as.tipoFloat(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= VECTOR MENOR Tipo MAYOR 
            {
              Tipos RESULT =null;
		Tipos tipo = (Tipos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.tipoVector(tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= IDEN 
            {
              Tipos RESULT =null;
		String lexIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.tipoUsuario(lexIden); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InsCond ::= IF Exp LLAVESAP P LLAVESCIERRE ConElse 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P insIf = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		IfConElse insElse = (IfConElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		  if(insElse.isVieneConElse()){
	   		RESULT = as.insIfConElse(cond, insIf, insElse.getInstElse());
	   	}
	   	else{
	   		RESULT = as.insIfSinElse(cond, insIf);
	   	}
	 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ConElse ::= ELSE LLAVESAP P LLAVESCIERRE 
            {
              IfConElse RESULT =null;
		P insElse = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.ifConElse(true, insElse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConElse ::= 
            {
              IfConElse RESULT =null;
		RESULT = as.ifConElse(false, new P()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // InsBucle ::= WHILE Exp LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		P ins = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insWhile(cond, ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InsBucle ::= FOR PAP InsDec Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		Ins insDec = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insDec, cond, paso, inst); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InsBucle ::= FOR PAP InsAsig Exp0 PUNTOYCOMA Exp0 PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Ins RESULT =null;
		Ins insAsig = (Ins)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		P inst = (P)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.insFor(insAsig, cond, paso, inst); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InsSwitch ::= SWITCH PAP IDEN CorchetesPuntosIzq PCIERRE LLAVESAP ListaCase LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsSwitch",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListaCase ::= CASE TiposSwitch DOSPUNTOS P BREAK PUNTOYCOMA ListaCase 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaCase ::= DEFAULT DOSPUNTOS P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCase",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TiposSwitch ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TiposSwitch ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TiposSwitch ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TiposSwitch ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TiposSwitch ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TiposSwitch ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TiposSwitch",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InsFun ::= FUN Tipo IDEN PAP Param PCIERRE LLAVESAP P RETURN Exp PUNTOYCOMA LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Param ::= Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParamElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InsProc ::= PROC IDEN PAP Param PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InsCall ::= CALL IDEN PAP LIden PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LIden ::= IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LIden ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LIdenElige ::= COMA IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LIdenElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InsStruct ::= STRUCT IDEN LLAVESAP LDec LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LDec ::= DecConNuevosTipos LDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDec",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LEnum ::= IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LEnum ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LEnumElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InsTypeDef ::= TYPEDEF Tipo IDEN PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsTypeDef",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp ::= Exp0 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT= valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp ::= CreaVector 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp0 ::= Exp1 OR Exp0 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.or(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp0 ::= Exp1 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp1 ::= Exp2 AND Exp1 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.and(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp2 ::= Exp3 IGUALIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.igualIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp2 ::= Exp3 MAYOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp2 ::= Exp3 MENOR Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menor(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp3 MAYORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mayorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp2 ::= Exp3 MENORIGUAL Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.menorIgual(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp2 ::= Exp3 DISTINTO Exp3 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.distinto(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp3 ::= Exp3 SUMA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.suma(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp3 ::= Exp3 RESTA Exp4 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.resta(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp4 ::= Exp4 MUL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.mul(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp4 ::= Exp4 DIVENT Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divEnt(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp4 ::= Exp4 DIVREAL Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.divReal(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp4 ::= Exp4 MODULO Exp5 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.modulo(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp5 ::= NOT Exp5 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp6 ::= Exp6 CORCHETEAP Exp0 CORCHETECIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = as.corchetes(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp6 ::= Exp6 PUNTO IDEN 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = as.punto(valorExp, as.iden(lexDeIden)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp6 ::= Exp6 PUNTO SIZE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = as.size(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp6 ::= Exp7 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp7 ::= RESTA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.restaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp7 ::= SUMA Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.sumaUnaria(valorExp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp7 ::= Exp8 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp8 ::= ENT 
            {
              E RESULT =null;
		String lexDeEnt = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.ent(lexDeEnt); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp8 ::= REAL 
            {
              E RESULT =null;
		String lexDeReal = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.real(lexDeReal); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp8 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.verdadero(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp8 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.falso(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp8 ::= CARACTER 
            {
              E RESULT =null;
		String lexDeCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.caracter(lexDeCaracter); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp8 ::= IDEN FuncionOIden 
            {
              E RESULT =null;
		String lexDeIden = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		FuncionOIden valorExp = (FuncionOIden)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		  if (valorExp.isEsIden()){
		 	RESULT = as.iden(lexDeIden);
		 }
		 else{
		 	RESULT = as.llamadaFun(as.iden(lexDeIden), valorExp.getArgumentos());
		 }
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp8 ::= PAP Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp8",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FuncionOIden ::= PAP ListaArg PCIERRE 
            {
              FuncionOIden RESULT =null;
		FuncionOIden valorExp = (FuncionOIden)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionOIden",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FuncionOIden ::= 
            {
              FuncionOIden RESULT =null;
		 RESULT = as.funcionOIden(true, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FuncionOIden",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ListaArg ::= ListaArg1 
            {
              FuncionOIden RESULT =null;
		FuncionOIden valorExp = (FuncionOIden)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ListaArg ::= 
            {
              FuncionOIden RESULT =null;
		 RESULT = as.funcionOIden(false, new ArrayList<E>()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ListaArg1 ::= Exp0 COMA ListaArg1 
            {
              FuncionOIden RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		FuncionOIden valorExp = (FuncionOIden)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 valorExp.anadeElem(elem);
	   RESULT = valorExp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ListaArg1 ::= Exp0 
            {
              FuncionOIden RESULT =null;
		E elem = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 List<E> args = new ArrayList<E>();
	   args.add(elem);
	   RESULT = as.funcionOIden(false, args); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArg1",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CreaVector ::= CREAVECTOR PAP CreaVector COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CreaVector ::= CREAVECTOR PAP Exp0 COMA Exp0 PCIERRE 
            {
              E RESULT =null;
		E valorExp1 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		E valorExp2 = (E)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = as.vector(valorExp1, valorExp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CreaVector",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

