
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 04 23:34:21 CEST 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 04 23:34:21 CEST 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\004\000\002\005\004\000\002\005" +
    "\003\000\002\006\005\000\002\007\003\000\002\007\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\006\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\006\000\002\012\011\000\002\013\006" +
    "\000\002\013\002\000\002\014\010\000\002\015\005\000" +
    "\002\016\015\000\002\017\005\000\002\017\002\000\002" +
    "\020\006\000\002\020\002\000\002\021\012\000\002\022" +
    "\010\000\002\023\004\000\002\023\002\000\002\024\005" +
    "\000\002\024\002\000\002\025\007\000\002\026\004\000" +
    "\002\026\002\000\002\027\011\000\002\030\004\000\002" +
    "\030\002\000\002\031\005\000\002\031\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\036\002\uffff\004\005\005\030\006\006\011" +
    "\021\012\022\015\011\020\014\021\010\023\027\024\034" +
    "\026\004\030\025\031\013\001\002\000\004\031\165\001" +
    "\002\000\004\031\uffe8\001\002\000\004\031\uffe6\001\002" +
    "\000\042\002\ufff8\004\ufff8\005\ufff8\006\ufff8\011\ufff8\012" +
    "\ufff8\015\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\030\ufff8\031\ufff8\056\ufff8\001\002\000\004\031" +
    "\153\001\002\000\002\001\002\000\004\002\145\001\002" +
    "\000\006\031\137\062\136\001\002\000\002\001\002\000" +
    "\042\002\ufff7\004\ufff7\005\ufff7\006\ufff7\011\ufff7\012\ufff7" +
    "\015\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\030\ufff7\031\ufff7\056\ufff7\001\002\000\042\002\uffff" +
    "\004\005\005\030\006\006\011\021\012\022\015\011\020" +
    "\014\021\010\023\027\024\034\025\uffff\026\004\030\025" +
    "\031\013\056\uffff\001\002\000\042\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\011\ufff9\012\ufff9\015\ufff9\020\ufff9\021\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9\031\ufff9\056" +
    "\ufff9\001\002\000\042\002\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\011\ufffe\012\ufffe\015\ufffe\020\ufffe\021\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\030\ufffe\031\ufffe\056\ufffe\001\002" +
    "\000\004\031\uffe5\001\002\000\004\046\120\001\002\000" +
    "\042\002\ufff6\004\ufff6\005\ufff6\006\ufff6\011\ufff6\012\ufff6" +
    "\015\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\030\ufff6\031\ufff6\056\ufff6\001\002\000\042\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\011\ufffd\012\ufffd\015\ufffd\020" +
    "\ufffd\021\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd" +
    "\031\ufffd\056\ufffd\001\002\000\004\031\105\001\002\000" +
    "\004\031\077\001\002\000\004\031\070\001\002\000\004" +
    "\031\uffe7\001\002\000\042\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\011\ufff5\012\ufff5\015\ufff5\020\ufff5\021\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5\056\ufff5\001" +
    "\002\000\042\002\ufffa\004\ufffa\005\ufffa\006\ufffa\011\ufffa" +
    "\012\ufffa\015\ufffa\020\ufffa\021\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\030\ufffa\031\ufffa\056\ufffa\001\002\000\042" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\012\ufffb\015" +
    "\ufffb\020\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\030\ufffb\031\ufffb\056\ufffb\001\002\000\016\004\044\005" +
    "\040\006\043\011\042\012\036\031\041\001\002\000\042" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\011\ufffc\012\ufffc\015" +
    "\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\030\ufffc\031\ufffc\056\ufffc\001\002\000\004\046\065\001" +
    "\002\000\004\031\045\001\002\000\006\031\uffed\046\uffed" +
    "\001\002\000\006\031\uffe9\046\uffe9\001\002\000\006\031" +
    "\uffeb\046\uffeb\001\002\000\006\031\uffec\046\uffec\001\002" +
    "\000\006\031\uffee\046\uffee\001\002\000\004\060\046\001" +
    "\002\000\020\004\044\005\040\006\043\011\042\012\036" +
    "\031\041\061\uffdc\001\002\000\004\031\057\001\002\000" +
    "\004\061\051\001\002\000\004\055\052\001\002\000\036" +
    "\004\005\005\030\006\006\011\021\012\022\015\011\020" +
    "\014\021\010\023\027\024\034\025\uffff\026\004\030\025" +
    "\031\013\001\002\000\004\025\054\001\002\000\002\001" +
    "\002\000\004\056\056\001\002\000\042\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\011\uffde\012\uffde\015\uffde\020\uffde\021" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde" +
    "\056\uffde\001\002\000\006\061\uffda\063\060\001\002\000" +
    "\016\004\044\005\040\006\043\011\042\012\036\031\041" +
    "\001\002\000\004\061\uffdd\001\002\000\004\031\063\001" +
    "\002\000\006\061\uffda\063\060\001\002\000\004\061\uffdb" +
    "\001\002\000\016\004\044\005\040\006\043\011\042\012" +
    "\036\031\041\001\002\000\004\046\067\001\002\000\006" +
    "\031\uffea\046\uffea\001\002\000\004\060\071\001\002\000" +
    "\020\004\044\005\040\006\043\011\042\012\036\031\041" +
    "\061\uffdc\001\002\000\004\061\073\001\002\000\004\055" +
    "\074\001\002\000\036\004\005\005\030\006\006\011\021" +
    "\012\022\015\011\020\014\021\010\023\027\024\034\026" +
    "\004\030\025\031\013\056\uffff\001\002\000\004\056\076" +
    "\001\002\000\042\002\uffd9\004\uffd9\005\uffd9\006\uffd9\011" +
    "\uffd9\012\uffd9\015\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\030\uffd9\031\uffd9\056\uffd9\001\002\000" +
    "\006\062\102\064\100\001\002\000\042\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\011\ufff0\012\ufff0\015\ufff0\020\ufff0\021" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031\ufff0" +
    "\056\ufff0\001\002\000\042\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\011\ufff1\012\ufff1\015\ufff1\020\ufff1\021\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\030\ufff1\031\ufff1\056\ufff1\001" +
    "\002\000\002\001\002\000\004\064\104\001\002\000\042" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\011\uffef\012\uffef\015" +
    "\uffef\020\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\030\uffef\031\uffef\056\uffef\001\002\000\004\062\106\001" +
    "\002\000\004\055\107\001\002\000\006\031\110\056\uffce" +
    "\001\002\000\006\056\uffcc\057\114\001\002\000\004\056" +
    "\112\001\002\000\004\064\113\001\002\000\042\002\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\011\uffd0\012\uffd0\015\uffd0\020" +
    "\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0" +
    "\031\uffd0\056\uffd0\001\002\000\004\031\116\001\002\000" +
    "\004\056\uffcf\001\002\000\006\056\uffcc\057\114\001\002" +
    "\000\004\056\uffcd\001\002\000\016\004\044\005\040\006" +
    "\043\011\042\012\036\031\041\001\002\000\004\046\122" +
    "\001\002\000\004\031\uffe4\001\002\000\010\002\001\025" +
    "\001\056\001\001\002\000\004\017\125\001\002\000\004" +
    "\055\126\001\002\000\036\004\005\005\030\006\006\011" +
    "\021\012\022\015\011\020\014\021\010\023\027\024\034" +
    "\026\004\030\025\031\013\056\uffff\001\002\000\004\056" +
    "\130\001\002\000\044\002\uffe1\004\uffe1\005\uffe1\006\uffe1" +
    "\011\uffe1\012\uffe1\015\uffe1\020\uffe1\021\uffe1\022\131\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\056\uffe1" +
    "\001\002\000\004\055\133\001\002\000\042\002\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\011\uffe3\012\uffe3\015\uffe3\020\uffe3" +
    "\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031" +
    "\uffe3\056\uffe3\001\002\000\036\004\005\005\030\006\006" +
    "\011\021\012\022\015\011\020\014\021\010\023\027\024" +
    "\034\026\004\030\025\031\013\056\uffff\001\002\000\004" +
    "\056\135\001\002\000\042\002\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\011\uffe2\012\uffe2\015\uffe2\020\uffe2\021\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\056\uffe2\001" +
    "\002\000\002\001\002\000\006\062\102\064\100\001\002" +
    "\000\042\002\ufff2\004\ufff2\005\ufff2\006\ufff2\011\ufff2\012" +
    "\ufff2\015\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\030\ufff2\031\ufff2\056\ufff2\001\002\000\042\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\011\ufff4\012\ufff4\015\ufff4" +
    "\020\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030" +
    "\ufff4\031\ufff4\056\ufff4\001\002\000\042\002\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\011\ufff3\012\ufff3\015\ufff3\020\ufff3\021" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3" +
    "\056\ufff3\001\002\000\004\064\144\001\002\000\044\002" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\011\uffdf\012\uffdf\015\uffdf" +
    "\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\056\uffdf\062\uffdf\001\002\000\004\002\000" +
    "\001\002\000\004\016\147\001\002\000\004\055\150\001" +
    "\002\000\036\004\005\005\030\006\006\011\021\012\022" +
    "\015\011\020\014\021\010\023\027\024\034\026\004\030" +
    "\025\031\013\056\uffff\001\002\000\004\056\152\001\002" +
    "\000\042\002\uffe0\004\uffe0\005\uffe0\006\uffe0\011\uffe0\012" +
    "\uffe0\015\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\030\uffe0\031\uffe0\056\uffe0\001\002\000\004\060" +
    "\154\001\002\000\006\031\156\061\uffd6\001\002\000\004" +
    "\061\163\001\002\000\006\061\uffd4\063\157\001\002\000" +
    "\004\031\161\001\002\000\004\061\uffd7\001\002\000\006" +
    "\061\uffd4\063\157\001\002\000\004\061\uffd5\001\002\000" +
    "\004\064\164\001\002\000\042\002\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\011\uffd8\012\uffd8\015\uffd8\020\uffd8\021\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\056\uffd8" +
    "\001\002\000\004\055\166\001\002\000\006\056\uffd1\062" +
    "\136\001\002\000\004\056\172\001\002\000\006\056\uffd1" +
    "\062\136\001\002\000\004\056\uffd2\001\002\000\042\002" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\011\uffd3\012\uffd3\015\uffd3" +
    "\020\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\030" +
    "\uffd3\031\uffd3\056\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\034\002\011\003\015\004\032\006\023\011" +
    "\025\012\017\014\034\016\031\021\016\022\030\025\006" +
    "\027\014\032\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\145\001\001\000\002\001\001\000\006\005" +
    "\140\015\137\001\001\000\004\033\123\001\001\000\002" +
    "\001\001\000\034\002\122\003\015\004\032\006\023\011" +
    "\025\012\017\014\034\016\031\021\016\022\030\025\006" +
    "\027\014\032\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\046" +
    "\017\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\052\003\015\004\032\006\023" +
    "\011\025\012\017\014\034\016\031\021\016\022\030\025" +
    "\006\027\014\032\022\001\001\000\002\001\001\000\004" +
    "\033\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\060\001\001\000\004\010\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\063\001\001\000" +
    "\002\001\001\000\004\010\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\046\017" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\074\003\015\004\032\006\023\011\025\012\017\014" +
    "\034\016\031\021\016\022\030\025\006\027\014\032\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\110\001\001" +
    "\000\004\031\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\116\001\001\000\002\001\001\000\004\010" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\126\003\015\004\032\006\023\011\025\012\017\014\034" +
    "\016\031\021\016\022\030\025\006\027\014\032\022\001" +
    "\001\000\002\001\001\000\004\013\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\133\003\015\004" +
    "\032\006\023\011\025\012\017\014\034\016\031\021\016" +
    "\022\030\025\006\027\014\032\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\142\001\001\000\004" +
    "\007\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\150\003\015\004\032\006\023\011\025\012\017\014\034" +
    "\016\031\021\016\022\030\025\006\027\014\032\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\154\001\001\000\002\001\001\000\004\024" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\167\026\166" +
    "\001\001\000\002\001\001\000\006\015\167\026\170\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= InsCond 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= InsDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= InsBucle 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= InsIden 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= InsFun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inst ::= InsProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= InsStruct 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= InsEnum 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= InsTypeDef 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= InsCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InsIden ::= IDEN InsIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIden",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // InsIdenElige ::= IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // InsIdenElige ::= InsAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsIdenElige",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InsDec ::= TipoSinIden IDEN AsigDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsDec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AsigDec ::= PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AsigDec ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AsigDec",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= VECTOR MENOR Tipo MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TipoSinIden ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TipoSinIden ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TipoSinIden ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TipoSinIden ::= FLOAT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TipoSinIden ::= VECTOR MENOR Tipo MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoSinIden",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InsCond ::= IF Exp THEN LLAVESAP P LLAVESCIERRE ConElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCond",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConElse ::= ELSE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ConElse ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ConElse",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InsBucle ::= WHILE Exp DO LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsBucle",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InsAsig ::= IGUAL Exp PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsAsig",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InsFun ::= FUN Tipo IDEN PAP Param PCIERRE LLAVESAP P RETURN Exp LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFun",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Param ::= Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Param ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParamElige ::= COMA Tipo IDEN ParamElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParamElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamElige",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InsProc ::= PROC IDEN PAP Param PCIERRE LLAVESAP P LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsProc",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InsCall ::= CALL IDEN PAP LIden PCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsCall",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LIden ::= IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LIden ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIden",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LIdenElige ::= COMA IDEN LIdenElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LIdenElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIdenElige",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InsStruct ::= STRUCT IDEN LLAVESAP LAsig LLAVESCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsStruct",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LAsig ::= InsAsig LAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LAsig",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LAsig ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LAsig",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InsEnum ::= ENUM IDEN IGUAL LLAVESAP LEnum LLAVESCIERRE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsEnum",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LEnum ::= IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LEnum ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LEnumElige ::= BARRA IDEN LEnumElige 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LEnumElige ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnumElige",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

