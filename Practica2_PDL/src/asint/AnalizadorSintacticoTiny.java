
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Feb 26 18:24:41 CET 2020
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Feb 26 18:24:41 CET 2020
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\005\000\002\003\004\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\010\004\000\002\010\002\000\002" +
    "\007\005\000\002\007\002\000\002\006\003\000\002\006" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\006\000\002\012\010\000\002\013\006\000" +
    "\002\013\010\000\002\014\005\000\002\014\007\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\010\002\uffff\004\007\016\004\001\002\000" +
    "\014\004\014\017\012\020\022\021\021\027\016\001\002" +
    "\000\010\002\uffff\004\007\016\004\001\002\000\004\002" +
    "\070\001\002\000\004\012\010\001\002\000\014\004\014" +
    "\017\012\020\022\021\021\027\016\001\002\000\020\002" +
    "\ufff9\004\ufff9\013\ufff9\015\ufff9\016\ufff9\026\ufff9\030\ufff9" +
    "\001\002\000\012\022\057\023\061\024\060\025\056\001" +
    "\002\000\020\002\ufffb\004\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\026\054\030\ufffb\001\002\000\020\002\ufff8\004\ufff8\013" +
    "\ufff8\015\ufff8\016\ufff8\026\ufff8\030\ufff8\001\002\000\010" +
    "\002\ufffe\004\ufffe\016\ufffe\001\002\000\020\004\014\005" +
    "\043\017\012\020\022\021\021\027\016\030\ufff6\001\002" +
    "\000\020\002\uffef\004\uffef\013\uffef\015\uffef\016\uffef\026" +
    "\uffef\030\uffef\001\002\000\020\002\ufff0\004\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\026\ufff0\030\ufff0\001\002\000\012\006" +
    "\024\007\026\010\030\011\027\001\002\000\012\006\024" +
    "\007\026\010\030\011\027\001\002\000\020\002\ufff1\004" +
    "\ufff1\013\ufff1\015\ufff1\016\ufff1\026\ufff1\030\ufff1\001\002" +
    "\000\020\004\uffe4\005\uffe4\014\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\027\uffe4\001\002\000\004\005\031\001\002\000\020" +
    "\004\uffe3\005\uffe3\014\uffe3\017\uffe3\020\uffe3\021\uffe3\027" +
    "\uffe3\001\002\000\020\004\uffe1\005\uffe1\014\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\027\uffe1\001\002\000\020\004\uffe2\005" +
    "\uffe2\014\uffe2\017\uffe2\020\uffe2\021\uffe2\027\uffe2\001\002" +
    "\000\016\004\014\014\033\017\012\020\022\021\021\027" +
    "\016\001\002\000\020\002\uffec\004\uffec\013\uffec\015\uffec" +
    "\016\uffec\026\uffec\030\uffec\001\002\000\014\004\014\017" +
    "\012\020\022\021\021\027\016\001\002\000\004\015\035" +
    "\001\002\000\020\002\uffeb\004\uffeb\013\uffeb\015\uffeb\016" +
    "\uffeb\026\uffeb\030\uffeb\001\002\000\016\004\014\014\040" +
    "\017\012\020\022\021\021\027\016\001\002\000\020\002" +
    "\uffea\004\uffea\013\uffea\015\uffea\016\uffea\026\uffea\030\uffea" +
    "\001\002\000\014\004\014\017\012\020\022\021\021\027" +
    "\016\001\002\000\004\015\042\001\002\000\020\002\uffe9" +
    "\004\uffe9\013\uffe9\015\uffe9\016\uffe9\026\uffe9\030\uffe9\001" +
    "\002\000\006\013\ufff3\030\ufff3\001\002\000\006\013\050" +
    "\030\ufff4\001\002\000\006\013\ufff2\030\ufff2\001\002\000" +
    "\004\030\047\001\002\000\020\002\ufffa\004\ufffa\013\ufffa" +
    "\015\ufffa\016\ufffa\026\ufffa\030\ufffa\001\002\000\016\004" +
    "\014\005\043\017\012\020\022\021\021\027\016\001\002" +
    "\000\004\030\ufff7\001\002\000\006\013\050\030\ufff4\001" +
    "\002\000\004\030\ufff5\001\002\000\014\004\014\017\012" +
    "\020\022\021\021\027\016\001\002\000\016\002\ufffc\004" +
    "\ufffc\013\ufffc\015\ufffc\016\ufffc\030\ufffc\001\002\000\004" +
    "\005\uffe6\001\002\000\004\005\uffe5\001\002\000\004\005" +
    "\uffe7\001\002\000\004\005\uffe8\001\002\000\004\005\063" +
    "\001\002\000\016\004\014\014\065\017\012\020\022\021" +
    "\021\027\016\001\002\000\020\002\uffee\004\uffee\013\uffee" +
    "\015\uffee\016\uffee\026\uffee\030\uffee\001\002\000\014\004" +
    "\014\017\012\020\022\021\021\027\016\001\002\000\004" +
    "\015\067\001\002\000\020\002\uffed\004\uffed\013\uffed\015" +
    "\uffed\016\uffed\026\uffed\030\uffed\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002\000\010\002\ufffd\004" +
    "\ufffd\016\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\006\002\005\003\004\001\001\000\016\004" +
    "\071\005\012\011\010\012\022\013\017\014\016\001\001" +
    "\000\006\002\070\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\014\005\012\011\010\012\022" +
    "\013\017\014\016\001\001\000\002\001\001\000\004\015" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\044\005\012\006\043\010\045\011" +
    "\010\012\022\013\017\014\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\035\001\001\000\004\016" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\031\011\010\012\022\013\017\014\016" +
    "\001\001\000\002\001\001\000\016\004\033\005\012\011" +
    "\010\012\022\013\017\014\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\036\011\010\012\022\013" +
    "\017\014\016\001\001\000\002\001\001\000\016\004\040" +
    "\005\012\011\010\012\022\013\017\014\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\044\005\012\006\051\011\010" +
    "\012\022\013\017\014\016\001\001\000\002\001\001\000" +
    "\004\007\052\001\001\000\002\001\001\000\016\004\054" +
    "\005\012\011\010\012\022\013\017\014\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\063\011\010\012\022\013\017\014\016\001\001\000\002" +
    "\001\001\000\016\004\065\005\012\011\010\012\022\013" +
    "\017\014\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= Inst P 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= IDEN IGUAL Lista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= PRINT Lista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista ::= TLista CONCAT Lista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista ::= TLista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lista",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TLista ::= CORCHETEABRE CLista CORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TLista",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TLista ::= ResultadoOp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TLista",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TLista ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TLista",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLista ::= NLista RLista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLista",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLista ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CLista",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RLista ::= COMA NLista RLista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RLista",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RLista ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RLista",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NLista ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NLista",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NLista ::= Lista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("NLista",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ResultadoOp ::= ResFilter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResultadoOp",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ResultadoOp ::= ResMap 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResultadoOp",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ResultadoOp ::= ResReduce 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResultadoOp",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ResFilter ::= LFILTER Comp ENT TLista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResFilter",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ResFilter ::= LFILTER Comp ENT PAP Lista PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResFilter",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ResMap ::= LMAP Arit ENT TLista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResMap",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ResMap ::= LMAP Arit ENT PAP Lista PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResMap",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ResReduce ::= LREDUCE Arit TLista 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResReduce",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ResReduce ::= LREDUCE Arit PAP Lista PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ResReduce",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Comp ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Comp",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Comp ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Comp",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Comp ::= IGUALIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Comp",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Comp ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Comp",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Arit ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Arit",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Arit ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Arit",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Arit ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Arit",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Arit ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Arit",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

